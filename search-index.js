var searchIndex = JSON.parse('{\
"embassy_executor":{"doc":"embassy-executor","t":"NDDEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLXLLLLLALLLXLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLFF","n":["Busy","Executor","SendSpawner","SpawnError","SpawnToken","Spawner","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","fmt","for_current_executor","for_current_executor","from","from","from","from","from","into","into","into","into","into","main","make_send","must_spawn","must_spawn","new","new_failed","raw","run","spawn","spawn","task","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AvailableTask","Executor","TaskPool","TaskRef","TaskStorage","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","claim","clone","clone_into","from","from","from","from","from","initialize","into","into","into","into","into","new","new","new","poll","spawn","spawn","spawner","task_from_waker","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wake_task","wake_task_no_pend"],"q":[[0,"embassy_executor"],[65,"embassy_executor::raw"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::ops::function"],[123,"core::result"],[124,"core::any"],[125,"core::option"],[126,"core::future::future"],[127,"core::marker"]],"d":["Too many instances of this task are already running.","Single-threaded std-based executor.","Handle to spawn tasks into an executor from any thread.","Error returned when spawning a task.","Token to spawn a newly-created task in an executor.","Handle to spawn tasks into an executor.","","","","","","","","","","","","","","","","","","","Get a Spawner for the current executor.","Get a Spawner for the current executor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>executor</code> instance and declares an …","Convert this Spawner to a SendSpawner. This allows you to …","Spawn a task into an executor, panicking on failure.","Spawn a task into an executor, panicking on failure.","Create a new Executor.","Return a SpawnToken that represents a failed spawn.","Raw executor.","Run the executor.","Spawn a task into an executor.","Spawn a task into an executor.","Declares an async task that can be run by <code>embassy-executor</code>…","","","","","","","","","","","","","","","","","","","An uninitialized <code>TaskStorage</code>.","Raw executor.","Raw storage that can hold up to N tasks of the same type.","This is essentially a <code>&amp;&#39;static TaskStorage&lt;F&gt;</code> where the …","Raw storage in which a task can be spawned.","","","","","","","","","","","Try to claim a <code>TaskStorage</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the <code>TaskStorage</code> to run the given future.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new TaskStorage, in not-spawned state.","Create a new TaskPool, with all tasks in non-spawned state.","Create a new executor.","Poll all queued tasks in this executor.","Try to spawn the task.","Try to spawn a task in the pool.","Get a spawner that spawns tasks in this executor.","Get a task pointer from a waker.","","","","","","","","","","","","","","","","","Wake a task by <code>TaskRef</code>.","Wake a task by <code>TaskRef</code> without calling pend."],"i":[1,0,0,0,0,0,9,5,1,2,3,9,5,1,2,3,1,2,3,1,2,3,5,1,2,3,9,5,1,2,3,9,5,1,2,3,0,2,2,3,9,5,0,9,2,3,0,1,2,3,9,5,1,2,3,9,5,1,2,3,9,5,1,2,3,0,0,0,0,0,14,15,19,20,18,14,15,19,20,18,15,18,18,14,15,19,20,18,15,14,15,19,20,18,14,19,20,20,14,19,20,0,18,14,15,19,20,18,14,15,19,20,18,14,15,19,20,18,0,0],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[5,[-1]]],4,[]],[[1,6],7],[[],2],[[],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,3],[[2,[5,[-1]]],4,[]],[[3,[5,[-1]]],4,8],[[],9],[[],[[5,[-1]]],[]],0,[[9,-1],10,11],[[2,[5,[-1]]],[[12,[4,1]]],[]],[[3,[5,[-1]]],[[12,[4,1]]],8],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[16,[[15,[-1]]]]],17],[18,18],[[-1,-2],4,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[15,[-1]],-2],[[5,[-1]]],17,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[14,[-1]]],17],[[],[[19,[-1]]],17],[4,20],[20,4],[[[14,[-1]],-2],[[5,[[0,[21]]]]],17,11],[[[19,[-1]],-2],[[5,[[0,[21]]]]],17,11],[20,2],[22,18],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[18,4],[18,4]],"c":[],"p":[[4,"SpawnError",0],[3,"Spawner",0],[3,"SendSpawner",0],[15,"tuple"],[3,"SpawnToken",0],[3,"Formatter",120],[6,"Result",120],[8,"Send",121],[3,"Executor",0],[15,"never"],[8,"FnOnce",122],[4,"Result",123],[3,"TypeId",124],[3,"TaskStorage",65],[3,"AvailableTask",65],[4,"Option",125],[8,"Future",126],[3,"TaskRef",65],[3,"TaskPool",65],[3,"Executor",65],[8,"Sized",121],[3,"Waker",127]],"b":[]},\
"embassy_futures":{"doc":"embassy-futures","t":"FAFAFDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLLLEEENNNNNNNDDDDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLLLLLLL","n":["block_on","join","poll_once","select","yield_now","Join","Join3","Join4","Join5","JoinArray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","join","join3","join4","join5","join_array","poll","poll","poll","poll","poll","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Either","Either3","Either4","First","First","First","Fourth","Second","Second","Second","Select","Select3","Select4","SelectArray","SelectSlice","Third","Third","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","poll","poll","poll","poll","poll","select","select3","select4","select_array","select_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"embassy_futures"],[5,"embassy_futures::join"],[65,"embassy_futures::select"],[164,"core::future::future"],[165,"core::task::poll"],[166,"core::fmt"],[167,"core::fmt"],[168,"core::task::wake"],[169,"core::result"],[170,"core::any"],[171,"core::clone"]],"d":["Run a future to completion using a busy loop.","Wait for multiple futures to complete.","Poll a future once.","Wait for the first of several futures to complete.","Yield from the current task once, allowing other tasks to …","Future for the <code>join</code> function.","Future for the <code>join3</code> function.","Future for the <code>join4</code> function.","Future for the <code>join5</code> function.","Future for the <code>join_array</code> function.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Joins the result of two futures, waiting for them both to …","Joins the result of three futures, waiting for them all to …","Joins the result of four futures, waiting for them all to …","Joins the result of five futures, waiting for them all to …","Joins the result of an array of futures, waiting for them …","","","","","","","","","","","","","","","","","","","","","Result for <code>select</code>.","Result for <code>select3</code>.","Result for <code>select4</code>.","First future finished first.","First future finished first.","First future finished first.","Fourth future finished first.","Second future finished first.","Second future finished first.","Second future finished first.","Future for the <code>select</code> function.","Future for the <code>select3</code> function.","Future for the <code>select4</code> function.","Future for the <code>select_array</code> function.","Future for the <code>select_slice</code> function.","Third future finished first.","Third future finished first.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Wait for one of two futures to complete.","Same as <code>select</code>, but with more futures.","Same as <code>select</code>, but with more futures.","Creates a new future which will select over an array of …","Creates a new future which will select over a slice of …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,0,0,0,0,0,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,0,0,0,16,18,19,19,16,18,19,0,0,0,0,0,18,19,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,16,18,19,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,20,21,22,23,24,20,21,22,23,24,0,0,0,0,0,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24],"f":[[-1,[],1],0,[-1,2,1],0,[[],[[0,[1]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]],4],5,[1,6]],[[[7,[-1,-2]],4],5,[1,6],[1,6]],[[[8,[-1,-2,-3]],4],5,[1,6],[1,6],[1,6]],[[[9,[-1,-2,-3,-4]],4],5,[1,6],[1,6],[1,6],[1,6]],[[[10,[-1,-2,-3,-4,-5]],4],5,[1,6],[1,6],[1,6],[1,6],[1,6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[-1,-2],[[7,[-1,-2]]],1,1],[[-1,-2,-3],[[8,[-1,-2,-3]]],1,1,1],[[-1,-2,-3,-4],[[9,[-1,-2,-3,-4]]],1,1,1,1],[[-1,-2,-3,-4,-5],[[10,[-1,-2,-3,-4,-5]]],1,1,1,1,1],[[[11,[-1]]],[[3,[-1]]],1],[[[12,[[3,[-1]]]],13],2,1],[[[12,[[7,[-1,-2]]]],13],2,1,1],[[[12,[[8,[-1,-2,-3]]]],13],2,1,1,1],[[[12,[[9,[-1,-2,-3,-4]]]],13],2,1,1,1,1],[[[12,[[10,[-1,-2,-3,-4,-5]]]],13],2,1,1,1,1,1],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1,-2]]],[[16,[-1,-2]]],17,17],[[[18,[-1,-2,-3]]],[[18,[-1,-2,-3]]],17,17,17],[[[19,[-1,-2,-3,-4]]],[[19,[-1,-2,-3,-4]]],17,17,17,17],[[[16,[-1,-2]],4],5,6,6],[[[20,[-1,-2]],4],5,6,6],[[[18,[-1,-2,-3]],4],5,6,6,6],[[[21,[-1,-2,-3]],4],5,6,6,6],[[[19,[-1,-2,-3,-4]],4],5,6,6,6,6],[[[22,[-1,-2,-3,-4]],4],5,6,6,6,6],[[[23,[-1]],4],5,6],[[[24,[-1]],4],5,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[12,[[20,[-1,-2]]]],13],2,1,1],[[[12,[[21,[-1,-2,-3]]]],13],2,1,1,1],[[[12,[[22,[-1,-2,-3,-4]]]],13],2,1,1,1,1],[[[12,[[23,[-1]]]],13],2,1],[[[12,[[24,[-1]]]],13],2,1],[[-1,-2],[[20,[-1,-2]]],1,1],[[-1,-2,-3],[[21,[-1,-2,-3]]],1,1,1],[[-1,-2,-3,-4],[[22,[-1,-2,-3,-4]]],1,1,1,1],[[[11,[-1]]],[[23,[-1]]],1],[[[25,[-1]]],[[24,[-1]]],1],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[8,"Future",164],[4,"Poll",165],[3,"JoinArray",5],[3,"Formatter",166],[6,"Result",166],[8,"Debug",166],[3,"Join",5],[3,"Join3",5],[3,"Join4",5],[3,"Join5",5],[15,"array"],[3,"Pin",167],[3,"Context",168],[4,"Result",169],[3,"TypeId",170],[4,"Either",65],[8,"Clone",171],[4,"Either3",65],[4,"Either4",65],[3,"Select",65],[3,"Select3",65],[3,"Select4",65],[3,"SelectArray",65],[3,"SelectSlice",65],[15,"slice"]],"b":[]},\
"embassy_macros":{"doc":"embassy-macros","t":"XXXXX","n":["main_cortex_m","main_riscv","main_std","main_wasm","task"],"q":[[0,"embassy_macros"]],"d":["Creates a new <code>executor</code> instance and declares an …","Creates a new <code>executor</code> instance and declares an …","Creates a new <code>executor</code> instance and declares an …","Creates a new <code>executor</code> instance and declares an …","Declares an async task that can be run by <code>embassy-executor</code>…"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"embassy_sync":{"doc":"embassy-sync","t":"AAAAAAAAGDGDLLLLLLLLLLLLLLLLLLLALLLLLLDSDIDLLLLLLLLLLLLLKLLLLLLLLLLLLLLLDDDDDNNDDDDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDNDDDEEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCECNNNNIDCCEKLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLALKLALLLLLLLLLLLLKLKLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["blocking_mutex","channel","mutex","pipe","pubsub","signal","waitqueue","zerocopy_channel","CriticalSectionMutex","Mutex","NoopMutex","ThreadModeMutex","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","const_new","drop","from","from","get_mut","into","into","into_inner","lock","lock","new","new","raw","try_from","try_from","try_into","try_into","type_id","type_id","CriticalSectionRawMutex","INIT","NoopRawMutex","RawMutex","ThreadModeRawMutex","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","from","from","from","into","into","into","lock","lock","lock","lock","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Channel","DynamicReceiveFuture","DynamicReceiver","DynamicSendFuture","DynamicSender","Empty","Full","ReceiveFuture","Receiver","SendFuture","Sender","TryReceiveError","TrySendError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","new","poll","poll","poll","poll","poll_ready_to_receive","poll_ready_to_receive","poll_ready_to_receive","poll_ready_to_send","poll_ready_to_send","poll_ready_to_send","poll_receive","poll_receive","poll_receive","receive","receive","receive","receiver","send","send","send","sender","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","try_poll","try_receive","try_receive","try_receive","try_send","try_send","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Mutex","MutexGuard","TryLockError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from","from","get_mut","into","into","into","into_inner","lock","new","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_lock","type_id","type_id","type_id","Empty","FillBufFuture","Full","Pipe","ReadFuture","Reader","TryReadError","TryWriteError","WriteFuture","Writer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","consume","consume","eq","eq","fill_buf","fill_buf","flush","flush","flush","fmt","fmt","free_capacity","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_future","into_future","into_future","is_empty","is_full","len","new","poll","poll","poll","read","read","read","read","read","split","to_owned","to_owned","to_owned","try_fill_buf","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_write","try_write","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write_all","DynImmediatePublisher","DynPublisher","DynSubscriber","Error","ImmediatePublisher","Lagged","MaximumPublishersReached","MaximumSubscribersReached","Message","PubSubBehavior","PubSubChannel","Publisher","Subscriber","WaitResult","available","available","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dyn_immediate_publisher","dyn_publisher","dyn_subscriber","eq","eq","fmt","fmt","from","from","from","get_message_with_context","get_message_with_context","immediate_publisher","into","into","into","new","publish_immediate","publish_immediate","publish_with_context","publish_with_context","publisher","publisher","space","space","subscriber","subscriber","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unregister_publisher","unregister_publisher","unregister_subscriber","unregister_subscriber","DynImmediatePublisher","DynPublisher","ImmediatePub","ImmediatePublisher","Pub","Publisher","PublisherWaitFuture","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_future","poll","publish","publish_immediate","publish_immediate","space","space","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_publish","try_publish","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynSubscriber","Sub","Subscriber","SubscriberWaitFuture","available","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","from","from","from","from","into","into","into","into","into_future","next_message","next_message_pure","poll","poll_next","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_next_message","try_next_message_pure","try_poll_next","type_id","type_id","type_id","type_id","Signal","borrow","borrow_mut","default","from","into","new","reset","signal","signaled","try_from","try_into","type_id","wait","AtomicWaker","MultiWakerRegistration","WakerRegistration","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","fmt","from","from","from","into","into","into","new","new","new","occupied","register","register","register","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wake","wake","wake","Channel","Receiver","Sender","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","new","poll_receive","poll_send","receive","receive_done","send","send_done","split","try_from","try_from","try_from","try_into","try_into","try_into","try_receive","try_send","type_id","type_id","type_id"],"q":[[0,"embassy_sync"],[8,"embassy_sync::blocking_mutex"],[38,"embassy_sync::blocking_mutex::raw"],[72,"embassy_sync::channel"],[220,"embassy_sync::mutex"],[257,"embassy_sync::pipe"],[373,"embassy_sync::pubsub"],[441,"embassy_sync::pubsub::publisher"],[515,"embassy_sync::pubsub::subscriber"],[561,"embassy_sync::signal"],[575,"embassy_sync::waitqueue"],[611,"embassy_sync::zerocopy_channel"],[647,"critical_section"],[648,"core::marker"],[649,"core::ops::function"],[650,"core::result"],[651,"core::any"],[652,"core::clone"],[653,"core::cmp"],[654,"core::fmt"],[655,"core::fmt"],[656,"core::task::wake"],[657,"core::task::poll"],[658,"core::option"],[659,"core::marker"],[660,"core::task::wake"]],"d":["Blocking mutex.","A queue for sending values between asynchronous tasks.","Async mutex.","Async byte stream pipe.","Implementation of PubSubChannel, a queue where published …","A synchronization primitive for passing the latest value …","Async low-level wait queues","A zero-copy queue for sending values between asynchronous …","A mutex that allows borrowing data across executors and …","Blocking mutex (not async)","A mutex that allows borrowing data in the context of a …","A “mutex” that only allows borrowing from thread mode.","Borrows the data for the duration of the critical section","Borrows the data","","","Borrows the data","","","Creates a new mutex based on a pre-existing raw mutex.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Creates a critical section and grants temporary access to …","Lock the <code>ThreadModeMutex</code>, granting access to the data.","Creates a new mutex in an unlocked state ready for use.","Creates a new mutex","Mutex primitives.","","","","","","","A mutex that allows borrowing data across executors and …","Create a new <code>RawMutex</code> instance.","A mutex that allows borrowing data in the context of a …","Raw mutex trait.","A “mutex” that only allows borrowing from thread mode.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lock this <code>RawMutex</code>.","","","","Create a new <code>CriticalSectionRawMutex</code>.","Create a new <code>NoopRawMutex</code>.","Create a new <code>ThreadModeRawMutex</code>.","","","","","","","","","","A bounded channel for communicating between asynchronous …","Future returned by <code>DynamicReceiver::receive</code>.","Receive-only access to a <code>Channel</code> without knowing channel …","Future returned by <code>DynamicSender::send</code>.","Send-only access to a <code>Channel</code> without knowing channel size.","A message could not be received because the channel is …","The data could not be sent on the channel because the …","Future returned by <code>Channel::receive</code> and  <code>Receiver::receive</code>.","Receive-only access to a <code>Channel</code>.","Future returned by <code>Channel::send</code> and  <code>Sender::send</code>.","Send-only access to a <code>Channel</code>.","Error returned by <code>try_receive</code>.","Error returned by <code>try_send</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Establish a new bounded channel. For example, to create …","","","","","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to send","Allows a poll_fn to poll until the channel is ready to send","Allows a poll_fn to poll until the channel is ready to send","Poll the channel for the next item","Poll the channel for the next item","Poll the channel for the next message","Receive the next value.","Receive the next value.","Receive the next value.","Get a receiver for this channel.","Sends a value.","Sends a value.","Send a value, waiting until there is capacity.","Get a sender for this channel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to immediately receive the next value.","Attempt to immediately receive the next value.","Attempt to immediately receive a message.","Attempt to immediately send a message.","Attempt to immediately send a message.","Attempt to immediately send a message.","","","","","","","","","","","","Async mutex.","Async mutex guard.","Error returned by <code>Mutex::try_lock</code>","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Lock the mutex.","Create a new mutex with the given value.","","","","","","","","Attempt to immediately lock the mutex.","","","","No data could be read from the pipe because it is currently","Future returned by [<code>Pipe::fill_buf</code>] and  <code>Reader::fill_buf</code>.","No data could be written to the pipe because it is …","A bounded byte-oriented pipe for communicating between …","Future returned by <code>Pipe::read</code> and  <code>Reader::read</code>.","Read-only access to a <code>Pipe</code>.","Error returned by <code>try_read</code>.","Error returned by <code>try_write</code>.","Future returned by <code>Pipe::write</code> and  <code>Writer::write</code>.","Write-only access to a <code>Pipe</code>.","","","","","","","","","","","","","","","","","Total byte capacity.","Clear the data in the pipe’s buffer.","","","","","","","Tell this buffer that <code>amt</code> bytes have been consumed from …","","","","Return the contents of the internal buffer, filling it …","","","","","","","Free byte capacity.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return whether the pipe is empty (no data buffered)","Return whether the pipe is full (no free space in the …","Used byte capacity.","Establish a new bounded pipe. For example, to create one …","","","","","Read some bytes from the pipe.","Read some bytes from the pipe.","","","Split this pipe into a BufRead-capable reader and a writer.","","","","Try returning contents of the internal buffer.","","","","","","","","","","","","","","","","","Attempt to immediately read some bytes from the pipe.","Attempt to immediately read some bytes from the pipe.","Attempt to immediately write some bytes to the pipe.","Attempt to immediately write some bytes to the pipe.","","","","","","","","","Write some bytes to the pipe.","","","Write some bytes to the pipe.","","Write all bytes to the pipe.","","","","Error type for the PubSubChannel","","The subscriber did not receive all messages and lagged by …","All publisher slots are used. To add another publisher, …","All subscriber slots are used. To add another subscriber, …","A message was received","‘Middle level’ behaviour of the pubsub channel. This …","A broadcast channel implementation where multiple …","","","The result of the subscriber wait procedure","Get the amount of messages that are between the given the …","","","","","","","","","","","","Create a new publisher that can only send immediate …","Create a new publisher","Create a new subscriber. It will only receive messages …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to get a message from the queue with the given message …","","Create a new publisher that can only send immediate …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new channel","Publish a message immediately","","Try to publish a message to the queue.","","Implementation of anything directly publisher related","Create a new publisher","The amount of messages that can still be published without …","","Implementation of anything directly subscriber related","Create a new subscriber. It will only receive messages …","","","","","","","","","","","","Let the channel know that a publisher has dropped","","Let the channel know that a subscriber has dropped","","An immediate publisher that holds a dynamic reference to …","A publisher that holds a dynamic reference to the channel","A publisher that can only use the <code>publish_immediate</code> …","An immediate publisher that holds a generic reference to …","A publisher to a channel","A publisher that holds a generic reference to the channel","Future for the publisher wait action","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Publish a message. But if the message queue is full, wait …","Publish a message right now even when the queue is full. …","Publish the message right now even when the queue is full. …","The amount of messages that can still be published without …","The amount of messages that can still be published without …","","","","","","","","","","","","","","","Publish a message if there is space in the message queue","Publish a message if there is space in the message queue","","","","","","","","A subscriber that holds a dynamic reference to the channel","A subscriber to a channel","A subscriber that holds a generic reference to the channel","Future for the subscriber wait action","The amount of messages this subscriber hasn’t received …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Wait for a published message","Wait for a published message (ignoring lag results)","","","","","","","","","","","Try to see if there’s a published message we haven’t …","Try to see if there’s a published message we haven’t …","","","","","","Single-slot signaling primitive.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new <code>Signal</code>.","Remove the queued value in this <code>Signal</code>, if any.","Mark this Signal as signaled.","non-blocking method to check whether this signal has been …","","","","Future that completes when this Signal has been signaled.","Utility struct to register and wake a waker.","Utility struct to register and wake multiple wakers.","Utility struct to register and wake a waker.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>AtomicWaker</code>.","Create a new empty instance","Create a new <code>WakerRegistration</code>.","Returns true if a waker is currently registered","Register a waker. Overwrites the previous waker, if any.","Register a waker. If the buffer is full the function …","Register a waker. Overwrites the previous waker, if any.","","","","","","","","","","Wake the registered waker, if any.","Wake all registered wakers. This clears the buffer","Wake the registered waker, if any.","A bounded zero-copy channel for communicating between …","Receive-only access to a <code>Channel</code>.","Send-only access to a <code>Channel</code>.","","","Creates one further <code>Sender</code> over the same channel.","Creates one further <code>Sender</code> over the same channel.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize a new <code>Channel</code>.","Attempts to asynchronously receive a value over the …","Attempts to send a value over the channel.","Asynchronously receive a value over the channel.","Notify the channel that the receiving of the value has …","Asynchronously send a value over the channel.","Notify the channel that the sending of the value has been …","Creates a <code>Sender</code> and <code>Receiver</code> from an existing channel.","","","","","","","Attempts to receive a value over the channel.","Attempts to send a value over the channel.","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,5,5,2,5,2,5,2,5,2,2,5,2,2,5,2,5,0,2,5,2,5,2,5,0,8,0,0,0,1,4,12,1,4,12,12,1,4,12,1,4,12,8,1,4,12,1,4,12,1,4,12,1,4,12,1,4,12,0,0,0,0,0,17,18,0,0,0,0,0,0,13,14,15,16,26,30,31,32,25,17,18,13,14,15,16,26,30,31,32,25,17,18,13,14,15,16,17,18,13,14,15,16,17,18,17,18,17,18,13,14,14,15,16,16,26,30,31,32,25,17,18,13,14,15,16,26,30,31,32,25,17,18,26,30,31,32,25,26,30,31,32,15,16,25,13,14,25,15,16,25,15,16,25,25,13,14,25,25,13,14,15,16,17,18,13,14,15,16,26,30,31,32,25,17,18,13,14,15,16,26,30,31,32,25,17,18,26,30,15,16,25,13,14,25,13,14,15,16,26,30,31,32,25,17,18,0,0,0,35,34,33,35,34,33,33,33,34,34,34,33,33,35,34,33,35,35,34,33,35,35,35,33,35,34,33,35,34,33,35,35,34,33,39,0,40,0,0,0,0,0,0,0,38,45,41,46,42,36,39,40,38,45,41,46,42,36,39,40,36,36,38,39,40,38,39,40,41,41,39,40,41,41,38,36,36,39,40,36,38,45,41,46,42,36,39,40,38,45,41,46,42,36,39,40,45,46,42,36,36,36,36,45,46,42,41,41,36,36,36,36,38,39,40,41,38,45,41,46,42,36,39,40,38,45,41,46,42,36,39,40,41,36,38,36,38,45,41,46,42,36,39,40,38,38,36,36,36,36,0,0,0,0,0,50,49,49,50,0,0,0,0,0,59,48,48,49,50,48,49,50,49,50,49,50,48,48,48,49,50,49,50,48,49,50,59,48,48,48,49,50,48,59,48,59,48,0,48,59,48,0,48,49,50,48,49,50,48,49,50,48,49,50,59,48,59,48,0,0,0,0,0,0,0,58,52,56,61,51,55,60,58,52,56,61,51,55,60,52,56,51,55,52,56,51,55,58,58,52,56,61,51,55,60,58,52,56,61,51,55,60,60,60,58,58,61,58,61,58,52,56,61,51,55,60,58,52,56,61,51,55,60,58,61,58,52,56,61,51,55,60,0,0,0,0,62,62,53,57,63,62,53,57,63,53,57,53,57,62,62,53,57,63,62,53,57,63,63,62,62,63,62,62,53,57,63,62,53,57,63,62,62,62,62,53,57,63,0,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,68,69,67,68,69,67,67,67,68,69,67,68,69,67,68,69,67,67,68,69,67,68,69,67,68,69,67,68,69,67,68,69,67,0,0,0,73,71,71,72,72,73,71,72,73,71,72,73,71,72,73,72,71,72,72,71,71,73,73,71,72,73,71,72,72,71,73,71,72],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1,-1]],3],-1,[]],[[[2,[4,-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],-1,6],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[2,[-1,-2]]],[],[]],[[[5,[-1]]],7,6],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-2]]],-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],-2,[],[]],[[[2,[-1,-2]],-3],-4,8,[],9,[]],[[[5,[-1]],-2],-3,6,9,[]],[-1,[[2,[-2,-1]]],[],8],[-1,[[5,[-1]]],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],-3,[],9,[]],[[1,-1],-2,9,[]],[[4,-1],-2,9,[]],[[12,-1],-2,9,[]],[[],1],[[],4],[[],12],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[13,[-1,-2]]],8,[]],[[[14,[-1]]],[[14,[-1]]],[]],[[[15,[-1,-2]]],[[15,[-1,-2]]],8,[]],[[[16,[-1]]],[[16,[-1]]],[]],[17,17],[[[18,[-1]]],[[18,[-1]]],19],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[17,17],20],[[[18,[-1]],[18,[-1]]],20,21],[[17,22],23],[[[18,[-1]],22],23,24],[-1,-1,[]],[-1,-1,[]],[[[13,[-1,-2]]],[[14,[-2]]],8,[]],[-1,-1,[]],[-1,-1,[]],[[[15,[-1,-2]]],[[16,[-2]]],8,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],[[25,[-1,-2]]],8,[]],[[[27,[[26,[-1,-2]]]],28],[[29,[-2]]],8,[]],[[[27,[[30,[-1]]]],28],[[29,[-1]]],[]],[[[27,[[31,[-1,-2]]]],28],29,8,[]],[[[27,[[32,[-1]]]],28],29,[]],[[[15,[-1,-2]],28],[[29,[7]]],8,[]],[[[16,[-1]],28],[[29,[7]]],[]],[[[25,[-1,-2]],28],[[29,[7]]],8,[]],[[[13,[-1,-2]],28],[[29,[7]]],8,[]],[[[14,[-1]],28],[[29,[7]]],[]],[[[25,[-1,-2]],28],[[29,[7]]],8,[]],[[[15,[-1,-2]],28],[[29,[-2]]],8,[]],[[[16,[-1]],28],[[29,[-1]]],[]],[[[25,[-1,-2]],28],[[29,[-2]]],8,[]],[[[15,[-1,-2]]],[[26,[-1,-2]]],8,[]],[[[16,[-1]]],[[30,[-1]]],[]],[[[25,[-1,-2]]],[[26,[-1,-2]]],8,[]],[[[25,[-1,-2]]],[[15,[-1,-2]]],8,[]],[[[13,[-1,-2]],-2],[[31,[-1,-2]]],8,[]],[[[14,[-1]],-1],[[32,[-1]]],[]],[[[25,[-1,-2]],-2],[[31,[-1,-2]]],8,[]],[[[25,[-1,-2]]],[[13,[-1,-2]]],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[27,[-1]],28],29,[]],[[[27,[-1]],28],29,[]],[[[15,[-1,-2]]],[[10,[-2,17]]],8,[]],[[[16,[-1]]],[[10,[-1,17]]],[]],[[[25,[-1,-2]]],[[10,[-2,17]]],8,[]],[[[13,[-1,-2]],-2],[[10,[7,[18,[-2]]]]],8,[]],[[[14,[-1]],-1],[[10,[7,[18,[-1]]]]],[]],[[[25,[-1,-2]],-2],[[10,[7,[18,[-2]]]]],8,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],7,[],[]],[[[34,[-1,-2]]],[],8,6],[[[34,[-1,-2]]],[],8,6],[[[34,[-1,-2]]],7,8,6],[[33,33],20],[[33,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[35,[-1,-2]]],-2,8,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],-2,8,[6,6]],[[[35,[-1,-2]]],[[34,[-1,-2]]],8,6],[-1,[[35,[-2,-1]]],[],8],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[35,[-1,-2]]],[[10,[[34,[-1,-2]],33]]],8,6],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],37,8],[[[36,[-1]]],7,8],[[[38,[-1]]],[[38,[-1]]],8],[39,39],[40,40],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[41,[-1]],37],7,8],[[[41,[-1]],37],7,8],[[39,39],20],[[40,40],20],[[[41,[-1]]],[[42,[-1]]],8],[[[41,[-1]]],[[10,[[44,[43]]]]],8],[[[38,[-1]]],[[10,[7]]],8],[[[36,[-1]]],[[10,[7]]],8],[[[36,[-1]]],[[10,[7]]],8],[[39,22],23],[[40,22],23],[[[36,[-1]]],37,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[36,[-1]]],20,8],[[[36,[-1]]],20,8],[[[36,[-1]]],37,8],[[],[[36,[-1]]],8],[[[27,[[45,[-1]]]],28],29,8],[[[27,[[46,[-1]]]],28],29,8],[[[27,[[42,[-1]]]],28],29,8],[[[41,[-1]],[44,[43]]],[[10,[37]]],8],[[[41,[-1]],[44,[43]]],[[46,[-1]]],8],[[[36,[-1]],[44,[43]]],[[46,[-1]]],8],[[[36,[-1]],[44,[43]]],[[10,[37]]],8],[[[36,[-1]],[44,[43]]],[[10,[37]]],8],[[[36,[-1]]],[[7,[[41,[-1]],[38,[-1]]]]],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[41,[-1]]],[[10,[[44,[43]],39]]],8],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[41,[-1]],[44,[43]]],[[10,[37,39]]],8],[[[36,[-1]],[44,[43]]],[[10,[37,39]]],8],[[[38,[-1]],[44,[43]]],[[10,[37,40]]],8],[[[36,[-1]],[44,[43]]],[[10,[37,40]]],8],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[38,[-1]],[44,[43]]],[[45,[-1]]],8],[[[38,[-1]],[44,[43]]],[[10,[37]]],8],[[[36,[-1]],[44,[43]]],[[10,[37]]],8],[[[36,[-1]],[44,[43]]],[[45,[-1]]],8],[[[36,[-1]],[44,[43]]],[[10,[37]]],8],[[[36,[-1]],[44,[43]]],7,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,47],47,[]],[[[48,[-1,-2]],47],47,8,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[[[50,[-1]]],[[50,[-1]]],19],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[48,[-1,-2]]],[[51,[-2]]],8,19],[[[48,[-1,-2]]],[[10,[[52,[-2]],49]]],8,19],[[[48,[-1,-2]]],[[10,[[53,[-2]],49]]],8,19],[[49,49],20],[[[50,[-1]],[50,[-1]]],20,21],[[49,22],23],[[[50,[-1]],22],23,24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,47,[54,[28]]],[[29,[[50,[-2]]]]],[],[]],[[[48,[-1,-2]],47,[54,[28]]],[[29,[[50,[-2]]]]],8,19],[[[48,[-1,-2]]],[[55,[-1,-2]]],8,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[48,[-1,-2]]],8,19],[[-1,-2],7,[],[]],[[[48,[-1,-2]],-2],7,8,19],[[-1,-2,[54,[28]]],[[10,[7,-2]]],[],[]],[[[48,[-1,-2]],-2,[54,[28]]],[[10,[7,-2]]],8,19],0,[[[48,[-1,-2]]],[[10,[[56,[-1,-2]],49]]],8,19],[-1,37,[]],[[[48,[-1,-2]]],37,8,19],0,[[[48,[-1,-2]]],[[10,[[57,[-1,-2]],49]]],8,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,7,[]],[[[48,[-1,-2]]],7,8,19],[[-1,47],7,[]],[[[48,[-1,-2]],47],7,8,19],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1]]],[],19],[[[56,[-1,-2]]],[],8,19],[[[51,[-1]]],[],19],[[[55,[-1,-2]]],[],8,19],[[[52,[-1]]],[],19],[[[56,[-1,-2]]],[],8,19],[[[51,[-1]]],[],19],[[[55,[-1,-2]]],[],8,19],[[[58,[-2,-1]]],7,19,[[59,[-1]],6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[27,[[60,[-2,-1]]]],28],29,19,[[59,[-1]],6]],[[[58,[-2,-1]],-1],[[60,[-2,-1]]],19,[[59,[-1]],6]],[[[58,[-2,-1]],-1],7,19,[[59,[-1]],6]],[[[61,[-2,-1]],-1],7,19,[[59,[-1]],6]],[[[58,[-2,-1]]],37,19,[[59,[-1]],6]],[[[61,[-2,-1]]],37,19,[[59,[-1]],6]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[58,[-2,-1]],-1],[[10,[7,-1]]],19,[[59,[-1]],6]],[[[61,[-2,-1]],-1],[[10,[7,-1]]],19,[[59,[-1]],6]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[[[62,[-2,-1]]],47,19,[[59,[-1]],6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1]]],[],19],[[[57,[-1,-2]]],[],8,19],[[[53,[-1]]],[],19],[[[57,[-1,-2]]],[],8,19],[[[62,[-2,-1]]],7,19,[[59,[-1]],6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[62,[-2,-1]]],[[63,[-2,-1]]],19,[[59,[-1]],6]],[[[62,[-2,-1]]],-1,19,[[59,[-1]],6]],[[[27,[[63,[-2,-1]]]],28],29,19,[[59,[-1]],6]],[[[27,[[62,[-2,-1]]]],28],[[29,[54]]],19,[[59,[-1]],6]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[62,[-2,-1]]],[[54,[[50,[-1]]]]],19,[[59,[-1]],6]],[[[62,[-2,-1]]],[[54,[-1]]],19,[[59,[-1]],6]],[[[27,[-1]],28],[[29,[[54,[10]]]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[64,[-1,-2]]],8,[]],[-1,-1,[]],[-1,-2,[],[]],[[],[[64,[-1,-2]]],8,[]],[[[64,[-1,-2]]],7,8,65],[[[64,[-1,-2]],-2],7,8,65],[[[64,[-1,-2]]],20,8,65],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[[64,[-1,-2]]],[[0,[66]]],8,65],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],67],[[67,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],68],[[],69],[[],67],[67,20],[[68,70],7],[[69,70],7],[[67,70],7],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[68,7],[69,7],[67,7],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[71,[-1,-2]]],[[71,[-1,-2]]],8,[]],[[[72,[-1,-2]]],[[72,[-1,-2]]],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]]],[[73,[-2,-1]]],[],8],[[[72,[-1,-2]],28],[[29,[-2]]],8,[]],[[[71,[-1,-2]],28],[[29,[-2]]],8,[]],[[[72,[-1,-2]]],-2,8,[]],[[[72,[-1,-2]]],7,8,[]],[[[71,[-1,-2]]],-2,8,[]],[[[71,[-1,-2]]],7,8,[]],[[[73,[-1,-2]]],[[7,[[71,[-1,-2]],[72,[-1,-2]]]]],8,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[72,[-1,-2]]],[[54,[-2]]],8,[]],[[[71,[-1,-2]]],[[54,[-2]]],8,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[3,"CriticalSectionRawMutex",38],[3,"Mutex",8],[3,"CriticalSection",647],[3,"NoopRawMutex",38],[3,"ThreadModeMutex",8],[8,"Sized",648],[15,"tuple"],[8,"RawMutex",38],[8,"FnOnce",649],[4,"Result",650],[3,"TypeId",651],[3,"ThreadModeRawMutex",38],[3,"Sender",72],[3,"DynamicSender",72],[3,"Receiver",72],[3,"DynamicReceiver",72],[4,"TryReceiveError",72],[4,"TrySendError",72],[8,"Clone",652],[15,"bool"],[8,"PartialEq",653],[3,"Formatter",654],[6,"Result",654],[8,"Debug",654],[3,"Channel",72],[3,"ReceiveFuture",72],[3,"Pin",655],[3,"Context",656],[4,"Poll",657],[3,"DynamicReceiveFuture",72],[3,"SendFuture",72],[3,"DynamicSendFuture",72],[3,"TryLockError",220],[3,"MutexGuard",220],[3,"Mutex",220],[3,"Pipe",257],[15,"usize"],[3,"Writer",257],[4,"TryReadError",257],[4,"TryWriteError",257],[3,"Reader",257],[3,"FillBufFuture",257],[15,"u8"],[15,"slice"],[3,"WriteFuture",257],[3,"ReadFuture",257],[15,"u64"],[3,"PubSubChannel",373],[4,"Error",373],[4,"WaitResult",373],[3,"DynImmediatePublisher",441],[3,"DynPublisher",441],[3,"DynSubscriber",515],[4,"Option",658],[3,"ImmediatePublisher",441],[3,"Publisher",441],[3,"Subscriber",515],[3,"Pub",441],[8,"PubSubBehavior",373],[3,"PublisherWaitFuture",441],[3,"ImmediatePub",441],[3,"Sub",515],[3,"SubscriberWaitFuture",515],[3,"Signal",561],[8,"Send",648],[8,"Future",659],[3,"WakerRegistration",575],[3,"AtomicWaker",575],[3,"MultiWakerRegistration",575],[3,"Waker",656],[3,"Sender",611],[3,"Receiver",611],[3,"Channel",611]],"b":[[12,"impl-Mutex%3CCriticalSectionRawMutex,+T%3E"],[13,"impl-Mutex%3CNoopRawMutex,+T%3E"],[291,"impl-Reader%3C\'p,+M,+N%3E"],[292,"impl-BufRead-for-Reader%3C\'_,+M,+N%3E"],[295,"impl-Reader%3C\'p,+M,+N%3E"],[296,"impl-BufRead-for-Reader%3C\'_,+M,+N%3E"],[298,"impl-Write-for-Pipe%3CM,+N%3E"],[299,"impl-Write-for-%26Pipe%3CM,+N%3E"],[329,"impl-Read-for-Reader%3C\'_,+M,+N%3E"],[330,"impl-Reader%3C\'p,+M,+N%3E"],[331,"impl-Pipe%3CM,+N%3E"],[332,"impl-Read-for-%26Pipe%3CM,+N%3E"],[333,"impl-Read-for-Pipe%3CM,+N%3E"],[367,"impl-Writer%3C\'p,+M,+N%3E"],[368,"impl-Write-for-Writer%3C\'_,+M,+N%3E"],[369,"impl-Write-for-%26Pipe%3CM,+N%3E"],[370,"impl-Pipe%3CM,+N%3E"],[371,"impl-Write-for-Pipe%3CM,+N%3E"]]},\
"embassy_time":{"doc":"embassy-time","t":"DDDSSSSRDDDLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLFDIFKLLLLLLLLFKFKFKLLLLIK","n":["Delay","Duration","Instant","MAX","MAX","MIN","MIN","TICK_HZ","Ticker","TimeoutError","Timer","add","add","add_assign","add_assign","after","after_micros","after_millis","after_secs","after_ticks","as_micros","as_micros","as_millis","as_millis","as_secs","as_secs","as_ticks","as_ticks","at","block_for","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_div","checked_duration_since","checked_mul","checked_sub","checked_sub","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","delay_ms","delay_ms","delay_ms","delay_us","delay_us","delay_us","div","div_assign","driver","duration_since","elapsed","eq","eq","eq","every","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_hz","from_micros","from_micros","from_micros_floor","from_millis","from_millis","from_millis_floor","from_secs","from_secs","from_secs_floor","from_ticks","from_ticks","into","into","into","into","into","into","into_future","is_terminated","mul","mul_assign","next","now","partial_cmp","partial_cmp","poll","poll_next","queue","reset","saturating_duration_since","sub","sub","sub","sub_assign","sub_assign","time_driver_impl","timer_queue_impl","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_timeout","AlarmHandle","Driver","allocate_alarm","allocate_alarm","borrow","borrow_mut","clone","clone_into","from","id","into","new","now","now","set_alarm","set_alarm","set_alarm_callback","set_alarm_callback","to_owned","try_from","try_into","type_id","TimerQueue","schedule_wake"],"q":[[0,"embassy_time"],[147,"embassy_time::driver"],[169,"embassy_time::queue"],[171,"core::option"],[172,"core::cmp"],[173,"core::fmt"],[174,"core::fmt"],[175,"core::pin"],[176,"core::task::wake"],[177,"core::task::poll"],[178,"alloc::string"],[179,"core::result"],[180,"core::time"],[181,"core::any"],[182,"core::task::wake"]],"d":["Type implementing async delays and blocking <code>embedded-hal</code> …","Represents the difference between two Instants","An Instant in time, based on the MCU’s clock ticks since …","The largest value that can be represented by the <code>Duration</code> …","The largest (latest) value that can be represented by the …","The smallest value that can be represented by the <code>Duration</code> …","The smallest (earliest) value that can be represented by …","中文(Chinese)","Asynchronous stream that yields every Duration, …","Error returned by <code>with_timeout</code> on timeout.","A future that completes at a specified Instant.","","","","","Expire after specified Duration. This can be used as a …","Expire after the specified number of microseconds.","Expire after the specified number of milliseconds.","Expire after the specified number of seconds.","Expire after the specified number of ticks.","Convert the <code>Duration</code> to microseconds, rounding down.","Microseconds since system boot.","Convert the <code>Duration</code> to milliseconds, rounding down.","Milliseconds since system boot.","Convert the <code>Duration</code> to seconds, rounding down.","Seconds since system boot.","Tick count of the <code>Duration</code>.","Tick count since system boot.","Expire at specified Instant","Blocks for at least <code>duration</code>.","","","","","","","","","","","","","Adds one Duration to another, returning a new Duration or …","Adds one Duration to self, returning a new <code>Instant</code> or None …","Divides one Duration a scalar u32, returning a new …","Duration between this Instant and another Instant","Multiplies one Duration by a scalar u32, returning a new …","Subtracts one Duration to another, returning a new …","Subtracts one Duration to self, returning a new <code>Instant</code> or …","","","","","","","","","","","","","","","","","","Time driver interface","Duration between this Instant and another Instant Panics …","Duration elapsed since this Instant.","","","","Creates a new ticker that ticks at the specified duration …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a duration corresponding to the specified Hz. …","Creates a duration from the specified number of …","Chinese","Creates a duration from the specified number of …","Creates a duration from the specified number of …","Chinese","Creates a duration from the specified number of …","Creates a duration from the specified number of seconds, …","Chinese","Creates a duration from the specified number of seconds, …","Creates a duration from the specified number of clock ticks","Create an Instant from a tick count since system boot.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Waits for the next tick.","Returns an Instant representing the current time.","","","","","Timer queue implementation","Resets the ticker back to its original state. This causes …","Returns the duration since the “earlier” Instant. If …","","","","","","Set the time Driver implementation.","Set the TimerQueue implementation.","","","","","","","","","","Converts using <code>Duration::from_micros</code>. Fails if value can …","","","","","","","","","","","","","","","Runs a given future with a timeout.","Alarm handle, assigned by the driver.","Time driver","See <code>Driver::allocate_alarm</code>","Try allocating an alarm handle. Returns None if no alarms …","","","","","Returns the argument unchanged.","Get the ID of the AlarmHandle.","Calls <code>U::from(self)</code>.","Create an AlarmHandle","See <code>Driver::now</code>","Return the current timestamp in ticks.","See <code>Driver::set_alarm</code>","Sets an alarm at the given timestamp. When the current …","See <code>Driver::set_alarm_callback</code>","Sets the callback function to be called when the alarm …","","","","","Timer queue","Schedules a waker in the queue to be awoken at moment <code>at</code>. …"],"i":[0,0,0,1,2,1,2,0,0,0,0,1,2,1,2,4,4,4,4,4,1,2,1,2,1,2,1,2,4,0,10,4,14,1,2,8,10,4,14,1,2,8,1,2,1,2,1,1,2,1,2,8,1,2,8,1,2,1,10,10,10,10,10,10,1,1,0,2,2,1,2,8,14,1,1,2,2,8,10,4,14,1,2,8,1,1,2,1,1,2,1,1,2,1,1,2,10,4,14,1,2,8,4,14,1,1,14,2,1,2,4,14,0,14,2,1,2,2,1,2,0,0,1,2,8,1,2,10,4,14,1,1,2,8,10,4,14,1,2,8,10,4,14,1,2,8,0,0,0,0,27,25,25,25,25,25,25,25,25,0,27,0,27,0,27,25,25,25,25,0,28],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,1],2],[[1,1],3],[[2,1],3],[1,4],[5,4],[5,4],[5,4],[5,4],[1,5],[2,5],[1,5],[2,5],[1,5],[2,5],[1,5],[2,5],[2,4],[1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[6,[1]]]],[[2,1],[[6,[2]]]],[[1,7],[[6,[1]]]],[[2,2],[[6,[1]]]],[[1,7],[[6,[1]]]],[[1,1],[[6,[1]]]],[[2,1],[[6,[2]]]],[1,1],[2,2],[8,8],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],9],[[2,2],9],[[],1],[[10,11],3],[[10,7],3],[[10,12],3],[[10,12],3],[[10,11],3],[[10,7],3],[[1,7],1],[[1,7],3],0,[[2,2],1],[2,1],[[1,1],13],[[2,2],13],[[8,8],13],[1,14],[[1,15],16],[[1,15],16],[[2,15],16],[[2,15],16],[[8,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,1],[5,1],[5,2],[5,1],[5,1],[5,2],[5,1],[5,1],[5,2],[5,1],[5,1],[5,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[14,13],[[1,7],1],[[1,7],3],[14,[[0,[17]]]],[[],2],[[1,1],[[6,[9]]]],[[2,2],[[6,[9]]]],[[[18,[4]],19],20],[[[18,[14]],19],[[20,[6]]]],0,[14,3],[[2,2],1],[[1,1],1],[[2,2],1],[[2,1],2],[[1,1],3],[[2,1],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,21,[]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[23,[[22,[1]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[1,-1],[[22,[8]]],17],0,0,[[],[[6,[25]]]],[-1,[[6,[25]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],3,[],[]],[-1,-1,[]],[25,12],[-1,-2,[],[]],[12,25],[[],5],[-1,5,[]],[[25,5],13],[[-1,25,5],13,[]],[[25,3],3],[[-1,25,3],3,[]],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,24,[]],0,[[-1,2,26],3,[]]],"c":[],"p":[[3,"Duration",0],[3,"Instant",0],[15,"tuple"],[3,"Timer",0],[15,"u64"],[4,"Option",171],[15,"u32"],[3,"TimeoutError",0],[4,"Ordering",172],[3,"Delay",0],[15,"u16"],[15,"u8"],[15,"bool"],[3,"Ticker",0],[3,"Formatter",173],[6,"Result",173],[8,"Future",174],[3,"Pin",175],[3,"Context",176],[4,"Poll",177],[3,"String",178],[4,"Result",179],[3,"Duration",180],[3,"TypeId",181],[3,"AlarmHandle",147],[3,"Waker",176],[8,"Driver",147],[8,"TimerQueue",169]],"b":[[58,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu16%3E-for-Delay"],[59,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu32%3E-for-Delay"],[60,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu8%3E-for-Delay"],[61,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu8%3E-for-Delay"],[62,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu16%3E-for-Delay"],[63,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu32%3E-for-Delay"],[73,"impl-Display-for-Duration"],[74,"impl-Debug-for-Duration"],[75,"impl-Display-for-Instant"],[76,"impl-Debug-for-Instant"],[116,"impl-Sub-for-Instant"],[117,"impl-Sub%3CDuration%3E-for-Instant"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
