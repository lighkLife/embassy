var searchIndex = JSON.parse('{\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[156,"core::cmp"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::option"],[160,"core::result"],[161,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[11]]],9],[[[8,[12]]],9],[[[8,[13]]],9],[[[8,[14]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[1,-1],9,19],[[2,-1],9,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[3]]]],[[2,2],[[20,[3]]]],[[[8,[21]]],7],[[[8,[21]],[8,[7]]],9],[[[8,[21]],[8,[7]]],9],[[[8,[21]]],10],[[[8,[21]],[8,[10]]],9],[[[8,[21]],[8,[10]]],9],[[[8,[21]]],11],[[[8,[21]],[8,[11]]],9],[[[8,[21]]],12],[[[8,[21]],[8,[12]]],9],[[[8,[21]]],13],[[[8,[21]]],13],[[[8,[21]],[8,[13]]],9],[[[8,[21]]],14],[[[8,[21]]],14],[[[8,[21]],[8,[14]]],9],[[[8,[21]],22],14],[[[8,[21]],22],11],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],15],[[[8,[21]],22],15],[[[8,[21]],22],15],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[[8,[21]],7],9],[[[8,[7]],[8,[21]]],9],[[[8,[21]],10],9],[[[8,[10]],[8,[21]]],9],[[[8,[21]],11],9],[[[8,[11]],[8,[21]]],9],[[[8,[21]],12],9],[[[8,[12]],[8,[21]]],9],[[[8,[21]],13],9],[[[8,[21]],13],9],[[[8,[13]],[8,[21]]],9],[[[8,[21]],14],9],[[[8,[21]],14],9],[[[8,[14]],[8,[21]]],9],[[[8,[25]],[8,[21]]],9],[[[8,[21]],14,22],9],[[[8,[21]],11,22],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9]],"c":[53,56],"p":[[4,"BigEndian",0],[4,"LittleEndian",0],[4,"Ordering",156],[15,"bool"],[3,"Formatter",157],[6,"Result",157],[15,"f32"],[15,"slice"],[15,"tuple"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher",158],[4,"Option",159],[15,"u8"],[15,"usize"],[4,"Result",160],[3,"TypeId",161],[15,"i8"],[8,"ByteOrder",0]],"b":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"critical_section":{"doc":"critical-section","t":"DIDGDFKLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLOLLLLLLLLLLLLF","n":["CriticalSection","Impl","Mutex","RawRestoreState","RestoreState","acquire","acquire","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_ref","borrow_ref_mut","clone","clone","clone_into","clone_into","fmt","fmt","fmt","from","from","from","get_mut","into","into","into","into_inner","invalid","new","new","release","release","replace","replace_with","set_impl","take","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with"],"q":[[0,"critical_section"],[52,"core::cell"],[53,"core::cell"],[54,"core::fmt"],[55,"core::default"],[56,"core::result"],[57,"core::any"]],"d":["Critical section token.","Methods required for a critical section implementation.","A mutex based on critical sections.","Raw, transparent “restore state”.","Opaque “restore state”.","Acquire a critical section in the current thread.","Acquire the critical section.","","Borrows the data for the duration of the critical section.","","","","","","Borrow the data and call <code>RefCell::borrow</code>","Borrow the data and call <code>RefCell::borrow_mut</code>","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the contained value when the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the contained value, consuming the mutex.","Create an invalid, dummy  <code>RestoreState</code>.","Creates a new mutex.","Creates a critical section token.","Release the critical section.","Release the critical section.","Borrow the data and call <code>RefCell::replace</code>","Borrow the data and call <code>RefCell::replace_with</code>","Set the critical section implementation.","Borrow the data and call <code>RefCell::take</code>","","","","","","","","","","","","Execute closure <code>f</code> in a critical section."],"i":[0,0,0,0,0,0,16,3,3,4,1,3,4,1,3,3,4,1,4,1,3,4,1,3,4,1,3,3,4,1,3,1,3,4,0,16,3,3,0,3,4,1,3,4,1,3,4,1,3,4,1,0],"f":[0,0,0,0,0,[[],1],[[],2],[-1,-2,[],[]],[[[3,[-1]],4],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[[5,[-1]]]],4],[[6,[-1]]],[]],[[[3,[[5,[-1]]]],4],[[7,[-1]]],[]],[4,4],[1,1],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[3,[-1]],9],10,11],[[4,9],10],[[1,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],-1,[]],[[],1],[-1,[[3,[-1]]],[]],[[],4],[1,8],[2,8],[[[3,[[5,[-1]]]],4,-1],-1,[]],[[[3,[[5,[-1]]]],4,-2],-1,[],12],0,[[[3,[[5,[-1]]]],4],-1,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,-2,12,[]]],"c":[],"p":[[3,"RestoreState",0],[6,"RawRestoreState",0],[3,"Mutex",0],[3,"CriticalSection",0],[3,"RefCell",52],[3,"Ref",52],[3,"RefMut",52],[15,"tuple"],[3,"Formatter",53],[6,"Result",53],[8,"Debug",53],[8,"FnOnce",54],[8,"Default",55],[4,"Result",56],[3,"TypeId",57],[8,"Impl",0]],"b":[]},\
"darling":{"doc":"Darling","t":"NDIIIIIIIINGAAKLLKLKKKLLLLLKLKLAOOANQENDEIDNQNNENNENNQNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLDNDDNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIINIGGGGDEIILLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLKLKLINDDDNNNEDEDDNNDLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFAMLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFF","n":["Err","Error","FromAttributes","FromDeriveInput","FromField","FromGenericParam","FromGenerics","FromMeta","FromTypeParam","FromVariant","Ok","Result","ast","error","from_attributes","from_bool","from_char","from_derive_input","from_expr","from_field","from_generic_param","from_generics","from_list","from_meta","from_nested_meta","from_none","from_string","from_type_param","from_value","from_variant","from_word","usage","uses_lifetimes","uses_type_params","util","Const","ConstParam","Data","Enum","Fields","GenericParam","GenericParamExt","Generics","Lifetime","LifetimeParam","Lit","Meta","NestedMeta","Struct","Struct","Style","Tuple","Type","TypeParam","Unit","as_const_param","as_const_param","as_lifetime_param","as_lifetime_param","as_ref","as_ref","as_shape","as_type_param","as_type_param","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","empty_from","empty_from","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_generic_param","from_generics","from_type_param","into","into","into","into","into","into","into_iter","is_empty","is_enum","is_newtype","is_struct","is_struct","is_struct","is_tuple","is_tuple","is_unit","is_unit","iter","len","map","map_enum_variants","map_struct","map_struct_fields","new","params","parse","parse_meta_list","span","span","split","style","take_enum","take_struct","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","try_empty_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_params","uses_lifetimes","uses_lifetimes","uses_type_params","uses_type_params","where_clause","with_span","Accumulator","Err","Error","IntoIter","Ok","Result","accumulator","at","at_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","checkpoint","clone","clone_into","custom","default","description","drop","duplicate_field","duplicate_field_path","explicit_span","extend","finish","finish_with","flatten","fmt","fmt","fmt","from","from","from","from","handle","handle_in","has_span","into","into","into","into_inner","into_iter","into_iter","len","missing_field","multiple","next","push","span","to_owned","to_string","too_few_items","too_many_items","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_expr_type","unexpected_lit_type","unexpected_type","unknown_field","unknown_field_path","unknown_field_with_alts","unknown_value","unsupported_format","unsupported_shape","unsupported_shape_with_expected","with_span","write_errors","BoundImpl","CollectLifetimes","CollectTypeParams","Declare","GenericsExt","IdentRefSet","IdentSet","LifetimeRefSet","LifetimeSet","Options","Purpose","UsesLifetimes","UsesTypeParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","declared_lifetimes","declared_type_params","eq","fmt","fmt","from","from","from","include_type_path_qself","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_lifetimes","uses_lifetimes_cloned","uses_type_params","uses_type_params_cloned","AsShape","Explicit","Flag","IdentString","Ignored","Inherit","Named","Newtype","Override","PathList","Shape","ShapeSet","SpannedValue","Tuple","Unit","WithOriginal","as_ident","as_mut","as_ref","as_ref","as_ref","as_ref","as_shape","as_shape","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","default","default","deref","deref","deref_mut","description","eq","eq","eq","eq","eq","eq","eq","eq","explicit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_derive_input","from_derive_input","from_derive_input","from_field","from_field","from_field","from_generic_param","from_generic_param","from_generic_param","from_generics","from_generics","from_generics","from_iter","from_list","from_list","from_meta","from_meta","from_meta","from_meta","from_meta","from_none","from_type_param","from_type_param","from_type_param","from_value","from_variant","from_variant","from_variant","from_word","hash","hash","insert","insert_all","into","into","into","into","into","into","into","into","into","is_empty","is_explicit","is_present","is_some","map","map_ref","new","new","new","new","new","original","parse_attribute_to_meta_list","parse_expr","parsed","partial_cmp","path_to_string","present","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_strings","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or","unwrap_or_default","unwrap_or_else","uses_lifetimes","uses_type_params","parse_str_literal","preserve_str_literal"],"q":[[0,"darling"],[35,"darling::ast"],[188,"darling::error"],[265,"darling::usage"],[313,"darling::util"],[533,"darling::util::parse_expr"],[535,"syn::attr"],[536,"core::result"],[537,"syn::derive"],[538,"syn::expr"],[539,"syn::data"],[540,"syn::generics"],[541,"syn::generics"],[542,"syn::generics"],[543,"syn::data"],[544,"syn::lifetime"],[545,"fnv"],[546,"core::hash"],[547,"std::collections::hash::set"],[548,"proc_macro2"],[549,"syn::derive"],[550,"core::fmt"],[551,"core::fmt"],[552,"core::convert"],[553,"core::slice::iter"],[554,"core::ops::function"],[555,"syn::parse"],[556,"syn::error"],[557,"proc_macro2"],[558,"core::any"],[559,"darling_core::ast::generics"],[560,"core::fmt"],[561,"core::error"],[562,"core::iter::traits::collect"],[563,"core::ops::function"],[564,"syn::spanned"],[565,"core::cmp"],[566,"core::hash"]],"d":["Contains the error value","An error encountered during attribute parsing.","Create an instance by parsing a list of attributes.","Creates an instance by parsing an entire proc-macro <code>derive</code> …","Creates an instance by parsing an individual field and its …","Creates an instance by parsing a specific <code>syn::GenericParam</code>…","Creates an instance by parsing an entire generics …","Create an instance from an item in an attribute …","Creates an instance by parsing an individual type_param …","Creates an instance from a specified <code>syn::Variant</code>.","Contains the success value","An alias of <code>Result</code> specific to attribute parsing.","Utility types for working with the AST.","The <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …","Create an instance by parsing a list of attributes.","Create an instance from a bool literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from <code>syn::DeriveInput</code>, or return an …","","","","","Create an instance from a list of nested meta items.","Create an instance from a <code>syn::Meta</code> by dispatching to the …","","When a field is omitted from a parent meta-item, <code>from_none</code> …","Create an instance from a string literal in a value …","","Create an instance from a literal value of either …","Create an instance from <code>syn::Variant</code>, or return an error.","Create an instance from the presence of the word in the …","Traits and types used for tracking the usage of generic …","Generator for <code>UsesLifetimes</code> impls that unions the used …","Generator for <code>UsesTypeParam</code> impls that unions the used …","Utility types for attribute parsing.","","","A struct or enum body.","","Equivalent to <code>syn::Fields</code>, but replaces the AST element …","A mirror of <code>syn::GenericParam</code> which is generic over all …","Extension trait for <code>GenericParam</code> to support getting values …","A mirror of the <code>syn::Generics</code> type which can contain …","","","","","","","","","","","The type this GenericParam uses to represent type params …","","If this GenericParam is a const param, get the underlying …","","If this GenericParam is a lifetime, get the underlying …","","Creates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.","","","If this GenericParam is a type param, get the underlying …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the <code>Fields</code> contains no fields.","Returns <code>true</code> if this instance is <code>Data::Enum</code>.","Returns true if this variant’s data makes it a newtype.","Returns <code>true</code> if this instance is <code>Data::Struct</code>.","","","","","","","","Returns the number of fields in the structure.","","Applies a function <code>V -&gt; U</code> on enum variants, if this is an …","Applies a function to the <code>Fields</code> if this is a struct.","Applies a function <code>F -&gt; U</code> on struct fields, if this is a …","Creates a new <code>Fields</code> struct.","","","","","","Splits the <code>Fields</code> into its style and fields for further …","","Consumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.","Consumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","Attempt to convert from a <code>syn::Data</code> instance.","","","","","","","","","","","","","","","","","","","","","","","","","Adds a <code>Span</code> to <code>Fields</code>.","Accumulator for errors, for helping call <code>Error::multiple</code>.","Contains the error value","An error encountered during attribute parsing.","An iterator that moves out of an <code>Error</code>.","Contains the success value","An alias of <code>Result</code> specific to attribute parsing.","Creates an error collector, for aggregating multiple errors","Adds a location to the error, such as a field or variant. …","Adds a location to the error, such as a field or variant. …","","","","","","","","Finish the current accumulation, and if there are no …","","","Creates a new error with a custom message.","","","","Creates a new error for a field that appears twice in the …","Creates a new error for a field that appears twice in the …","Get the span for <code>self</code>, if one has been set.","","Stop accumulating errors, producing <code>Ok</code> if there are no …","Bundles the collected errors if there were any, or returns …","Recursively converts a tree of errors to a flattened list.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Handles a possible error.","Runs a closure, returning the successful value as <code>Some</code>, or …","Check if this error is associated with a span in the token …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the accumulated errors as a <code>Vec</code>.","","","Gets the number of individual errors in this error.","Creates a new error for a non-optional field that does not …","Bundle a set of multiple errors into a single <code>Error</code> …","","Add one error to the collection.","Get a span for the error.","","","Creates a new error for a list which did not get enough …","Creates a new error when a list got more items than it …","","","","","","","","","","","Creates a new error for a field which has an unexpected …","Creates a new error for a field which has an unexpected …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a value which doesn’t match a …","","Creates a new error for a struct or variant that does not …","","Tie a span to the error if none is already present. This …","Write this error and any children as compile errors into a …","The tracing is being used to generate an <code>impl</code> block.","Searcher for finding lifetimes in an iterator.","Searcher for finding type params in an iterator.","The tracing is being used to generate a new struct or enum.","Extension trait for pulling specific generics data from a …","A set of references to idents.","A set of idents.","A set of references to lifetimes.","A set of lifetimes.","Control struct for searching type parameters.","The goal of tracing generic parameter usage.","Searcher for finding lifetimes in a syntax tree. This can …","Searcher for finding type params in a syntax tree. This …","","","","","","","","","Consume an iterator, accumulating all lifetimes in the …","Consume an iterator using <code>collect_lifetimes</code>, then clone …","Consume an iterator, accumulating all type parameters in …","Consume an iterator using <code>collect_type_params</code>, then clone …","Get the set of all lifetimes declared by the syntax …","Get the set of all type parameters declared by the syntax …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns <code>true</code> if the implementer of <code>UseTypeParams</code> should …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the subset of the queried lifetimes that are used …","Find all used lifetimes, then clone them and return that …","Returns the subset of the queried type parameters that are …","Find all type params using <code>uses_type_params</code>, then clone …","Get the “shape” of a fields container, such as a …","Explicitly set the value.","A meta-item that can be present as a word - with no value …","A wrapper for an <code>Ident</code> which also keeps the value as a …","An efficient way of discarding data from a syntax element.","Inherit the eventual value from an external source.","A set of named fields, e.g. <code>{ field: String }</code>.","A special case of <code>Tuple</code> with exactly one field, e.g. …","A value which can inherit a default value or have an …","A list of <code>syn::Path</code> instances. This type is used to …","Description of how fields in a struct or variant are …","A set of <code>Shape</code> values, which correctly handles the …","A value and an associated position in source code. The …","A list of unnamed fields, e.g. <code>(String, u64)</code>.","No fields, e.g. <code>struct Example;</code>","A container to parse some syntax and retain access to the …","Get the ident as a <code>proc_macro2::Ident</code>.","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.","","","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.","","Get the “shape” of a fields container.","","Get the ident as a string.","","","","","","","","","","","","","","","","","","","Check if a field container’s shape is in this set of …","","","","","","","","","","","","","","","","","","","","Check if a fields container’s shape is in this set.","","","","","","","","","","","","","","","","","","","Converts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a shape into the set, so that the set will match …","Insert all possible shapes into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this set is empty.","Returns <code>true</code> if the override is an <code>Explicit</code> value.","Check if the flag is present.","","Apply some transform to the ident’s string …","Apply a mapping function to a reference to the spanned …","Create a new <code>IdentString</code>.","Create a new list.","Create a new <code>ShapeSet</code> which includes the specified items.","","","","Try to parse an attribute into a meta list. Path-type meta …","Functions to use with <code>#[darling(with = &quot;...&quot;)]</code> that …","","","Transform Rust paths to a readable and comparable string.","Creates a new <code>Flag</code> which corresponds to the presence of a …","Get the location of this <code>Ident</code> in source.","","Get the source code location referenced by this struct.","","","","","","","","","","","","","","Create a new <code>Vec</code> containing the string representation of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps an override, yielding the content of an <code>Explicit</code>. …","Returns the contained value or the default value of <code>T</code>.","Unwraps an override, yielding the content of an <code>Explicit</code>. …","","","Parse a <code>Meta</code> to an <code>Expr</code>; if the value is a string literal, …","Parse a <code>Meta</code> to an <code>Expr</code>; if the value is a string literal, …"],"i":[83,0,0,0,0,0,0,0,0,0,83,0,0,0,84,80,80,78,80,52,42,79,80,80,80,80,80,41,80,51,80,0,0,0,0,19,85,0,20,0,0,0,0,19,85,12,12,0,20,24,0,24,19,85,24,85,19,85,19,20,21,21,85,19,20,21,24,12,19,25,20,21,24,12,19,25,20,21,24,12,19,25,20,21,24,12,19,25,21,21,21,21,20,21,20,21,24,19,25,21,20,21,24,12,19,25,20,21,21,21,24,24,24,12,19,25,19,25,19,20,21,24,12,19,25,21,21,20,21,20,21,24,21,24,21,24,21,21,21,20,20,20,21,25,12,12,21,12,21,21,20,20,20,21,24,12,19,25,21,12,20,20,20,21,21,24,12,19,25,20,21,24,12,19,25,20,21,24,12,19,25,25,20,21,20,21,25,21,0,83,0,0,83,0,3,3,3,63,3,57,63,3,57,3,57,3,3,3,57,3,57,3,3,3,57,57,57,3,3,3,57,63,3,3,57,57,57,3,63,3,57,57,63,3,3,3,3,63,57,3,3,3,3,3,63,3,57,63,3,57,63,3,57,3,3,3,3,3,3,3,3,3,3,3,3,66,0,0,66,0,0,0,0,0,0,0,0,0,66,27,66,27,66,27,66,27,86,86,87,87,88,88,66,66,27,66,27,27,27,66,27,66,27,66,27,66,27,66,27,55,55,56,56,0,68,0,0,0,68,22,22,0,0,0,0,0,22,22,0,67,68,67,67,68,69,71,22,67,72,67,73,68,74,22,70,69,75,72,67,73,68,74,22,70,69,75,70,72,67,73,68,74,22,70,69,75,72,67,73,68,74,22,70,69,75,67,70,72,73,68,74,70,69,74,69,69,22,67,67,67,73,68,74,22,75,68,72,67,67,73,68,68,74,22,22,70,70,69,75,72,72,67,67,73,68,68,74,74,22,70,69,69,75,73,69,75,73,69,75,73,69,75,73,69,75,70,68,74,72,67,73,69,75,72,73,69,75,68,73,69,75,68,67,73,70,70,72,67,73,68,74,22,70,69,75,70,68,72,72,67,69,67,74,70,69,75,75,0,0,75,67,0,72,67,67,69,72,67,73,68,74,22,70,69,75,67,68,22,70,74,67,72,67,73,68,74,22,70,69,75,72,67,73,68,74,22,70,69,75,72,67,73,68,74,22,70,69,75,68,68,68,73,73,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[4,[-1,3]]],[]],[5,[[4,[-1,3]]],[]],[6,[[4,[-1,3]]],[]],[7,[[4,[-1,3]]],[]],[8,[[4,[-1,3]]],[]],[9,[[4,[-1,3]]],[]],[10,[[4,[-1,3]]],[]],[11,[[4,[-1,3]]],[]],[[[2,[12]]],[[4,[-1,3]]],[]],[13,[[4,[-1,3]]],[]],[12,[[4,[-1,3]]],[]],[[],[[14,[-1]]],[]],[15,[[4,[-1,3]]],[]],[16,[[4,[-1,3]]],[]],[17,[[4,[-1,3]]],[]],[18,[[4,[-1,3]]],[]],[[],[[4,[-1,3]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,14,[]],[[[19,[-1,-2,-3]]],[[14,[-3]]],[],[],[]],[-1,14,[]],[[[19,[-1,-2,-3]]],[[14,[-2]]],[],[],[]],[[[20,[-1,-2]]],[[20,[-1,-2]]],[],[]],[[[21,[-1]]],[[21,[-1]]],[]],[[[21,[-1]]],22,[]],[-1,14,[]],[[[19,[-1,-2,-3]]],[[14,[-1]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-1,-2]]],[[20,[-1,-2]]],23,23],[[[21,[-1]]],[[21,[-1]]],23],[24,24],[12,12],[[[19,[-1,-2,-3]]],[[19,[-1,-2,-3]]],23,23,23],[[[25,[-1,-2]]],[[25,[-1,-2]]],23,23],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],[]],[[-1,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],[]],[[-1,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],[]],[[-1,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],[]],[33,[[20,[-1,-2]]],[],[]],[34,[[21,[-1]]],[]],[[[20,[-1,-2]],[20,[-1,-2]]],5,35,35],[[[21,[-1]],[21,[-1]]],5,35],[[24,24],5],[[[19,[-1,-2,-3]],[19,[-1,-2,-3]]],5,35,35,35],[[[25,[-1,-2]],[25,[-1,-2]]],5,35,35],0,[[[20,[-1,-2]],36],[[4,[26,37]]],38,38],[[[21,[-1]],36],[[4,[26,37]]],38],[[24,36],[[4,[26,37]]]],[[12,36],[[4,[26,37]]]],[[[19,[-1,-2,-3]],36],[[4,[26,37]]],38,38,38],[[[25,[-1,-2]],36],[[4,[26,37]]],38,38],[-1,-1,[]],[[[26,[24,-2]]],[[21,[-1]]],[],[[40,[[39,[-1]]]]]],[-1,-1,[]],[24,[[21,[-1]]],[]],[34,24],[-1,-1,[]],[34,24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,[[4,[[19,[-1]],3]]],41],[11,[[4,[[25,[-1]],3]]],42],[16,[[4,[[19,[-1]],3]]],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],[],[]],[[[21,[-1]]],5,[]],[[[20,[-1,-2]]],5,[],[]],[[[21,[-1]]],5,[]],[[[20,[-1,-2]]],5,[],[]],[[[21,[-1]]],5,[]],[24,5],[[[21,[-1]]],5,[]],[24,5],[[[21,[-1]]],5,[]],[24,5],[[[21,[-1]]],[[43,[-1]]],[]],[[[21,[-1]]],44,[]],[[[21,[-1]],-2],[[21,[-3]]],[],45,[]],[[[20,[-1,-2]],-3],[[20,[-4,-2]]],[],[],45,[]],[[[20,[-1,-2]],-3],[[20,[-1,-4]]],[],[],45,[]],[[[20,[-1,-2]],-3],[[20,[-1,-4]]],[],[],45,[]],[[24,[39,[-1]]],[[21,[-1]]],[]],0,[46,[[4,[12,47]]]],[48,[[4,[[39,[12]],47]]]],[-1,49,[]],[-1,49,[]],[[[21,[-1]]],[[26,[24,[39,[-1]]]]],[]],0,[[[20,[-1,-2]]],[[14,[[39,[-1]]]]],[],[]],[[[20,[-1,-2]]],[[14,[[21,[-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]],48],26,50],[[12,48],26],[33,[[4,[[20,[-1,-2]],3]]],[],[]],[-1,[[4,[-2]]],[],[]],[33,[[4,[[20,[-1,-2]],3]]],51,52],[34,[[4,[[21,[-1]],3]]],52],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[[[25,[-1,-2]]],[[54,[-1]]],[],[]],[[[20,[-1,-2]],27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],55,55],[[[21,[-1]],27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],55],[[[20,[-1,-2]],27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],56,56],[[[21,[-1]],27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],56],0,[[[21,[-1]],49],[[21,[-1]]],[]],0,0,0,0,0,0,[[],57],[[3,-1],3,58],[[3,59],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[14,[60]]]],[57,[[4,[57,3]]]],[3,3],[[-1,-2],26,[],[]],[-1,3,58],[[],57],[3,15],[57,26],[15,3],[59,3],[3,[[14,[49]]]],[[57,-1],26,61],[57,[[4,[26,3]]]],[[57,-1],[[4,[-1,3]]],[]],[3,3],[[3,36],[[4,[26,37]]]],[[3,36],[[4,[26,37]]]],[[57,36],[[4,[26,37]]]],[-1,-1,[]],[-1,-1,[]],[47,3],[-1,-1,[]],[[57,[4,[-1,3]]],[[14,[-1]]],[]],[[57,-1],[[14,[-2]]],62,[]],[3,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,[[39,[3]]]],[-1,-2,[],[]],[3,63],[3,44],[15,3],[[[39,[3]]],3],[63,[[14,[3]]]],[[57,3],26],[3,49],[-1,-2,[],[]],[-1,64,[]],[44,3],[44,3],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[8,3],[17,3],[15,3],[15,3],[59,3],[[15,-1],3,61],[15,3],[15,3],[15,3],[[15,-1],3,58],[[3,-1],3,65],[3,48],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,66],[27,27],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],[]],[[-1,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],[]],[[-1,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],[]],[[-1,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],[]],[-1,[[31,[28,[30,[29]]]]],[]],[-1,[[31,[32,[30,[29]]]]],[]],[[66,66],5],[[66,36],[[4,[26,37]]]],[[27,36],[[4,[26,37]]]],[-1,-1,[]],[-1,-1,[]],[66,27],[27,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[[-1,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],[]],[[-1,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]],[]],[[-1,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],[]],[[-1,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[67,32],[[[68,[-1]]],[[68,[-1]]],[]],[67,32],[67,15],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],-1,[]],[-1,22,[]],[22,22],[67,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[70,-1],[[4,[26,3]]],71],[72,72],[67,67],[73,73],[[[68,[-1]]],[[68,[-1]]],23],[74,74],[22,22],[70,70],[[[69,[-1]]],[[69,[-1]]],23],[[[75,[-1,-2]]],[[75,[-1,-2]]],23,23],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[67,67],76],[[70,-1],5,71],[[],72],[[],73],[[],[[68,[-1]]],[]],[[],74],[[],70],[[],[[69,[-1]]],77],[74],[[[69,[-1]]],-1,[]],[[[69,[-1]]],-1,[]],[22,15],[[67,64],5],[[67,15],5],[[67,67],5],[[73,73],5],[[[68,[-1]],[68,[-1]]],5,35],[[74,74],5],[[22,22],5],[[[75,[-1,-2]],[75,[-1,-2]]],5,35,35],[[[68,[-1]]],[[14,[-1]]],[]],[[72,36],[[4,[26,37]]]],[[67,36],[[4,[26,37]]]],[[67,36],[[4,[26,37]]]],[[73,36],[[4,[26,37]]]],[[[68,[-1]],36],[[4,[26,37]]],58],[[[68,[-1]],36],[[4,[26,37]]],38],[[74,36],[[4,[26,37]]]],[[22,36],[[4,[26,37]]]],[[22,36],[[4,[26,37]]]],[[70,36],[[4,[26,37]]]],[[70,36],[[4,[26,37]]]],[[[69,[-1]],36],[[4,[26,37]]],38],[[[75,[-1,-2]],36],[[4,[26,37]]],38,38],[-1,-1,[]],[5,72],[-1,-1,[]],[32,67],[-1,-1,[]],[[[14,[-1]]],[[68,[-1]]],[]],[-1,-1,[]],[[[39,[59]]],74],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[69,[-1]]],65],[-1,-1,[]],[7,[[4,[73,3]]]],[7,[[4,[[69,[-1]],3]]],78],[7,[[4,[[75,[-1,7]],3]]],78],[9,[[4,[73,3]]]],[9,[[4,[[69,[-1]],3]]],52],[9,[[4,[[75,[-1,9]],3]]],52],[10,[[4,[73,3]]]],[10,[[4,[[69,[-1]],3]]],42],[10,[[4,[[75,[-1,10]],3]]],42],[11,[[4,[73,3]]]],[11,[[4,[[69,[-1]],3]]],79],[11,[[4,[[75,[-1,11]],3]]],79],[-1,70,61],[[[2,[12]]],[[4,[[68,[-1]],3]]],80],[[[2,[12]]],[[4,[74,3]]]],[13,[[4,[72,3]]]],[13,[[4,[67,3]]]],[13,[[4,[73,3]]]],[13,[[4,[[69,[-1]],3]]],80],[13,[[4,[[75,[-1,13]],3]]],80],[[],[[14,[72]]]],[16,[[4,[73,3]]]],[16,[[4,[[69,[-1]],3]]],41],[16,[[4,[[75,[-1,16]],3]]],41],[17,[[4,[[68,[-1]],3]]],80],[18,[[4,[73,3]]]],[18,[[4,[[69,[-1]],3]]],51],[18,[[4,[[75,[-1,18]],3]]],51],[[],[[4,[[68,[-1]],3]]],80],[[67,-1],26,81],[[73,-1],26,81],[[70,22],26],[70,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[70,5],[[[68,[-1]]],5,[]],[72,5],[72,5],[[67,-1],67,62],[[[69,[-1]],-2],[[69,[-3]]],[],62,[]],[32,67],[[[39,[-1]]],74,[[40,[59]]]],[-1,70,61],[[-1,49],[[69,[-1]]],[]],[[-1,-2],[[75,[-1,-2]]],[],[]],0,[1,[[4,[82,3]]]],0,0,[[67,67],[[14,[76]]]],[59,64],[[],72],[67,49],[-1,49,[]],[[[69,[-1]]],49,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[74,[[39,[64]]]],[[67,48],26],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[[[68,[-1]],-1],-1,[]],[[[68,[-1]]],-1,77],[[[68,[-1]],-2],-1,[],62],[[73,27,[31,[28,[30,[29]]]]],[[31,[28,[30,[29]]]]]],[[73,27,[31,[32,[30,[29]]]]],[[31,[32,[30,[29]]]]]],[13,[[4,[8,3]]]],[13,[[4,[8,3]]]]],"c":[468],"p":[[3,"Attribute",535],[15,"slice"],[3,"Error",188],[4,"Result",536],[15,"bool"],[15,"char"],[3,"DeriveInput",537],[4,"Expr",538],[3,"Field",539],[4,"GenericParam",540],[3,"Generics",540],[4,"NestedMeta",35],[4,"Meta",535],[4,"Option",541],[15,"str"],[3,"TypeParam",540],[4,"Lit",542],[3,"Variant",539],[4,"GenericParam",35],[4,"Data",35],[3,"Fields",35],[4,"Shape",313],[8,"Clone",543],[4,"Style",35],[3,"Generics",35],[15,"tuple"],[3,"Options",265],[3,"Lifetime",544],[3,"FnvHasher",545],[3,"BuildHasherDefault",546],[3,"HashSet",547],[3,"Ident",548],[4,"Data",537],[4,"Fields",539],[8,"PartialEq",549],[3,"Formatter",550],[3,"Error",550],[8,"Debug",550],[3,"Vec",551],[8,"Into",552],[8,"FromTypeParam",0],[8,"FromGenericParam",0],[3,"Iter",553],[15,"usize"],[8,"FnMut",554],[3,"ParseBuffer",555],[3,"Error",556],[3,"TokenStream",548],[3,"Span",548],[8,"ToTokens",557],[8,"FromVariant",0],[8,"FromField",0],[3,"TypeId",558],[3,"TypeParams",559],[8,"UsesLifetimes",265],[8,"UsesTypeParams",265],[3,"Accumulator",188],[8,"Display",550],[3,"Path",560],[8,"Error",561],[8,"IntoIterator",562],[8,"FnOnce",554],[3,"IntoIter",188],[3,"String",563],[8,"Spanned",564],[4,"Purpose",265],[3,"IdentString",313],[4,"Override",313],[3,"SpannedValue",313],[3,"ShapeSet",313],[8,"AsShape",313],[3,"Flag",313],[3,"Ignored",313],[3,"PathList",313],[3,"WithOriginal",313],[4,"Ordering",549],[8,"Default",565],[8,"FromDeriveInput",0],[8,"FromGenerics",0],[8,"FromMeta",0],[8,"Hasher",546],[3,"MetaList",535],[6,"Result",188],[8,"FromAttributes",0],[8,"GenericParamExt",35],[8,"CollectLifetimes",265],[8,"CollectTypeParams",265],[8,"GenericsExt",265]],"b":[[107,"impl-From%3C(Style,+U)%3E-for-Fields%3CT%3E"],[109,"impl-From%3CStyle%3E-for-Fields%3CT%3E"],[110,"impl-From%3CFields%3E-for-Style"],[112,"impl-From%3C%26Fields%3E-for-Style"],[218,"impl-Display-for-Error"],[219,"impl-Debug-for-Error"],[331,"impl-AsRef%3CIdent%3E-for-IdentString"],[332,"impl-AsRef%3Cstr%3E-for-IdentString"],[387,"impl-PartialEq%3CString%3E-for-IdentString"],[388,"impl-PartialEq%3C%26str%3E-for-IdentString"],[389,"impl-PartialEq-for-IdentString"],[397,"impl-Debug-for-IdentString"],[398,"impl-Display-for-IdentString"],[400,"impl-Display-for-Override%3CT%3E"],[401,"impl-Debug-for-Override%3CT%3E"],[403,"impl-Display-for-Shape"],[404,"impl-Debug-for-Shape"],[405,"impl-Display-for-ShapeSet"],[406,"impl-Debug-for-ShapeSet"]]},\
"darling_core":{"doc":"","t":"CIIIIIIIICAAAKLLLLKLLKKKLLLLLLLLLLKLLKLLAOOANQENDEIDNQNNENNENNQNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFFFFFFDNDDNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIINIGGGGDEIILLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLKLLKLLINDDDNNNEDEDDNNDLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFAMLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFF","n":["Error","FromAttributes","FromDeriveInput","FromField","FromGenericParam","FromGenerics","FromMeta","FromTypeParam","FromVariant","Result","ast","derive","error","from_attributes","from_bool","from_bool","from_char","from_char","from_derive_input","from_expr","from_expr","from_field","from_generic_param","from_generics","from_list","from_list","from_meta","from_meta","from_nested_meta","from_nested_meta","from_none","from_none","from_string","from_string","from_type_param","from_value","from_value","from_variant","from_word","from_word","usage","uses_lifetimes","uses_type_params","util","Const","ConstParam","Data","Enum","Fields","GenericParam","GenericParamExt","Generics","Lifetime","LifetimeParam","Lit","Meta","NestedMeta","Struct","Struct","Style","Tuple","Type","TypeParam","Unit","as_const_param","as_const_param","as_const_param","as_lifetime_param","as_lifetime_param","as_lifetime_param","as_ref","as_ref","as_shape","as_type_param","as_type_param","as_type_param","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","empty_from","empty_from","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_generic_param","from_generics","from_type_param","into","into","into","into","into","into","into_iter","is_empty","is_enum","is_newtype","is_struct","is_struct","is_struct","is_tuple","is_tuple","is_unit","is_unit","iter","len","map","map_enum_variants","map_struct","map_struct_fields","new","params","parse","parse_meta_list","span","span","split","style","take_enum","take_struct","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","try_empty_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_params","uses_lifetimes","uses_lifetimes","uses_type_params","uses_type_params","where_clause","with_span","from_attributes","from_derive_input","from_field","from_meta","from_type_param","from_variant","Accumulator","Err","Error","IntoIter","Ok","Result","accumulator","at","at_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","checkpoint","clone","clone_into","custom","default","description","drop","duplicate_field","duplicate_field_path","explicit_span","extend","finish","finish_with","flatten","fmt","fmt","fmt","from","from","from","from","from_generics","from_meta","from_none","handle","handle_in","has_span","into","into","into","into_inner","into_iter","into_iter","len","missing_field","multiple","next","push","span","to_owned","to_string","too_few_items","too_many_items","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_expr_type","unexpected_lit_type","unexpected_type","unknown_field","unknown_field_path","unknown_field_with_alts","unknown_value","unsupported_format","unsupported_shape","unsupported_shape_with_expected","with_span","write_errors","BoundImpl","CollectLifetimes","CollectTypeParams","Declare","GenericsExt","IdentRefSet","IdentSet","LifetimeRefSet","LifetimeSet","Options","Purpose","UsesLifetimes","UsesTypeParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","declared_lifetimes","declared_type_params","eq","fmt","fmt","from","from","from","include_type_path_qself","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_lifetimes","uses_lifetimes_cloned","uses_lifetimes_cloned","uses_type_params","uses_type_params_cloned","uses_type_params_cloned","AsShape","Explicit","Flag","IdentString","Ignored","Inherit","Named","Newtype","Override","PathList","Shape","ShapeSet","SpannedValue","Tuple","Unit","WithOriginal","as_ident","as_mut","as_ref","as_ref","as_ref","as_ref","as_shape","as_shape","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","default","default","deref","deref","deref_mut","description","eq","eq","eq","eq","eq","eq","eq","eq","explicit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_derive_input","from_derive_input","from_derive_input","from_field","from_field","from_field","from_generic_param","from_generic_param","from_generic_param","from_generics","from_generics","from_generics","from_iter","from_list","from_list","from_meta","from_meta","from_meta","from_meta","from_meta","from_none","from_type_param","from_type_param","from_type_param","from_value","from_variant","from_variant","from_variant","from_word","hash","hash","insert","insert_all","into","into","into","into","into","into","into","into","into","is_empty","is_explicit","is_present","is_some","map","map_ref","new","new","new","new","new","original","parse_attribute_to_meta_list","parse_expr","parsed","partial_cmp","path_to_string","present","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_strings","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or","unwrap_or_default","unwrap_or_else","uses_lifetimes","uses_type_params","parse_str_literal","preserve_str_literal"],"q":[[0,"darling_core"],[44,"darling_core::ast"],[200,"darling_core::derive"],[206,"darling_core::error"],[286,"darling_core::usage"],[336,"darling_core::util"],[556,"darling_core::util::parse_expr"],[558,"syn::attr"],[559,"syn::derive"],[560,"syn::expr"],[561,"syn::data"],[562,"syn::generics"],[563,"syn::generics"],[564,"syn::generics"],[565,"syn::data"],[566,"syn::lifetime"],[567,"fnv"],[568,"core::hash"],[569,"std::collections::hash::set"],[570,"proc_macro2"],[571,"syn::derive"],[572,"core::fmt"],[573,"core::fmt"],[574,"core::convert"],[575,"core::slice::iter"],[576,"core::ops::function"],[577,"syn::parse"],[578,"syn::error"],[579,"proc_macro2"],[580,"core::result"],[581,"core::any"],[582,"core::fmt"],[583,"core::error"],[584,"core::iter::traits::collect"],[585,"syn::error"],[586,"syn::spanned"],[587,"core::cmp"],[588,"core::hash"]],"d":["","Create an instance by parsing a list of attributes.","Creates an instance by parsing an entire proc-macro <code>derive</code> …","Creates an instance by parsing an individual field and its …","Creates an instance by parsing a specific <code>syn::GenericParam</code>…","Creates an instance by parsing an entire generics …","Create an instance from an item in an attribute …","Creates an instance by parsing an individual type_param …","Creates an instance from a specified <code>syn::Variant</code>.","","Utility types for working with the AST.","Functions to derive <code>darling</code>’s traits from well-formed …","The <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …","Create an instance by parsing a list of attributes.","Create an instance from a bool literal in a value position.","Create an instance from a bool literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from <code>syn::DeriveInput</code>, or return an …","","","","","","Create an instance from a list of nested meta items.","Create an instance from a list of nested meta items.","Create an instance from a <code>syn::Meta</code> by dispatching to the …","Create an instance from a <code>syn::Meta</code> by dispatching to the …","","","When a field is omitted from a parent meta-item, <code>from_none</code> …","When a field is omitted from a parent meta-item, <code>from_none</code> …","Create an instance from a string literal in a value …","Create an instance from a string literal in a value …","","Create an instance from a literal value of either …","Create an instance from a literal value of either …","Create an instance from <code>syn::Variant</code>, or return an error.","Create an instance from the presence of the word in the …","Create an instance from the presence of the word in the …","Traits and types used for tracking the usage of generic …","Generator for <code>UsesLifetimes</code> impls that unions the used …","Generator for <code>UsesTypeParam</code> impls that unions the used …","Utility types for attribute parsing.","","","A struct or enum body.","","Equivalent to <code>syn::Fields</code>, but replaces the AST element …","A mirror of <code>syn::GenericParam</code> which is generic over all …","Extension trait for <code>GenericParam</code> to support getting values …","A mirror of the <code>syn::Generics</code> type which can contain …","","","","","","","","","","","The type this GenericParam uses to represent type params …","","If this GenericParam is a const param, get the underlying …","If this GenericParam is a const param, get the underlying …","","If this GenericParam is a lifetime, get the underlying …","If this GenericParam is a lifetime, get the underlying …","","Creates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.","","","If this GenericParam is a type param, get the underlying …","If this GenericParam is a type param, get the underlying …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the <code>Fields</code> contains no fields.","Returns <code>true</code> if this instance is <code>Data::Enum</code>.","Returns true if this variant’s data makes it a newtype.","Returns <code>true</code> if this instance is <code>Data::Struct</code>.","","","","","","","","Returns the number of fields in the structure.","","Applies a function <code>V -&gt; U</code> on enum variants, if this is an …","Applies a function to the <code>Fields</code> if this is a struct.","Applies a function <code>F -&gt; U</code> on struct fields, if this is a …","Creates a new <code>Fields</code> struct.","","","","","","Splits the <code>Fields</code> into its style and fields for further …","","Consumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.","Consumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","Attempt to convert from a <code>syn::Data</code> instance.","","","","","","","","","","","","","","","","","","","","","","","","","Adds a <code>Span</code> to <code>Fields</code>.","Create tokens for a <code>darling::FromAttributes</code> impl from a …","Create tokens for a <code>darling::FromDeriveInput</code> impl from a …","Create tokens for a <code>darling::FromField</code> impl from a …","Create tokens for a <code>darling::FromMeta</code> impl from a …","Create tokens for a <code>darling::FromTypeParam</code> impl from a …","Create tokens for a <code>darling::FromVariant</code> impl from a …","Accumulator for errors, for helping call <code>Error::multiple</code>.","Contains the error value","An error encountered during attribute parsing.","An iterator that moves out of an <code>Error</code>.","Contains the success value","An alias of <code>Result</code> specific to attribute parsing.","Creates an error collector, for aggregating multiple errors","Adds a location to the error, such as a field or variant. …","Adds a location to the error, such as a field or variant. …","","","","","","","","Finish the current accumulation, and if there are no …","","","Creates a new error with a custom message.","","","","Creates a new error for a field that appears twice in the …","Creates a new error for a field that appears twice in the …","Get the span for <code>self</code>, if one has been set.","","Stop accumulating errors, producing <code>Ok</code> if there are no …","Bundles the collected errors if there were any, or returns …","Recursively converts a tree of errors to a flattened list.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Handles a possible error.","Runs a closure, returning the successful value as <code>Some</code>, or …","Check if this error is associated with a span in the token …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the accumulated errors as a <code>Vec</code>.","","","Gets the number of individual errors in this error.","Creates a new error for a non-optional field that does not …","Bundle a set of multiple errors into a single <code>Error</code> …","","Add one error to the collection.","Get a span for the error.","","","Creates a new error for a list which did not get enough …","Creates a new error when a list got more items than it …","","","","","","","","","","","Creates a new error for a field which has an unexpected …","Creates a new error for a field which has an unexpected …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a value which doesn’t match a …","","Creates a new error for a struct or variant that does not …","","Tie a span to the error if none is already present. This …","Write this error and any children as compile errors into a …","The tracing is being used to generate an <code>impl</code> block.","Searcher for finding lifetimes in an iterator.","Searcher for finding type params in an iterator.","The tracing is being used to generate a new struct or enum.","Extension trait for pulling specific generics data from a …","A set of references to idents.","A set of idents.","A set of references to lifetimes.","A set of lifetimes.","Control struct for searching type parameters.","The goal of tracing generic parameter usage.","Searcher for finding lifetimes in a syntax tree. This can …","Searcher for finding type params in a syntax tree. This …","","","","","","","","","Consume an iterator, accumulating all lifetimes in the …","Consume an iterator using <code>collect_lifetimes</code>, then clone …","Consume an iterator, accumulating all type parameters in …","Consume an iterator using <code>collect_type_params</code>, then clone …","Get the set of all lifetimes declared by the syntax …","Get the set of all type parameters declared by the syntax …","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns <code>true</code> if the implementer of <code>UseTypeParams</code> should …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the subset of the queried lifetimes that are used …","Find all used lifetimes, then clone them and return that …","Find all used lifetimes, then clone them and return that …","Returns the subset of the queried type parameters that are …","Find all type params using <code>uses_type_params</code>, then clone …","Find all type params using <code>uses_type_params</code>, then clone …","Get the “shape” of a fields container, such as a …","Explicitly set the value.","A meta-item that can be present as a word - with no value …","A wrapper for an <code>Ident</code> which also keeps the value as a …","An efficient way of discarding data from a syntax element.","Inherit the eventual value from an external source.","A set of named fields, e.g. <code>{ field: String }</code>.","A special case of <code>Tuple</code> with exactly one field, e.g. …","A value which can inherit a default value or have an …","A list of <code>syn::Path</code> instances. This type is used to …","Description of how fields in a struct or variant are …","A set of <code>Shape</code> values, which correctly handles the …","A value and an associated position in source code. The …","A list of unnamed fields, e.g. <code>(String, u64)</code>.","No fields, e.g. <code>struct Example;</code>","A container to parse some syntax and retain access to the …","Get the ident as a <code>proc_macro2::Ident</code>.","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.","","","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.","","Get the “shape” of a fields container.","","Get the ident as a string.","","","","","","","","","","","","","","","","","","","Check if a field container’s shape is in this set of …","","","","","","","","","","","","","","","","","","","","Check if a fields container’s shape is in this set.","","","","","","","","","","","","","","","","","","","Converts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a shape into the set, so that the set will match …","Insert all possible shapes into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this set is empty.","Returns <code>true</code> if the override is an <code>Explicit</code> value.","Check if the flag is present.","","Apply some transform to the ident’s string …","Apply a mapping function to a reference to the spanned …","Create a new <code>IdentString</code>.","Create a new list.","Create a new <code>ShapeSet</code> which includes the specified items.","","","","Try to parse an attribute into a meta list. Path-type meta …","Functions to use with <code>#[darling(with = &quot;...&quot;)]</code> that …","","","Transform Rust paths to a readable and comparable string.","Creates a new <code>Flag</code> which corresponds to the presence of a …","Get the location of this <code>Ident</code> in source.","","Get the source code location referenced by this struct.","","","","","","","","","","","","","","Create a new <code>Vec</code> containing the string representation of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps an override, yielding the content of an <code>Explicit</code>. …","Returns the contained value or the default value of <code>T</code>.","Unwraps an override, yielding the content of an <code>Explicit</code>. …","","","Parse a <code>Meta</code> to an <code>Expr</code>; if the value is a string literal, …","Parse a <code>Meta</code> to an <code>Expr</code>; if the value is a string literal, …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,88,68,68,68,68,85,68,68,52,41,67,68,68,68,68,68,68,68,68,68,68,40,68,68,51,68,68,0,0,0,0,18,89,0,19,0,0,0,0,18,89,11,11,0,19,23,0,23,18,89,23,89,89,18,89,89,18,19,20,20,89,89,18,19,20,23,11,18,24,19,20,23,11,18,24,19,20,23,11,18,24,19,20,23,11,18,24,20,20,20,20,19,20,19,20,23,18,24,20,19,20,23,11,18,24,19,20,20,20,23,23,23,11,18,24,18,24,18,19,20,23,11,18,24,20,20,19,20,19,20,23,20,23,20,23,20,20,20,19,19,19,20,24,11,11,20,11,20,20,19,19,19,20,23,11,18,24,20,11,19,19,19,20,20,23,11,18,24,19,20,23,11,18,24,19,20,23,11,18,24,24,19,20,19,20,24,20,0,0,0,0,0,0,0,3,0,0,3,0,61,61,61,70,61,60,70,61,60,61,60,61,61,61,60,61,60,61,61,61,60,60,60,61,61,61,60,70,61,61,60,3,3,3,60,60,61,70,61,60,60,70,61,61,61,61,70,60,61,61,61,61,61,70,61,60,70,61,60,70,61,60,61,61,61,61,61,61,61,61,61,61,61,61,73,0,0,73,0,0,0,0,0,0,0,0,0,73,26,73,26,73,26,73,26,90,90,91,91,92,92,73,73,26,73,26,26,26,73,26,73,26,73,26,73,26,73,26,56,56,56,59,59,59,0,75,0,0,0,75,21,21,0,0,0,0,0,21,21,0,74,75,74,74,75,76,78,21,74,79,74,80,75,81,21,77,76,82,79,74,80,75,81,21,77,76,82,77,79,74,80,75,81,21,77,76,82,79,74,80,75,81,21,77,76,82,74,77,79,80,75,81,77,76,81,76,76,21,74,74,74,80,75,81,21,82,75,79,74,74,80,75,75,81,21,21,77,77,76,82,79,79,74,74,80,75,75,81,81,21,77,76,76,82,80,76,82,80,76,82,80,76,82,80,76,82,77,75,81,79,74,80,76,82,79,80,76,82,75,80,76,82,75,74,80,77,77,79,74,80,75,81,21,77,76,82,77,75,79,79,74,76,74,81,77,76,82,82,0,0,82,74,0,79,74,74,76,79,74,80,75,81,21,77,76,82,74,75,21,77,81,74,79,74,80,75,81,21,77,76,82,79,74,80,75,81,21,77,76,82,79,74,80,75,81,21,77,76,82,75,75,75,80,80,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[3,[-1]]],[]],[4,[[3,[-1]]],[]],[4,[[3,[-1]]],[]],[5,[[3,[-1]]],[]],[5,[[3,[-1]]],[]],[6,[[3,[-1]]],[]],[7,[[3,[-1]]],[]],[7,[[3,[-1]]],[]],[8,[[3,[-1]]],[]],[9,[[3,[-1]]],[]],[10,[[3,[-1]]],[]],[[[2,[11]]],[[3,[-1]]],[]],[[[2,[11]]],[[3,[-1]]],[]],[12,[[3,[-1]]],[]],[12,[[3,[-1]]],[]],[11,[[3,[-1]]],[]],[11,[[3,[-1]]],[]],[[],[[13,[-1]]],[]],[[],[[13,[-1]]],[]],[14,[[3,[-1]]],[]],[14,[[3,[-1]]],[]],[15,[[3,[-1]]],[]],[16,[[3,[-1]]],[]],[16,[[3,[-1]]],[]],[17,[[3,[-1]]],[]],[[],[[3,[-1]]],[]],[[],[[3,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,13,[]],[-1,13,[]],[[[18,[-1,-2,-3]]],[[13,[-3]]],[],[],[]],[-1,13,[]],[-1,13,[]],[[[18,[-1,-2,-3]]],[[13,[-2]]],[],[],[]],[[[19,[-1,-2]]],[[19,[-1,-2]]],[],[]],[[[20,[-1]]],[[20,[-1]]],[]],[[[20,[-1]]],21,[]],[-1,13,[]],[-1,13,[]],[[[18,[-1,-2,-3]]],[[13,[-1]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[-1,-2]]],[[19,[-1,-2]]],22,22],[[[20,[-1]]],[[20,[-1]]],22],[23,23],[11,11],[[[18,[-1,-2,-3]]],[[18,[-1,-2,-3]]],22,22,22],[[[24,[-1,-2]]],[[24,[-1,-2]]],22,22],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,26,[30,[27,[29,[28]]]]],[[30,[27,[29,[28]]]]],[]],[[-1,26,[30,[27,[29,[28]]]]],[[30,[27,[29,[28]]]]],[]],[[-1,26,[30,[31,[29,[28]]]]],[[30,[31,[29,[28]]]]],[]],[[-1,26,[30,[31,[29,[28]]]]],[[30,[31,[29,[28]]]]],[]],[32,[[19,[-1,-2]]],[],[]],[33,[[20,[-1]]],[]],[[[19,[-1,-2]],[19,[-1,-2]]],4,34,34],[[[20,[-1]],[20,[-1]]],4,34],[[23,23],4],[[[18,[-1,-2,-3]],[18,[-1,-2,-3]]],4,34,34,34],[[[24,[-1,-2]],[24,[-1,-2]]],4,34,34],0,[[[19,[-1,-2]],35],36,37,37],[[[20,[-1]],35],36,37],[[23,35],36],[[11,35],36],[[[18,[-1,-2,-3]],35],36,37,37,37],[[[24,[-1,-2]],35],36,37,37],[-1,-1,[]],[[[25,[23,-2]]],[[20,[-1]]],[],[[39,[[38,[-1]]]]]],[23,[[20,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[33,23],[33,23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[3,[[18,[-1]]]]],40],[10,[[3,[[24,[-1]]]]],41],[15,[[3,[[18,[-1]]]]],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-1]]],[],[]],[[[20,[-1]]],4,[]],[[[19,[-1,-2]]],4,[],[]],[[[20,[-1]]],4,[]],[[[19,[-1,-2]]],4,[],[]],[[[20,[-1]]],4,[]],[23,4],[[[20,[-1]]],4,[]],[23,4],[[[20,[-1]]],4,[]],[23,4],[[[20,[-1]]],[[42,[-1]]],[]],[[[20,[-1]]],43,[]],[[[20,[-1]],-2],[[20,[-3]]],[],44,[]],[[[19,[-1,-2]],-3],[[19,[-4,-2]]],[],[],44,[]],[[[19,[-1,-2]],-3],[[19,[-1,-4]]],[],[],44,[]],[[[19,[-1,-2]],-3],[[19,[-1,-4]]],[],[],44,[]],[[23,[38,[-1]]],[[20,[-1]]],[]],0,[45,[[46,[11]]]],[47,[[46,[[38,[11]]]]]],[-1,48,[]],[-1,48,[]],[[[20,[-1]]],[[25,[23,[38,[-1]]]]],[]],0,[[[19,[-1,-2]]],[[13,[[38,[-1]]]]],[],[]],[[[19,[-1,-2]]],[[13,[[20,[-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-1]],47],25,49],[[11,47],25],[32,[[3,[[19,[-1,-2]]]]],[],[]],[-1,[[50,[-2]]],[],[]],[32,[[3,[[19,[-1,-2]]]]],51,52],[33,[[3,[[20,[-1]]]]],52],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[[[24,[-1,-2]]],[[0,[-1]]],[],[]],[[[19,[-1,-2]],26,54],55,56,56],[[[20,[-1]],26,54],55,56],[[[19,[-1,-2]],26,57],58,59,59],[[[20,[-1]],26,57],58,59],0,[[[20,[-1]],48],[[20,[-1]]],[]],[6,47],[6,47],[6,47],[6,47],[6,47],[6,47],0,0,0,0,0,0,[[],60],[[61,-1],61,62],[[61,63],61],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,[[13,[64]]]],[60,[[3,[60]]]],[61,61],[[-1,-2],25,[],[]],[-1,61,62],[[],60],[61,14],[60,25],[14,61],[63,61],[61,[[13,[48]]]],[[60,-1],25,65],[60,[[3,[25]]]],[[60,-1],[[3,[-1]]],[]],[61,61],[[61,35],36],[[61,35],36],[[60,35],36],[-1,-1,[]],[66,61],[-1,-1,[]],[-1,-1,[]],[10,[[3,[[3,[-1]]]]],67],[12,[[3,[[3,[-1]]]]],68],[[],[[13,[[3,[-1]]]]],68],[[60,[3,[-1]]],[[13,[-1]]],[]],[[60,-1],[[13,[-2]]],69,[]],[61,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[60,[[38,[61]]]],[-1,-2,[],[]],[61,70],[61,43],[14,61],[[[38,[61]]],61],[70,[[13,[61]]]],[[60,61],25],[61,48],[-1,-2,[],[]],[-1,71,[]],[43,61],[43,61],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[7,61],[16,61],[14,61],[14,61],[63,61],[[14,-1],61,65],[14,61],[14,61],[14,61],[[14,-1],61,62],[[61,-1],61,72],[61,47],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[73,73],[26,26],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,26,54],55,[]],[[-1,26,54],54,[]],[[-1,26,57],58,[]],[[-1,26,57],57,[]],[-1,54,[]],[-1,57,[]],[[73,73],4],[[73,35],36],[[26,35],36],[-1,-1,[]],[73,26],[-1,-1,[]],[26,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[[-1,26,54],55,[]],[[-1,26,54],54,[]],[[-1,26,54],54,[]],[[-1,26,57],58,[]],[[-1,26,57],57,[]],[[-1,26,57],57,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[74,31],[[[75,[-1]]],[[75,[-1]]],[]],[74,14],[74,31],[[[75,[-1]]],[[75,[-1]]],[]],[[[76,[-1]]],-1,[]],[-1,21,[]],[21,21],[74,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[77,-1],[[3,[25]]],78],[79,79],[74,74],[80,80],[[[75,[-1]]],[[75,[-1]]],22],[81,81],[21,21],[77,77],[[[76,[-1]]],[[76,[-1]]],22],[[[82,[-1,-2]]],[[82,[-1,-2]]],22,22],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[74,74],83],[[77,-1],4,78],[[],79],[[],80],[[],[[75,[-1]]],[]],[[],81],[[],77],[[],[[76,[-1]]],84],[81],[[[76,[-1]]],-1,[]],[[[76,[-1]]],-1,[]],[21,14],[[74,14],4],[[74,74],4],[[74,71],4],[[80,80],4],[[[75,[-1]],[75,[-1]]],4,34],[[81,81],4],[[21,21],4],[[[82,[-1,-2]],[82,[-1,-2]]],4,34,34],[[[75,[-1]]],[[13,[-1]]],[]],[[79,35],36],[[74,35],36],[[74,35],36],[[80,35],36],[[[75,[-1]],35],36,62],[[[75,[-1]],35],36,37],[[81,35],36],[[21,35],36],[[21,35],36],[[77,35],36],[[77,35],36],[[[76,[-1]],35],36,37],[[[82,[-1,-2]],35],36,37,37],[-1,-1,[]],[4,79],[31,74],[-1,-1,[]],[-1,-1,[]],[[[13,[-1]]],[[75,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[[[38,[63]]],81],[-1,-1,[]],[-1,-1,[]],[-1,[[76,[-1]]],72],[-1,-1,[]],[-1,-1,[]],[6,[[3,[80]]]],[6,[[3,[[76,[-1]]]]],85],[6,[[3,[[82,[-1,6]]]]],85],[8,[[3,[80]]]],[8,[[3,[[76,[-1]]]]],52],[8,[[3,[[82,[-1,8]]]]],52],[9,[[3,[80]]]],[9,[[3,[[76,[-1]]]]],41],[9,[[3,[[82,[-1,9]]]]],41],[10,[[3,[80]]]],[10,[[3,[[76,[-1]]]]],67],[10,[[3,[[82,[-1,10]]]]],67],[-1,77,65],[[[2,[11]]],[[3,[[75,[-1]]]]],68],[[[2,[11]]],[[3,[81]]]],[12,[[3,[79]]]],[12,[[3,[74]]]],[12,[[3,[80]]]],[12,[[3,[[76,[-1]]]]],68],[12,[[3,[[82,[-1,12]]]]],68],[[],[[13,[79]]]],[15,[[3,[80]]]],[15,[[3,[[76,[-1]]]]],40],[15,[[3,[[82,[-1,15]]]]],40],[16,[[3,[[75,[-1]]]]],68],[17,[[3,[80]]]],[17,[[3,[[76,[-1]]]]],51],[17,[[3,[[82,[-1,17]]]]],51],[[],[[3,[[75,[-1]]]]],68],[[74,-1],25,86],[[80,-1],25,86],[[77,21],25],[77,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,4],[[[75,[-1]]],4,[]],[79,4],[79,4],[[74,-1],74,69],[[[76,[-1]],-2],[[76,[-3]]],[],69,[]],[31,74],[[[38,[-1]]],81,[[39,[63]]]],[-1,77,65],[[-1,48],[[76,[-1]]],[]],[[-1,-2],[[82,[-1,-2]]],[],[]],0,[1,[[3,[87]]]],0,0,[[74,74],[[13,[83]]]],[63,71],[[],79],[74,48],[-1,48,[]],[[[76,[-1]]],48,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,71,[]],[-1,71,[]],[-1,71,[]],[-1,71,[]],[81,[[38,[71]]]],[[74,47],25],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,[[50,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[[[75,[-1]],-1],-1,[]],[[[75,[-1]]],-1,84],[[[75,[-1]],-2],-1,[],69],[[80,26,54],55],[[80,26,57],58],[12,[[3,[7]]]],[12,[[3,[7]]]]],"c":[491],"p":[[3,"Attribute",558],[15,"slice"],[6,"Result",206],[15,"bool"],[15,"char"],[3,"DeriveInput",559],[4,"Expr",560],[3,"Field",561],[4,"GenericParam",562],[3,"Generics",562],[4,"NestedMeta",44],[4,"Meta",558],[4,"Option",563],[15,"str"],[3,"TypeParam",562],[4,"Lit",564],[3,"Variant",561],[4,"GenericParam",44],[4,"Data",44],[3,"Fields",44],[4,"Shape",336],[8,"Clone",565],[4,"Style",44],[3,"Generics",44],[15,"tuple"],[3,"Options",286],[3,"Lifetime",566],[3,"FnvHasher",567],[3,"BuildHasherDefault",568],[3,"HashSet",569],[3,"Ident",570],[4,"Data",559],[4,"Fields",561],[8,"PartialEq",571],[3,"Formatter",572],[6,"Result",572],[8,"Debug",572],[3,"Vec",573],[8,"Into",574],[8,"FromTypeParam",0],[8,"FromGenericParam",0],[3,"Iter",575],[15,"usize"],[8,"FnMut",576],[6,"ParseStream",577],[6,"Result",578],[3,"TokenStream",570],[3,"Span",570],[8,"ToTokens",579],[4,"Result",580],[8,"FromVariant",0],[8,"FromField",0],[3,"TypeId",581],[6,"LifetimeSet",286],[6,"LifetimeRefSet",286],[8,"UsesLifetimes",286],[6,"IdentSet",286],[6,"IdentRefSet",286],[8,"UsesTypeParams",286],[3,"Accumulator",206],[3,"Error",206],[8,"Display",572],[3,"Path",582],[8,"Error",583],[8,"IntoIterator",584],[3,"Error",578],[8,"FromGenerics",0],[8,"FromMeta",0],[8,"FnOnce",576],[3,"IntoIter",206],[3,"String",585],[8,"Spanned",586],[4,"Purpose",286],[3,"IdentString",336],[4,"Override",336],[3,"SpannedValue",336],[3,"ShapeSet",336],[8,"AsShape",336],[3,"Flag",336],[3,"Ignored",336],[3,"PathList",336],[3,"WithOriginal",336],[4,"Ordering",571],[8,"Default",587],[8,"FromDeriveInput",0],[8,"Hasher",568],[3,"MetaList",558],[8,"FromAttributes",0],[8,"GenericParamExt",44],[8,"CollectLifetimes",286],[8,"CollectTypeParams",286],[8,"GenericsExt",286]],"b":[[119,"impl-From%3C(Style,+U)%3E-for-Fields%3CT%3E"],[120,"impl-From%3CStyle%3E-for-Fields%3CT%3E"],[123,"impl-From%3CFields%3E-for-Style"],[124,"impl-From%3C%26Fields%3E-for-Style"],[236,"impl-Display-for-Error"],[237,"impl-Debug-for-Error"],[354,"impl-AsRef%3Cstr%3E-for-IdentString"],[355,"impl-AsRef%3CIdent%3E-for-IdentString"],[410,"impl-PartialEq%3C%26str%3E-for-IdentString"],[411,"impl-PartialEq-for-IdentString"],[412,"impl-PartialEq%3CString%3E-for-IdentString"],[420,"impl-Debug-for-IdentString"],[421,"impl-Display-for-IdentString"],[423,"impl-Display-for-Override%3CT%3E"],[424,"impl-Debug-for-Override%3CT%3E"],[426,"impl-Debug-for-Shape"],[427,"impl-Display-for-Shape"],[428,"impl-Debug-for-ShapeSet"],[429,"impl-Display-for-ShapeSet"]]},\
"darling_macro":{"doc":"","t":"YYYYYYY","n":["FromAttributes","FromDeriveInput","FromField","FromMeta","FromMetaItem","FromTypeParam","FromVariant"],"q":[[0,"darling_macro"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[],"b":[]},\
"embassy_executor":{"doc":"embassy-executor","t":"NDDEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLXLLLLLALLLXLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLFF","n":["Busy","Executor","SendSpawner","SpawnError","SpawnToken","Spawner","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","fmt","for_current_executor","for_current_executor","from","from","from","from","from","into","into","into","into","into","main","make_send","must_spawn","must_spawn","new","new_failed","raw","run","spawn","spawn","task","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AvailableTask","Executor","TaskPool","TaskRef","TaskStorage","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","claim","clone","clone_into","from","from","from","from","from","initialize","into","into","into","into","into","new","new","new","poll","spawn","spawn","spawner","task_from_waker","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wake_task","wake_task_no_pend"],"q":[[0,"embassy_executor"],[65,"embassy_executor::raw"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::ops::function"],[123,"core::result"],[124,"core::any"],[125,"core::option"],[126,"core::future::future"],[127,"core::marker"]],"d":["此任务正在运行的实例太多。","std 环境下的单线程执行器","在任意线程中，生成任务到执行器中的句柄","创建任务时返回的错误","在执行器中创建新任务的令牌","生成任务到执行器中的句柄","","","","","","","","","","","","","","","","","","","从当前执行器中获取生成器","从当前执行器中获取生成器","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>executor</code> instance and declares an …","将当前 Spawner 转换为 …","…","…","Create a new Executor.","返回一个 SpawnToken， 代表创建任务失败","原始执行器","启动执行器","创建一个任务到执行器中","创建一个任务到执行器中","Declares an async task that can be run by <code>embassy-executor</code>…","","","","","","","","","","","","","","","","","","","一个未初始化的 <code>TaskStorage</code>.","原始执行器","原始存储器，可以保存多个相同类型的任务","这本质上是一个 <code>&amp;&#39;static TaskStorage&lt;F&gt;</code>，其中 …","可以生成任务的原始存储器 Raw storage in which …","","","","","","","","","","","尝试申请一个 <code>TaskStorage</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","初始化 <code>TaskStorage</code> 来运行给定的 future。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","…","创建一个 TaskPool， …","创建一个新的执行器","拉取当前执行器队列中的所有任务","尝试创建任务","尝试在池中创建任务","获取一个在当前执行器中生成任务的生成器","从唤醒器（waker）中获取任务指针。 Get a task …","","","","","","","","","","","","","","","","","通过 <code>TaskRef</code> 唤醒任务","通过 <code>TaskRef</code> 唤醒一个任务，但不调用 pend"],"i":[1,0,0,0,0,0,9,5,1,2,3,9,5,1,2,3,1,2,3,1,2,3,5,1,2,3,9,5,1,2,3,9,5,1,2,3,0,2,2,3,9,5,0,9,2,3,0,1,2,3,9,5,1,2,3,9,5,1,2,3,9,5,1,2,3,0,0,0,0,0,14,15,19,20,18,14,15,19,20,18,15,18,18,14,15,19,20,18,15,14,15,19,20,18,14,19,20,20,14,19,20,0,18,14,15,19,20,18,14,15,19,20,18,14,15,19,20,18,0,0],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[5,[-1]]],4,[]],[[1,6],7],[[],2],[[],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,3],[[2,[5,[-1]]],4,[]],[[3,[5,[-1]]],4,8],[[],9],[[],[[5,[-1]]],[]],0,[[9,-1],10,11],[[2,[5,[-1]]],[[12,[4,1]]],[]],[[3,[5,[-1]]],[[12,[4,1]]],8],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[16,[[15,[-1]]]]],17],[18,18],[[-1,-2],4,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[15,[-1]],-2],[[5,[-1]]],17,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[14,[-1]]],17],[[],[[19,[-1]]],17],[4,20],[20,4],[[[14,[-1]],-2],[[5,[[0,[21]]]]],17,11],[[[19,[-1]],-2],[[5,[[0,[21]]]]],17,11],[20,2],[22,18],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[18,4],[18,4]],"c":[],"p":[[4,"SpawnError",0],[3,"Spawner",0],[3,"SendSpawner",0],[15,"tuple"],[3,"SpawnToken",0],[3,"Formatter",120],[6,"Result",120],[8,"Send",121],[3,"Executor",0],[15,"never"],[8,"FnOnce",122],[4,"Result",123],[3,"TypeId",124],[3,"TaskStorage",65],[3,"AvailableTask",65],[4,"Option",125],[8,"Future",126],[3,"TaskRef",65],[3,"TaskPool",65],[3,"Executor",65],[8,"Sized",121],[3,"Waker",127]],"b":[]},\
"embassy_futures":{"doc":"embassy-futures","t":"FAFAFDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLLLEEENNNNNNNDDDDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLLLLLLL","n":["block_on","join","poll_once","select","yield_now","Join","Join3","Join4","Join5","JoinArray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","join","join3","join4","join5","join_array","poll","poll","poll","poll","poll","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Either","Either3","Either4","First","First","First","Fourth","Second","Second","Second","Select","Select3","Select4","SelectArray","SelectSlice","Third","Third","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","poll","poll","poll","poll","poll","select","select3","select4","select_array","select_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"embassy_futures"],[5,"embassy_futures::join"],[65,"embassy_futures::select"],[164,"core::future::future"],[165,"core::task::poll"],[166,"core::fmt"],[167,"core::fmt"],[168,"core::task::wake"],[169,"core::result"],[170,"core::any"],[171,"core::clone"]],"d":["以忙循环（busy …","等待多个future完成。  Wait for multiple futures to …","尝试对一个future进行一次轮询  Poll a future …","等待多个future中第一个完成的future  Wait for …","…","用于 <code>join</code> 函数的Future。  Future for the <code>join</code> …","用于 <code>join3</code> 函数的Future。  Future for the <code>join3</code> …","用于 <code>join4</code> 函数的Future。  Future for the <code>join4</code> …","用于 <code>join5</code> 函数的Future。  Future for the <code>join5</code> …","用于 <code>join_array</code> 函数的Future。  Future for the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","合并两个future的结果，等待他们都完成","合并三个future的结果，等待他们都完成","合并四个future的结果，等待他们都完成","合并五个future的结果，等待他们都完成","…","","","","","","","","","","","","","","","","","","","","","<code>select</code>的输出结果  Result for <code>select</code>.","<code>select3</code>的输出结果。  Result for <code>select3</code>. ","<code>select4</code>的输出结果。  Result for <code>select4</code>.","第一个future先完成  First future finished first.","第一个future先完成  First future finished first.","第一个future先完成  First future finished first.","第四个future先完成  Fourth future finished first.","第二个future先完成  Second future finished first.","第二个future先完成  Second future finished first.","第二个future先完成  Second future finished first.","用于 <code>select</code> 函数的Future。  Future for the <code>select</code> …","用于 <code>select3</code> 函数的Future。  Future for the <code>select3</code> …","用于 <code>select4</code> 函数的Future。  Future for the <code>select4</code> …","用于 <code>select_array</code> 函数的Future。  Future for the …","用于 <code>select_slice</code> 函数的Futrue。  Future for the …","第三个future先完成  Third future finished first.","第三个future先完成  Third future finished first.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","等待两个future中的其中一个完成","跟<code>select</code>一样, 只不过支持更多个future。 Same as …","跟<code>select</code>一样, 只不过支持更多个future。  Same …","创建一个新的 future，它将在 …","创建一个新的 future，它将在 …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,0,0,0,0,0,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,3,7,8,9,10,0,0,0,16,18,19,19,16,18,19,0,0,0,0,0,18,19,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,16,18,19,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,20,21,22,23,24,20,21,22,23,24,0,0,0,0,0,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24,16,20,18,21,19,22,23,24],"f":[[-1,[],1],0,[-1,2,1],0,[[],[[0,[1]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]],4],5,[1,6]],[[[7,[-1,-2]],4],5,[1,6],[1,6]],[[[8,[-1,-2,-3]],4],5,[1,6],[1,6],[1,6]],[[[9,[-1,-2,-3,-4]],4],5,[1,6],[1,6],[1,6],[1,6]],[[[10,[-1,-2,-3,-4,-5]],4],5,[1,6],[1,6],[1,6],[1,6],[1,6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[-1,-2],[[7,[-1,-2]]],1,1],[[-1,-2,-3],[[8,[-1,-2,-3]]],1,1,1],[[-1,-2,-3,-4],[[9,[-1,-2,-3,-4]]],1,1,1,1],[[-1,-2,-3,-4,-5],[[10,[-1,-2,-3,-4,-5]]],1,1,1,1,1],[[[11,[-1]]],[[3,[-1]]],1],[[[12,[[3,[-1]]]],13],2,1],[[[12,[[7,[-1,-2]]]],13],2,1,1],[[[12,[[8,[-1,-2,-3]]]],13],2,1,1,1],[[[12,[[9,[-1,-2,-3,-4]]]],13],2,1,1,1,1],[[[12,[[10,[-1,-2,-3,-4,-5]]]],13],2,1,1,1,1,1],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1,-2]]],[[16,[-1,-2]]],17,17],[[[18,[-1,-2,-3]]],[[18,[-1,-2,-3]]],17,17,17],[[[19,[-1,-2,-3,-4]]],[[19,[-1,-2,-3,-4]]],17,17,17,17],[[[16,[-1,-2]],4],5,6,6],[[[20,[-1,-2]],4],5,6,6],[[[18,[-1,-2,-3]],4],5,6,6,6],[[[21,[-1,-2,-3]],4],5,6,6,6],[[[19,[-1,-2,-3,-4]],4],5,6,6,6,6],[[[22,[-1,-2,-3,-4]],4],5,6,6,6,6],[[[23,[-1]],4],5,6],[[[24,[-1]],4],5,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[12,[[20,[-1,-2]]]],13],2,1,1],[[[12,[[21,[-1,-2,-3]]]],13],2,1,1,1],[[[12,[[22,[-1,-2,-3,-4]]]],13],2,1,1,1,1],[[[12,[[23,[-1]]]],13],2,1],[[[12,[[24,[-1]]]],13],2,1],[[-1,-2],[[20,[-1,-2]]],1,1],[[-1,-2,-3],[[21,[-1,-2,-3]]],1,1,1],[[-1,-2,-3,-4],[[22,[-1,-2,-3,-4]]],1,1,1,1],[[[11,[-1]]],[[23,[-1]]],1],[[[25,[-1]]],[[24,[-1]]],1],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[8,"Future",164],[4,"Poll",165],[3,"JoinArray",5],[3,"Formatter",166],[6,"Result",166],[8,"Debug",166],[3,"Join",5],[3,"Join3",5],[3,"Join4",5],[3,"Join5",5],[15,"array"],[3,"Pin",167],[3,"Context",168],[4,"Result",169],[3,"TypeId",170],[4,"Either",65],[8,"Clone",171],[4,"Either3",65],[4,"Either4",65],[3,"Select",65],[3,"Select3",65],[3,"Select4",65],[3,"SelectArray",65],[3,"SelectSlice",65],[15,"slice"]],"b":[]},\
"embassy_macros":{"doc":"embassy-macros","t":"XXXXX","n":["main_cortex_m","main_riscv","main_std","main_wasm","task"],"q":[[0,"embassy_macros"]],"d":["Creates a new <code>executor</code> instance and declares an …","Creates a new <code>executor</code> instance and declares an …","Creates a new <code>executor</code> instance and declares an …","Creates a new <code>executor</code> instance and declares an …","Declares an async task that can be run by <code>embassy-executor</code>…"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"embassy_sync":{"doc":"embassy-sync","t":"AAAAAAAAAGDGDLLLLLLLLLLLLLLLLLLLALLLLLLDSDIDLLLLLLLLLLLLLKLLLLLLLLLLLLLLLDDDDDNNDDDDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDNDDDEEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIEEDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCECNNNNIDCCEKLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLALKLALLLLLLLLLLLLKLKLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["blocking_mutex","channel","mutex","pipe","priority_channel","pubsub","signal","waitqueue","zerocopy_channel","CriticalSectionMutex","Mutex","NoopMutex","ThreadModeMutex","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","const_new","drop","from","from","get_mut","into","into","into_inner","lock","lock","new","new","raw","try_from","try_from","try_into","try_into","type_id","type_id","CriticalSectionRawMutex","INIT","NoopRawMutex","RawMutex","ThreadModeRawMutex","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","from","from","from","into","into","into","lock","lock","lock","lock","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Channel","DynamicReceiveFuture","DynamicReceiver","DynamicSendFuture","DynamicSender","Empty","Full","ReceiveFuture","Receiver","SendFuture","Sender","TryReceiveError","TrySendError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","new","poll","poll","poll","poll","poll_ready_to_receive","poll_ready_to_receive","poll_ready_to_receive","poll_ready_to_send","poll_ready_to_send","poll_ready_to_send","poll_receive","poll_receive","poll_receive","receive","receive","receive","receiver","send","send","send","sender","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","try_poll","try_receive","try_receive","try_receive","try_send","try_send","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Mutex","MutexGuard","TryLockError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from","from","get_mut","into","into","into","into_inner","lock","new","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_lock","type_id","type_id","type_id","Empty","FillBufFuture","Full","Pipe","ReadFuture","Reader","TryReadError","TryWriteError","WriteFuture","Writer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","consume","consume","eq","eq","fill_buf","fill_buf","flush","flush","flush","fmt","fmt","free_capacity","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_future","into_future","into_future","is_empty","is_full","len","new","poll","poll","poll","read","read","read","read","read","split","to_owned","to_owned","to_owned","try_fill_buf","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_write","try_write","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write_all","Kind","Max","Min","PriorityChannel","ReceiveFuture","Receiver","SendFuture","Sender","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_future","into_future","new","poll","poll","poll_ready_to_receive","poll_ready_to_receive","poll_ready_to_send","poll_ready_to_send","poll_receive","poll_receive","receive","receive","receiver","send","send","sender","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","try_receive","try_receive","try_send","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynImmediatePublisher","DynPublisher","DynSubscriber","Error","ImmediatePublisher","Lagged","MaximumPublishersReached","MaximumSubscribersReached","Message","PubSubBehavior","PubSubChannel","Publisher","Subscriber","WaitResult","available","available","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dyn_immediate_publisher","dyn_publisher","dyn_subscriber","eq","eq","fmt","fmt","from","from","from","get_message_with_context","get_message_with_context","immediate_publisher","into","into","into","new","publish_immediate","publish_immediate","publish_with_context","publish_with_context","publisher","publisher","space","space","subscriber","subscriber","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unregister_publisher","unregister_publisher","unregister_subscriber","unregister_subscriber","DynImmediatePublisher","DynPublisher","ImmediatePub","ImmediatePublisher","Pub","Publisher","PublisherWaitFuture","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_future","poll","publish","publish_immediate","publish_immediate","space","space","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_publish","try_publish","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynSubscriber","Sub","Subscriber","SubscriberWaitFuture","available","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","from","from","from","from","into","into","into","into","into_future","next_message","next_message_pure","poll","poll_next","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_next_message","try_next_message_pure","try_poll_next","type_id","type_id","type_id","type_id","Signal","borrow","borrow_mut","default","from","into","new","reset","signal","signaled","try_from","try_into","type_id","wait","AtomicWaker","MultiWakerRegistration","WakerRegistration","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","fmt","from","from","from","into","into","into","new","new","new","occupied","register","register","register","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wake","wake","wake","Channel","Receiver","Sender","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","new","poll_receive","poll_send","receive","receive_done","send","send_done","split","try_from","try_from","try_from","try_into","try_into","try_into","try_receive","try_send","type_id","type_id","type_id"],"q":[[0,"embassy_sync"],[9,"embassy_sync::blocking_mutex"],[39,"embassy_sync::blocking_mutex::raw"],[73,"embassy_sync::channel"],[223,"embassy_sync::mutex"],[260,"embassy_sync::pipe"],[376,"embassy_sync::priority_channel"],[461,"embassy_sync::pubsub"],[529,"embassy_sync::pubsub::publisher"],[603,"embassy_sync::pubsub::subscriber"],[649,"embassy_sync::signal"],[663,"embassy_sync::waitqueue"],[699,"embassy_sync::zerocopy_channel"],[735,"critical_section"],[736,"core::marker"],[737,"core::ops::function"],[738,"core::result"],[739,"core::any"],[740,"core::clone"],[741,"core::cmp"],[742,"core::fmt"],[743,"core::fmt"],[744,"core::task::wake"],[745,"core::task::poll"],[746,"core::option"],[747,"core::marker"],[748,"core::task::wake"]],"d":["Blocking mutex.","A queue for sending values between asynchronous tasks.","Async mutex.","Async byte stream pipe.","A queue for sending values between asynchronous tasks.","Implementation of PubSubChannel, a queue where published …","A synchronization primitive for passing the latest value …","Async low-level wait queues","A zero-copy queue for sending values between asynchronous …","A mutex that allows borrowing data across executors and …","Blocking mutex (not async)","A mutex that allows borrowing data in the context of a …","A “mutex” that only allows borrowing from thread mode.","Borrows the data","","Borrows the data for the duration of the critical section","","Borrows the data","","","Creates a new mutex based on a pre-existing raw mutex.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Creates a critical section and grants temporary access to …","Lock the <code>ThreadModeMutex</code>, granting access to the data.","Creates a new mutex in an unlocked state ready for use.","Creates a new mutex","Mutex primitives.","","","","","","","A mutex that allows borrowing data across executors and …","Create a new <code>RawMutex</code> instance.","A mutex that allows borrowing data in the context of a …","Raw mutex trait.","A “mutex” that only allows borrowing from thread mode.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lock this <code>RawMutex</code>.","","","","Create a new <code>CriticalSectionRawMutex</code>.","Create a new <code>NoopRawMutex</code>.","Create a new <code>ThreadModeRawMutex</code>.","","","","","","","","","","A bounded channel for communicating between asynchronous …","Future returned by <code>DynamicReceiver::receive</code>.","Receive-only access to a <code>Channel</code> without knowing channel …","Future returned by <code>DynamicSender::send</code>.","Send-only access to a <code>Channel</code> without knowing channel size.","A message could not be received because the channel is …","The data could not be sent on the channel because the …","Future returned by <code>Channel::receive</code> and  <code>Receiver::receive</code>.","Receive-only access to a <code>Channel</code>.","Future returned by <code>Channel::send</code> and  <code>Sender::send</code>.","Send-only access to a <code>Channel</code>.","Error returned by <code>try_receive</code>.","Error returned by <code>try_send</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Establish a new bounded channel. For example, to create …","","","","","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to send","Allows a poll_fn to poll until the channel is ready to send","Allows a poll_fn to poll until the channel is ready to send","Poll the channel for the next item","Poll the channel for the next item","Poll the channel for the next message","Receive the next value.","Receive the next value.","Receive the next value.","Get a receiver for this channel.","Sends a value.","Sends a value.","Send a value, waiting until there is capacity.","Get a sender for this channel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to immediately receive the next value.","Attempt to immediately receive the next value.","Attempt to immediately receive a message.","Attempt to immediately send a message.","Attempt to immediately send a message.","Attempt to immediately send a message.","","","","","","","","","","","","Async mutex.","Async mutex guard.","Error returned by <code>Mutex::try_lock</code>","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Lock the mutex.","Create a new mutex with the given value.","","","","","","","","Attempt to immediately lock the mutex.","","","","No data could be read from the pipe because it is currently","Future returned by [<code>Pipe::fill_buf</code>] and  <code>Reader::fill_buf</code>.","No data could be written to the pipe because it is …","A bounded byte-oriented pipe for communicating between …","Future returned by <code>Pipe::read</code> and  <code>Reader::read</code>.","Read-only access to a <code>Pipe</code>.","Error returned by <code>try_read</code>.","Error returned by <code>try_write</code>.","Future returned by <code>Pipe::write</code> and  <code>Writer::write</code>.","Write-only access to a <code>Pipe</code>.","","","","","","","","","","","","","","","","","Total byte capacity.","Clear the data in the pipe’s buffer.","","","","","","","Tell this buffer that <code>amt</code> bytes have been consumed from …","","","","","Return the contents of the internal buffer, filling it …","","","","","","Free byte capacity.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return whether the pipe is empty (no data buffered)","Return whether the pipe is full (no free space in the …","Used byte capacity.","Establish a new bounded pipe. For example, to create one …","","","","Read some bytes from the pipe.","","Read some bytes from the pipe.","","","Split this pipe into a BufRead-capable reader and a writer.","","","","Try returning contents of the internal buffer.","","","","","","","","","","","","","","","","","Attempt to immediately read some bytes from the pipe.","Attempt to immediately read some bytes from the pipe.","Attempt to immediately write some bytes to the pipe.","Attempt to immediately write some bytes to the pipe.","","","","","","","","","","Write some bytes to the pipe.","","Write some bytes to the pipe.","","Write all bytes to the pipe.","The binary heap kind: min-heap or max-heap","Max-heap","Min-heap","A bounded channel for communicating between asynchronous …","Future returned by <code>PriorityChannel::receive</code> and  …","Receive-only access to a <code>PriorityChannel</code>.","Future returned by <code>PriorityChannel::send</code> and  <code>Sender::send</code>.","Send-only access to a <code>PriorityChannel</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Establish a new bounded channel. For example, to create …","","","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to …","Allows a poll_fn to poll until the channel is ready to send","Allows a poll_fn to poll until the channel is ready to send","Poll the channel for the next item","Poll the channel for the next message","Receive the next value.","Receive the next value.","Get a receiver for this channel.","Sends a value.","Send a value, waiting until there is capacity.","Get a sender for this channel.","","","","","","","","","","","","","","","","","","Attempt to immediately receive the next value.","Attempt to immediately receive a message.","Attempt to immediately send a message.","Attempt to immediately send a message.","","","","","","","","","","","Error type for the PubSubChannel","","The subscriber did not receive all messages and lagged by …","All publisher slots are used. To add another publisher, …","All subscriber slots are used. To add another subscriber, …","A message was received","‘Middle level’ behaviour of the pubsub channel. This …","A broadcast channel implementation where multiple …","","","The result of the subscriber wait procedure","Get the amount of messages that are between the given the …","","","","","","","","","","","","Create a new publisher that can only send immediate …","Create a new publisher","Create a new subscriber. It will only receive messages …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to get a message from the queue with the given message …","","Create a new publisher that can only send immediate …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new channel","Publish a message immediately","","Try to publish a message to the queue.","","Implementation of anything directly publisher related","Create a new publisher","The amount of messages that can still be published without …","","Implementation of anything directly subscriber related","Create a new subscriber. It will only receive messages …","","","","","","","","","","","","Let the channel know that a publisher has dropped","","Let the channel know that a subscriber has dropped","","An immediate publisher that holds a dynamic reference to …","A publisher that holds a dynamic reference to the channel","A publisher that can only use the <code>publish_immediate</code> …","An immediate publisher that holds a generic reference to …","A publisher to a channel","A publisher that holds a generic reference to the channel","Future for the publisher wait action","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Publish a message. But if the message queue is full, wait …","Publish a message right now even when the queue is full. …","Publish the message right now even when the queue is full. …","The amount of messages that can still be published without …","The amount of messages that can still be published without …","","","","","","","","","","","","","","","Publish a message if there is space in the message queue","Publish a message if there is space in the message queue","","","","","","","","A subscriber that holds a dynamic reference to the channel","A subscriber to a channel","A subscriber that holds a generic reference to the channel","Future for the subscriber wait action","The amount of messages this subscriber hasn’t received …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Wait for a published message","Wait for a published message (ignoring lag results)","","","","","","","","","","","Try to see if there’s a published message we haven’t …","Try to see if there’s a published message we haven’t …","","","","","","Single-slot signaling primitive.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new <code>Signal</code>.","Remove the queued value in this <code>Signal</code>, if any.","Mark this Signal as signaled.","non-blocking method to check whether this signal has been …","","","","Future that completes when this Signal has been signaled.","Utility struct to register and wake a waker.","Utility struct to register and wake multiple wakers.","Utility struct to register and wake a waker.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>AtomicWaker</code>.","Create a new empty instance","Create a new <code>WakerRegistration</code>.","Returns true if a waker is currently registered","Register a waker. Overwrites the previous waker, if any.","Register a waker. If the buffer is full the function …","Register a waker. Overwrites the previous waker, if any.","","","","","","","","","","Wake the registered waker, if any.","Wake all registered wakers. This clears the buffer","Wake the registered waker, if any.","A bounded zero-copy channel for communicating between …","Receive-only access to a <code>Channel</code>.","Send-only access to a <code>Channel</code>.","","","Creates one further <code>Sender</code> over the same channel.","Creates one further <code>Sender</code> over the same channel.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize a new <code>Channel</code>.","Attempts to asynchronously receive a value over the …","Attempts to send a value over the channel.","Asynchronously receive a value over the channel.","Notify the channel that the receiving of the value has …","Asynchronously send a value over the channel.","Notify the channel that the sending of the value has been …","Creates a <code>Sender</code> and <code>Receiver</code> from an existing channel.","","","","","","","Attempts to receive a value over the channel.","Attempts to send a value over the channel.","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,5,5,2,5,2,5,2,5,2,2,5,2,2,5,2,5,0,2,5,2,5,2,5,0,8,0,0,0,3,1,12,3,1,12,12,3,1,12,3,1,12,8,3,1,12,3,1,12,3,1,12,3,1,12,3,1,12,0,0,0,0,0,17,18,0,0,0,0,0,0,13,14,15,16,30,34,35,36,29,17,18,13,14,15,16,30,34,35,36,29,17,18,13,14,15,16,17,18,13,14,15,16,17,18,17,18,17,18,13,14,14,14,15,16,16,16,30,34,35,36,29,17,18,13,14,15,16,30,34,35,36,29,17,18,30,34,35,36,29,30,34,35,36,15,16,29,13,14,29,15,16,29,15,16,29,29,13,14,29,29,13,14,15,16,17,18,13,14,15,16,30,34,35,36,29,17,18,13,14,15,16,30,34,35,36,29,17,18,30,34,15,16,29,13,14,29,13,14,15,16,30,34,35,36,29,17,18,0,0,0,39,38,37,39,38,37,37,37,38,38,38,37,37,39,38,37,39,39,38,37,39,39,39,37,39,38,37,39,38,37,39,39,38,37,43,0,44,0,0,0,0,0,0,0,42,49,45,50,48,40,43,44,42,49,45,50,48,40,43,44,40,40,42,43,44,42,43,44,45,45,43,44,45,45,42,40,40,43,44,40,42,49,45,50,48,40,43,44,42,49,45,50,48,40,43,44,49,50,48,40,40,40,40,49,50,48,45,45,40,40,40,40,42,43,44,45,42,49,45,50,48,40,43,44,42,49,45,50,48,40,43,44,45,40,42,40,42,49,45,50,48,40,43,44,42,42,40,40,40,40,0,0,0,0,0,0,0,0,25,28,52,53,51,81,82,25,28,52,53,51,81,82,25,28,25,28,25,28,52,53,51,81,82,25,28,52,53,51,81,82,52,53,51,52,53,28,51,25,51,28,51,28,51,51,25,51,51,25,28,25,28,52,53,51,81,82,25,28,52,53,51,81,82,52,28,51,25,51,25,28,52,53,51,81,82,0,0,0,0,0,57,56,56,57,0,0,0,0,0,66,55,55,56,57,55,56,57,56,57,56,57,55,55,55,56,57,56,57,55,56,57,66,55,55,55,56,57,55,66,55,66,55,0,55,66,55,0,55,56,57,55,56,57,55,56,57,55,56,57,66,55,66,55,0,0,0,0,0,0,0,65,59,63,68,58,62,67,65,59,63,68,58,62,67,59,63,58,62,59,63,58,62,65,65,59,63,68,58,62,67,65,59,63,68,58,62,67,67,67,65,65,68,65,68,65,59,63,68,58,62,67,65,59,63,68,58,62,67,65,68,65,59,63,68,58,62,67,0,0,0,0,69,69,60,64,70,69,60,64,70,60,64,60,64,69,69,60,64,70,69,60,64,70,70,69,69,70,69,69,60,64,70,69,60,64,70,69,69,69,69,60,64,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,75,76,74,75,76,74,74,74,75,76,74,75,76,74,75,76,74,74,75,76,74,75,76,74,75,76,74,75,76,74,75,76,74,0,0,0,80,78,78,79,79,80,78,79,80,78,79,80,78,79,80,79,78,79,79,78,78,80,80,78,79,80,78,79,79,78,80,78,79],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1,-1]]],-1,[]],[-1,-2,[],[]],[[[2,[3,-1]],4],-1,[]],[-1,-2,[],[]],[[[5,[-1]]],-1,6],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[2,[-1,-2]]],[],[]],[[[5,[-1]]],7,6],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-2]]],-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],-2,[],[]],[[[2,[-1,-2]],-3],-4,8,[],9,[]],[[[5,[-1]],-2],-3,6,9,[]],[-1,[[2,[-2,-1]]],[],8],[-1,[[5,[-1]]],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],-3,[],9,[]],[[3,-1],-2,9,[]],[[1,-1],-2,9,[]],[[12,-1],-2,9,[]],[[],3],[[],1],[[],12],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[13,[-1,-2]]],8,[]],[[[14,[-1]]],[[14,[-1]]],[]],[[[15,[-1,-2]]],[[15,[-1,-2]]],8,[]],[[[16,[-1]]],[[16,[-1]]],[]],[17,17],[[[18,[-1]]],[[18,[-1]]],19],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[17,17],20],[[[18,[-1]],[18,[-1]]],20,21],[[17,22],23],[[[18,[-1]],22],23,24],[-1,-1,[]],[[[13,[-1,-2]]],[[14,[-2]]],8,[]],[[[25,[-1,-2,-3]]],[[14,[-2]]],8,26,27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[28,[-1,-2,-3]]],[[16,[-2]]],8,26,27],[[[15,[-1,-2]]],[[16,[-2]]],8,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],[[29,[-1,-2]]],8,[]],[[[31,[[30,[-1,-2]]]],32],[[33,[-2]]],8,[]],[[[31,[[34,[-1]]]],32],[[33,[-1]]],[]],[[[31,[[35,[-1,-2]]]],32],33,8,[]],[[[31,[[36,[-1]]]],32],33,[]],[[[15,[-1,-2]],32],[[33,[7]]],8,[]],[[[16,[-1]],32],[[33,[7]]],[]],[[[29,[-1,-2]],32],[[33,[7]]],8,[]],[[[13,[-1,-2]],32],[[33,[7]]],8,[]],[[[14,[-1]],32],[[33,[7]]],[]],[[[29,[-1,-2]],32],[[33,[7]]],8,[]],[[[15,[-1,-2]],32],[[33,[-2]]],8,[]],[[[16,[-1]],32],[[33,[-1]]],[]],[[[29,[-1,-2]],32],[[33,[-2]]],8,[]],[[[15,[-1,-2]]],[[30,[-1,-2]]],8,[]],[[[16,[-1]]],[[34,[-1]]],[]],[[[29,[-1,-2]]],[[30,[-1,-2]]],8,[]],[[[29,[-1,-2]]],[[15,[-1,-2]]],8,[]],[[[13,[-1,-2]],-2],[[35,[-1,-2]]],8,[]],[[[14,[-1]],-1],[[36,[-1]]],[]],[[[29,[-1,-2]],-2],[[35,[-1,-2]]],8,[]],[[[29,[-1,-2]]],[[13,[-1,-2]]],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[31,[-1]],32],33,[]],[[[31,[-1]],32],33,[]],[[[15,[-1,-2]]],[[10,[-2,17]]],8,[]],[[[16,[-1]]],[[10,[-1,17]]],[]],[[[29,[-1,-2]]],[[10,[-2,17]]],8,[]],[[[13,[-1,-2]],-2],[[10,[7,[18,[-2]]]]],8,[]],[[[14,[-1]],-1],[[10,[7,[18,[-1]]]]],[]],[[[29,[-1,-2]],-2],[[10,[7,[18,[-2]]]]],8,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[[-1,-2],7,[],[]],[[[38,[-1,-2]]],[],8,6],[[[38,[-1,-2]]],[],8,6],[[[38,[-1,-2]]],7,8,6],[[37,37],20],[[37,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[39,[-1,-2]]],-2,8,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1,-2]]],-2,8,[6,6]],[[[39,[-1,-2]]],[[38,[-1,-2]]],8,6],[-1,[[39,[-2,-1]]],[],8],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[39,[-1,-2]]],[[10,[[38,[-1,-2]],37]]],8,6],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]]],41,8],[[[40,[-1]]],7,8],[[[42,[-1]]],[[42,[-1]]],8],[43,43],[44,44],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[45,[-1]],41],7,8],[[[45,[-1]],41],7,8],[[43,43],20],[[44,44],20],[[[45,[-1]]],[[10,[[47,[46]]]]],8],[[[45,[-1]]],[[48,[-1]]],8],[[[42,[-1]]],[[10,[7]]],8],[[[40,[-1]]],[[10,[7]]],8],[[[40,[-1]]],[[10,[7]]],8],[[43,22],23],[[44,22],23],[[[40,[-1]]],41,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[40,[-1]]],20,8],[[[40,[-1]]],20,8],[[[40,[-1]]],41,8],[[],[[40,[-1]]],8],[[[31,[[49,[-1]]]],32],33,8],[[[31,[[50,[-1]]]],32],33,8],[[[31,[[48,[-1]]]],32],33,8],[[[45,[-1]],[47,[46]]],[[50,[-1]]],8],[[[45,[-1]],[47,[46]]],[[10,[41]]],8],[[[40,[-1]],[47,[46]]],[[50,[-1]]],8],[[[40,[-1]],[47,[46]]],[[10,[41]]],8],[[[40,[-1]],[47,[46]]],[[10,[41]]],8],[[[40,[-1]]],[[7,[[45,[-1]],[42,[-1]]]]],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1]]],[[10,[[47,[46]],43]]],8],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[45,[-1]],[47,[46]]],[[10,[41,43]]],8],[[[40,[-1]],[47,[46]]],[[10,[41,43]]],8],[[[42,[-1]],[47,[46]]],[[10,[41,44]]],8],[[[40,[-1]],[47,[46]]],[[10,[41,44]]],8],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[[42,[-1]],[47,[46]]],[[10,[41]]],8],[[[42,[-1]],[47,[46]]],[[49,[-1]]],8],[[[40,[-1]],[47,[46]]],[[10,[41]]],8],[[[40,[-1]],[47,[46]]],[[49,[-1]]],8],[[[40,[-1]],[47,[46]]],[[10,[41]]],8],[[[40,[-1]],[47,[46]]],7,8],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1,-2,-3]]],[[25,[-1,-2,-3]]],8,26,27],[[[28,[-1,-2,-3]]],[[28,[-1,-2,-3]]],8,26,27],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[],[[51,[-1,-2,-3]]],8,26,27],[[[31,[[52,[-1,-2,-3]]]],32],[[33,[-2]]],8,26,27],[[[31,[[53,[-1,-2,-3]]]],32],33,8,26,27],[[[28,[-1,-2,-3]],32],[[33,[7]]],8,26,27],[[[51,[-1,-2,-3]],32],[[33,[7]]],8,26,27],[[[25,[-1,-2,-3]],32],[[33,[7]]],8,26,27],[[[51,[-1,-2,-3]],32],[[33,[7]]],8,26,27],[[[28,[-1,-2,-3]],32],[[33,[-2]]],8,26,27],[[[51,[-1,-2,-3]],32],[[33,[-2]]],8,26,27],[[[28,[-1,-2,-3]]],[[52,[-1,-2,-3]]],8,26,27],[[[51,[-1,-2,-3]]],[[52,[-1,-2,-3]]],8,26,27],[[[51,[-1,-2,-3]]],[[28,[-1,-2,-3]]],8,26,27],[[[25,[-1,-2,-3]],-2],[[53,[-1,-2,-3]]],8,26,27],[[[51,[-1,-2,-3]],-2],[[53,[-1,-2,-3]]],8,26,27],[[[51,[-1,-2,-3]]],[[25,[-1,-2,-3]]],8,26,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[31,[-1]],32],33,[]],[[[28,[-1,-2,-3]]],[[10,[-2,17]]],8,26,27],[[[51,[-1,-2,-3]]],[[10,[-2,17]]],8,26,27],[[[25,[-1,-2,-3]],-2],[[10,[7,[18,[-2]]]]],8,26,27],[[[51,[-1,-2,-3]],-2],[[10,[7,[18,[-2]]]]],8,26,27],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,54],54,[]],[[[55,[-1,-2]],54],54,8,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[[[57,[-1]]],[[57,[-1]]],19],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[55,[-1,-2]]],[[58,[-2]]],8,19],[[[55,[-1,-2]]],[[10,[[59,[-2]],56]]],8,19],[[[55,[-1,-2]]],[[10,[[60,[-2]],56]]],8,19],[[56,56],20],[[[57,[-1]],[57,[-1]]],20,21],[[56,22],23],[[[57,[-1]],22],23,24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,54,[61,[32]]],[[33,[[57,[-2]]]]],[],[]],[[[55,[-1,-2]],54,[61,[32]]],[[33,[[57,[-2]]]]],8,19],[[[55,[-1,-2]]],[[62,[-1,-2]]],8,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[55,[-1,-2]]],8,19],[[-1,-2],7,[],[]],[[[55,[-1,-2]],-2],7,8,19],[[-1,-2,[61,[32]]],[[10,[7,-2]]],[],[]],[[[55,[-1,-2]],-2,[61,[32]]],[[10,[7,-2]]],8,19],0,[[[55,[-1,-2]]],[[10,[[63,[-1,-2]],56]]],8,19],[-1,41,[]],[[[55,[-1,-2]]],41,8,19],0,[[[55,[-1,-2]]],[[10,[[64,[-1,-2]],56]]],8,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,7,[]],[[[55,[-1,-2]]],7,8,19],[[-1,54],7,[]],[[[55,[-1,-2]],54],7,8,19],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1]]],[],19],[[[63,[-1,-2]]],[],8,19],[[[58,[-1]]],[],19],[[[62,[-1,-2]]],[],8,19],[[[59,[-1]]],[],19],[[[63,[-1,-2]]],[],8,19],[[[58,[-1]]],[],19],[[[62,[-1,-2]]],[],8,19],[[[65,[-2,-1]]],7,19,[[66,[-1]],6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[31,[[67,[-2,-1]]]],32],33,19,[[66,[-1]],6]],[[[65,[-2,-1]],-1],[[67,[-2,-1]]],19,[[66,[-1]],6]],[[[65,[-2,-1]],-1],7,19,[[66,[-1]],6]],[[[68,[-2,-1]],-1],7,19,[[66,[-1]],6]],[[[65,[-2,-1]]],41,19,[[66,[-1]],6]],[[[68,[-2,-1]]],41,19,[[66,[-1]],6]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[65,[-2,-1]],-1],[[10,[7,-1]]],19,[[66,[-1]],6]],[[[68,[-2,-1]],-1],[[10,[7,-1]]],19,[[66,[-1]],6]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[[[69,[-2,-1]]],54,19,[[66,[-1]],6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[-1]]],[],19],[[[64,[-1,-2]]],[],8,19],[[[60,[-1]]],[],19],[[[64,[-1,-2]]],[],8,19],[[[69,[-2,-1]]],7,19,[[66,[-1]],6]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[69,[-2,-1]]],[[70,[-2,-1]]],19,[[66,[-1]],6]],[[[69,[-2,-1]]],-1,19,[[66,[-1]],6]],[[[31,[[70,[-2,-1]]]],32],33,19,[[66,[-1]],6]],[[[31,[[69,[-2,-1]]]],32],[[33,[61]]],19,[[66,[-1]],6]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[69,[-2,-1]]],[[61,[[57,[-1]]]]],19,[[66,[-1]],6]],[[[69,[-2,-1]]],[[61,[-1]]],19,[[66,[-1]],6]],[[[31,[-1]],32],[[33,[[61,[10]]]]],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[71,[-1,-2]]],8,[]],[-1,-1,[]],[-1,-2,[],[]],[[],[[71,[-1,-2]]],8,[]],[[[71,[-1,-2]]],7,8,72],[[[71,[-1,-2]],-2],7,8,72],[[[71,[-1,-2]]],20,8,72],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[[71,[-1,-2]]],[[0,[73]]],8,72],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],74],[[74,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],75],[[],76],[[],74],[74,20],[[75,77],7],[[76,77],7],[[74,77],7],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[75,7],[76,7],[74,7],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1,-2]]],[[78,[-1,-2]]],8,[]],[[[79,[-1,-2]]],[[79,[-1,-2]]],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1]]],[[80,[-2,-1]]],[],8],[[[79,[-1,-2]],32],[[33,[-2]]],8,[]],[[[78,[-1,-2]],32],[[33,[-2]]],8,[]],[[[79,[-1,-2]]],-2,8,[]],[[[79,[-1,-2]]],7,8,[]],[[[78,[-1,-2]]],-2,8,[]],[[[78,[-1,-2]]],7,8,[]],[[[80,[-1,-2]]],[[7,[[78,[-1,-2]],[79,[-1,-2]]]]],8,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[79,[-1,-2]]],[[61,[-2]]],8,[]],[[[78,[-1,-2]]],[[61,[-2]]],8,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[3,"NoopRawMutex",39],[3,"Mutex",9],[3,"CriticalSectionRawMutex",39],[3,"CriticalSection",735],[3,"ThreadModeMutex",9],[8,"Sized",736],[15,"tuple"],[8,"RawMutex",39],[8,"FnOnce",737],[4,"Result",738],[3,"TypeId",739],[3,"ThreadModeRawMutex",39],[3,"Sender",73],[3,"DynamicSender",73],[3,"Receiver",73],[3,"DynamicReceiver",73],[4,"TryReceiveError",73],[4,"TrySendError",73],[8,"Clone",740],[15,"bool"],[8,"PartialEq",741],[3,"Formatter",742],[6,"Result",742],[8,"Debug",742],[3,"Sender",376],[8,"Ord",741],[8,"Kind",376],[3,"Receiver",376],[3,"Channel",73],[3,"ReceiveFuture",73],[3,"Pin",743],[3,"Context",744],[4,"Poll",745],[3,"DynamicReceiveFuture",73],[3,"SendFuture",73],[3,"DynamicSendFuture",73],[3,"TryLockError",223],[3,"MutexGuard",223],[3,"Mutex",223],[3,"Pipe",260],[15,"usize"],[3,"Writer",260],[4,"TryReadError",260],[4,"TryWriteError",260],[3,"Reader",260],[15,"u8"],[15,"slice"],[3,"FillBufFuture",260],[3,"WriteFuture",260],[3,"ReadFuture",260],[3,"PriorityChannel",376],[3,"ReceiveFuture",376],[3,"SendFuture",376],[15,"u64"],[3,"PubSubChannel",461],[4,"Error",461],[4,"WaitResult",461],[3,"DynImmediatePublisher",529],[3,"DynPublisher",529],[3,"DynSubscriber",603],[4,"Option",746],[3,"ImmediatePublisher",529],[3,"Publisher",529],[3,"Subscriber",603],[3,"Pub",529],[8,"PubSubBehavior",461],[3,"PublisherWaitFuture",529],[3,"ImmediatePub",529],[3,"Sub",603],[3,"SubscriberWaitFuture",603],[3,"Signal",649],[8,"Send",736],[8,"Future",747],[3,"WakerRegistration",663],[3,"AtomicWaker",663],[3,"MultiWakerRegistration",663],[3,"Waker",744],[3,"Sender",699],[3,"Receiver",699],[3,"Channel",699],[4,"Min",376],[4,"Max",376]],"b":[[13,"impl-Mutex%3CNoopRawMutex,+T%3E"],[15,"impl-Mutex%3CCriticalSectionRawMutex,+T%3E"],[125,"impl-From%3CSender%3C\'ch,+M,+T,+N%3E%3E-for-DynamicSender%3C\'ch,+T%3E"],[126,"impl-From%3CSender%3C\'ch,+M,+T,+K,+N%3E%3E-for-DynamicSender%3C\'ch,+T%3E"],[130,"impl-From%3CReceiver%3C\'ch,+M,+T,+K,+N%3E%3E-for-DynamicReceiver%3C\'ch,+T%3E"],[131,"impl-From%3CReceiver%3C\'ch,+M,+T,+N%3E%3E-for-DynamicReceiver%3C\'ch,+T%3E"],[294,"impl-Reader%3C\'p,+M,+N%3E"],[295,"impl-BufRead-for-Reader%3C\'_,+M,+N%3E"],[298,"impl-BufRead-for-Reader%3C\'_,+M,+N%3E"],[299,"impl-Reader%3C\'p,+M,+N%3E"],[301,"impl-Write-for-%26Pipe%3CM,+N%3E"],[302,"impl-Write-for-Pipe%3CM,+N%3E"],[332,"impl-Reader%3C\'p,+M,+N%3E"],[333,"impl-Read-for-Reader%3C\'_,+M,+N%3E"],[334,"impl-Pipe%3CM,+N%3E"],[335,"impl-Read-for-%26Pipe%3CM,+N%3E"],[336,"impl-Read-for-Pipe%3CM,+N%3E"],[370,"impl-Write-for-Writer%3C\'_,+M,+N%3E"],[371,"impl-Writer%3C\'p,+M,+N%3E"],[372,"impl-Write-for-Pipe%3CM,+N%3E"],[373,"impl-Pipe%3CM,+N%3E"],[374,"impl-Write-for-%26Pipe%3CM,+N%3E"]]},\
"embassy_time":{"doc":"embassy-time","t":"DDDSSSSRDDDLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLFDIFKLLLLLLLLFKFKFKLLLLIK","n":["Delay","Duration","Instant","MAX","MAX","MIN","MIN","TICK_HZ","Ticker","TimeoutError","Timer","add","add","add_assign","add_assign","after","after_micros","after_millis","after_secs","after_ticks","as_micros","as_micros","as_millis","as_millis","as_secs","as_secs","as_ticks","as_ticks","at","block_for","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_div","checked_duration_since","checked_mul","checked_sub","checked_sub","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","delay_ms","delay_ms","delay_ms","delay_us","delay_us","delay_us","div","div_assign","driver","duration_since","elapsed","eq","eq","eq","every","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_hz","from_micros","from_micros","from_micros_floor","from_millis","from_millis","from_millis_floor","from_secs","from_secs","from_secs_floor","from_ticks","from_ticks","into","into","into","into","into","into","into_future","is_terminated","mul","mul_assign","next","now","partial_cmp","partial_cmp","poll","poll_next","queue","reset","saturating_duration_since","sub","sub","sub","sub_assign","sub_assign","time_driver_impl","timer_queue_impl","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_timeout","AlarmHandle","Driver","allocate_alarm","allocate_alarm","borrow","borrow_mut","clone","clone_into","from","id","into","new","now","now","set_alarm","set_alarm","set_alarm_callback","set_alarm_callback","to_owned","try_from","try_into","type_id","TimerQueue","schedule_wake"],"q":[[0,"embassy_time"],[147,"embassy_time::driver"],[169,"embassy_time::queue"],[171,"core::option"],[172,"core::cmp"],[173,"core::fmt"],[174,"core::fmt"],[175,"core::pin"],[176,"core::task::wake"],[177,"core::task::poll"],[178,"alloc::string"],[179,"core::result"],[180,"core::time"],[181,"core::any"],[182,"core::task::wake"]],"d":["Type implementing async delays and blocking <code>embedded-hal</code> …","Represents the difference between two Instants","An Instant in time, based on the MCU’s clock ticks since …","The largest value that can be represented by the <code>Duration</code> …","The largest (latest) value that can be represented by the …","The smallest value that can be represented by the <code>Duration</code> …","The smallest (earliest) value that can be represented by …","中文(Chinese)","Asynchronous stream that yields every Duration, …","Error returned by <code>with_timeout</code> on timeout.","A future that completes at a specified Instant.","","","","","Expire after specified Duration. This can be used as a …","Expire after the specified number of microseconds.","Expire after the specified number of milliseconds.","Expire after the specified number of seconds.","Expire after the specified number of ticks.","Convert the <code>Duration</code> to microseconds, rounding down.","Microseconds since system boot.","Convert the <code>Duration</code> to milliseconds, rounding down.","Milliseconds since system boot.","Convert the <code>Duration</code> to seconds, rounding down.","Seconds since system boot.","Tick count of the <code>Duration</code>.","Tick count since system boot.","Expire at specified Instant","Blocks for at least <code>duration</code>.","","","","","","","","","","","","","Adds one Duration to another, returning a new Duration or …","Adds one Duration to self, returning a new <code>Instant</code> or None …","Divides one Duration a scalar u32, returning a new …","Duration between this Instant and another Instant","Multiplies one Duration by a scalar u32, returning a new …","Subtracts one Duration to another, returning a new …","Subtracts one Duration to self, returning a new <code>Instant</code> or …","","","","","","","","","","","","","","","","","","Time driver interface","Duration between this Instant and another Instant Panics …","Duration elapsed since this Instant.","","","","Creates a new ticker that ticks at the specified duration …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a duration corresponding to the specified Hz. …","Creates a duration from the specified number of …","Chinese","Creates a duration from the specified number of …","Creates a duration from the specified number of …","Chinese","Creates a duration from the specified number of …","Creates a duration from the specified number of seconds, …","Chinese","Creates a duration from the specified number of seconds, …","Creates a duration from the specified number of clock ticks","Create an Instant from a tick count since system boot.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Waits for the next tick.","Returns an Instant representing the current time.","","","","","Timer queue implementation","Resets the ticker back to its original state. This causes …","Returns the duration since the “earlier” Instant. If …","","","","","","Set the time Driver implementation.","Set the TimerQueue implementation.","","","","","","","","","","Converts using <code>Duration::from_micros</code>. Fails if value can …","","","","","","","","","","","","","","","Runs a given future with a timeout.","Alarm handle, assigned by the driver.","Time driver","See <code>Driver::allocate_alarm</code>","Try allocating an alarm handle. Returns None if no alarms …","","","","","Returns the argument unchanged.","Get the ID of the AlarmHandle.","Calls <code>U::from(self)</code>.","Create an AlarmHandle","See <code>Driver::now</code>","Return the current timestamp in ticks.","See <code>Driver::set_alarm</code>","Sets an alarm at the given timestamp. When the current …","See <code>Driver::set_alarm_callback</code>","Sets the callback function to be called when the alarm …","","","","","Timer queue","Schedules a waker in the queue to be awoken at moment <code>at</code>. …"],"i":[0,0,0,1,2,1,2,0,0,0,0,1,2,1,2,4,4,4,4,4,1,2,1,2,1,2,1,2,4,0,10,4,14,1,2,8,10,4,14,1,2,8,1,2,1,2,1,1,2,1,2,8,1,2,8,1,2,1,10,10,10,10,10,10,1,1,0,2,2,1,2,8,14,1,1,2,2,8,10,4,14,1,2,8,1,1,2,1,1,2,1,1,2,1,1,2,10,4,14,1,2,8,4,14,1,1,14,2,1,2,4,14,0,14,2,1,2,2,1,2,0,0,1,2,8,1,2,10,4,14,1,1,2,8,10,4,14,1,2,8,10,4,14,1,2,8,0,0,0,0,27,25,25,25,25,25,25,25,25,0,27,0,27,0,27,25,25,25,25,0,28],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,1],2],[[1,1],3],[[2,1],3],[1,4],[5,4],[5,4],[5,4],[5,4],[1,5],[2,5],[1,5],[2,5],[1,5],[2,5],[1,5],[2,5],[2,4],[1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[6,[1]]]],[[2,1],[[6,[2]]]],[[1,7],[[6,[1]]]],[[2,2],[[6,[1]]]],[[1,7],[[6,[1]]]],[[1,1],[[6,[1]]]],[[2,1],[[6,[2]]]],[1,1],[2,2],[8,8],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],9],[[2,2],9],[[],1],[[10,11],3],[[10,7],3],[[10,12],3],[[10,12],3],[[10,7],3],[[10,11],3],[[1,7],1],[[1,7],3],0,[[2,2],1],[2,1],[[1,1],13],[[2,2],13],[[8,8],13],[1,14],[[1,15],16],[[1,15],16],[[2,15],16],[[2,15],16],[[8,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,1],[5,1],[5,2],[5,1],[5,1],[5,2],[5,1],[5,1],[5,2],[5,1],[5,1],[5,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[14,13],[[1,7],1],[[1,7],3],[14,[[0,[17]]]],[[],2],[[1,1],[[6,[9]]]],[[2,2],[[6,[9]]]],[[[18,[4]],19],20],[[[18,[14]],19],[[20,[6]]]],0,[14,3],[[2,2],1],[[1,1],1],[[2,2],1],[[2,1],2],[[1,1],3],[[2,1],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,21,[]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[23,[[22,[1]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[1,-1],[[22,[8]]],17],0,0,[[],[[6,[25]]]],[-1,[[6,[25]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],3,[],[]],[-1,-1,[]],[25,11],[-1,-2,[],[]],[11,25],[[],5],[-1,5,[]],[[25,5],13],[[-1,25,5],13,[]],[[25,3],3],[[-1,25,3],3,[]],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,24,[]],0,[[-1,2,26],3,[]]],"c":[],"p":[[3,"Duration",0],[3,"Instant",0],[15,"tuple"],[3,"Timer",0],[15,"u64"],[4,"Option",171],[15,"u32"],[3,"TimeoutError",0],[4,"Ordering",172],[3,"Delay",0],[15,"u8"],[15,"u16"],[15,"bool"],[3,"Ticker",0],[3,"Formatter",173],[6,"Result",173],[8,"Future",174],[3,"Pin",175],[3,"Context",176],[4,"Poll",177],[3,"String",178],[4,"Result",179],[3,"Duration",180],[3,"TypeId",181],[3,"AlarmHandle",147],[3,"Waker",176],[8,"Driver",147],[8,"TimerQueue",169]],"b":[[58,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu8%3E-for-Delay"],[59,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu32%3E-for-Delay"],[60,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu16%3E-for-Delay"],[61,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu16%3E-for-Delay"],[62,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu32%3E-for-Delay"],[63,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu8%3E-for-Delay"],[73,"impl-Debug-for-Duration"],[74,"impl-Display-for-Duration"],[75,"impl-Display-for-Instant"],[76,"impl-Debug-for-Instant"],[116,"impl-Sub-for-Instant"],[117,"impl-Sub%3CDuration%3E-for-Instant"]]},\
"embedded_hal":{"doc":"crates.io crates.io Documentation Minimum Supported Rust …","t":"AAAAAILKIQEININNIEIILLLLLLLLLLLLLLLLLLKKKKKLLLKKLKLLLLLLNINNNIQEIINEENNNGGNNLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLIQEINILLLLLLLLKLLKLLKLLLLLLLNNNNIQEINNNRRRRDNENNEENIINNNLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLMMKLKKLKLLLLLLLLLLLLLLLLKL","n":["delay","digital","i2c","pwm","spi","DelayUs","delay_ms","delay_us","Error","Error","ErrorKind","ErrorType","High","InputPin","Low","Other","OutputPin","PinState","StatefulOutputPin","ToggleableOutputPin","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","eq","eq","fmt","fmt","fmt","from","from","from","hash","into","into","is_high","is_low","is_set_high","is_set_low","kind","kind","not","partial_cmp","set_high","set_low","set_state","toggle","try_from","try_from","try_into","try_into","type_id","type_id","Address","AddressMode","ArbitrationLoss","Bus","Data","Error","Error","ErrorKind","ErrorType","I2c","NoAcknowledge","NoAcknowledgeSource","Operation","Other","Overrun","Read","SevenBitAddress","TenBitAddress","Unknown","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","kind","kind","partial_cmp","partial_cmp","read","transaction","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_read","Error","Error","ErrorKind","ErrorType","Other","SetDutyCycle","borrow","borrow_mut","clone","cmp","eq","fmt","fmt","from","get_max_duty_cycle","hash","into","kind","kind","partial_cmp","set_duty_cycle","set_duty_cycle_fraction","set_duty_cycle_fully_off","set_duty_cycle_fully_on","set_duty_cycle_percent","try_from","try_into","type_id","CaptureOnFirstTransition","CaptureOnSecondTransition","ChipSelectFault","DelayUs","Error","Error","ErrorKind","ErrorType","FrameFormat","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","ModeFault","Operation","Other","Overrun","Phase","Polarity","Read","SpiBus","SpiDevice","Transfer","TransferInPlace","Write","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","eq","eq","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","kind","kind","partial_cmp","phase","polarity","read","read","transaction","transfer","transfer","transfer_in_place","transfer_in_place","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write"],"q":[[0,"embedded_hal"],[5,"embedded_hal::delay"],[8,"embedded_hal::digital"],[56,"embedded_hal::i2c"],[119,"embedded_hal::pwm"],[147,"embedded_hal::spi"],[242,"core::cmp"],[243,"core::fmt"],[244,"core::fmt"],[245,"core::result"],[246,"core::option"],[247,"core::any"],[248,"core::cmp"]],"d":["Delays","Digital I/O","Blocking I2C API","Pulse Width Modulation (PWM) traits","Blocking SPI master mode traits.","Microsecond delay","Pauses execution for at minimum <code>ms</code> milliseconds. Pause can …","Pauses execution for at minimum <code>us</code> microseconds. Pause can …","Error","Error type","Error kind","Error type trait","High pin state","Single digital input pin","Low pin state","A different error occurred. The original error may contain …","Single digital push-pull output pin","Digital output pin state","Push-pull output pin that can read its output state","Output pin that can be toggled","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","Convert error to a generic error kind","","","","Drives the pin high","Drives the pin low","Drives the pin high or low depending on the provided value","Toggle pin output.","","","","","","","The device did not acknowledge its address. The device may …","Address mode (7-bit / 10-bit)","The arbitration was lost, e.g. electrical problems with …","Bus error occurred. e.g. A START or a STOP condition is …","The device did not acknowledge the data. It may not be …","I2C error","Error type","I2C error kind","I2C error type trait","Blocking I2C","A bus operation was not acknowledged, e.g. due to the …","I2C no acknowledge error source","I2C operation.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Either the device did not acknowledge its address or the …","Write data from the provided buffer","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert error to a generic I2C error kind","","","","Reads enough bytes from slave with <code>address</code> to fill <code>read</code>","Execute the provided operations on the I2C bus.","","","","","","","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Error","Error type","Error kind","Error type trait","A different error occurred. The original error may contain …","Single PWM channel / pin","","","","","","","","Returns the argument unchanged.","Get the maximum duty cycle value.","","Calls <code>U::from(self)</code>.","Convert error to a generic error kind","","","Set the duty cycle to <code>duty / max_duty</code>.","Set the duty cycle to <code>num / denom</code>.","Set the duty cycle to 0%, or always inactive.","Set the duty cycle to 100%, or always active.","Set the duty cycle to <code>percent / 100</code>","","","","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An error occurred while asserting or deasserting the Chip …","Delay for at least the specified number of microseconds","SPI error","Error type","SPI error kind","SPI error type trait","Received data does not conform to the peripheral …","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Multiple devices on the SPI bus are trying to drive the …","SPI transaction operation.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun","Clock phase","Clock polarity","Read data into the provided buffer.","SPI bus","SPI device trait","Read data into the first buffer, while writing data from …","Write data out while reading data into the provided buffer","Write data from the provided buffer, discarding read data","","","","","","","","","","","","","","","","","","","","","Wait until all operations have completed and the bus is …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert error to a generic SPI error kind","","","Clock phase","Clock polarity","Read <code>words</code> from the slave.","Do a read within a transaction.","Perform a transaction against the device.","Write and read simultaneously. <code>write</code> is written to the …","Do a transfer within a transaction.","Write and read simultaneously. The contents of <code>words</code> are …","Do an in-place transfer within a transaction.","","","","","","","","","","","","","","","","Write <code>words</code> to the slave, ignoring all the incoming words","Do a write within a transaction."],"i":[0,0,0,0,0,0,27,27,0,28,0,0,4,0,4,3,0,0,0,0,3,4,3,4,3,4,3,3,4,3,3,4,3,4,4,3,3,4,29,29,30,30,31,3,4,3,32,32,32,33,3,4,3,4,3,4,14,0,13,13,14,0,34,0,0,0,13,0,0,13,13,15,0,0,14,15,13,14,15,13,14,15,13,14,13,14,13,14,15,13,13,14,14,15,13,14,15,13,14,13,14,15,35,13,13,14,36,36,13,14,15,13,14,15,13,14,15,36,36,0,37,0,0,18,0,18,18,18,18,18,18,18,18,38,18,18,39,18,18,38,38,38,38,38,18,18,18,21,21,23,24,0,40,0,0,23,20,20,0,0,0,0,0,23,0,23,23,0,0,24,0,0,24,24,24,20,21,22,23,24,20,21,22,23,24,20,21,22,23,23,20,21,22,23,24,41,20,21,22,23,23,24,20,21,22,23,24,23,20,21,22,23,24,42,23,23,22,22,41,43,43,41,43,41,43,20,21,22,23,24,20,21,22,23,24,20,21,22,23,24,41,43],"f":[0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[4,4],[[3,3],5],[[3,3],6],[[4,4],6],[[3,7],8],[[3,7],8],[[4,7],8],[-1,-1,[]],[6,4],[-1,-1,[]],[[3,-1],2,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[6]]],[]],[-1,[[10,[6]]],[]],[-1,[[10,[6]]],[]],[-1,[[10,[6]]],[]],[-1,3,[]],[3,3],[4],[[3,3],[[11,[5]]]],[-1,[[10,[2]]],[]],[-1,[[10,[2]]],[]],[[-1,4],[[10,[2]]],[]],[-1,[[10,[2]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[14,14],[[13,13],5],[[14,14],5],[[13,13],6],[[14,14],6],[[15,15],6],[[13,7],8],[[13,7],8],[[14,7],8],[[14,7],8],[[15,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[13,-1],2,9],[[14,-1],2,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[13,13],[[13,13],[[11,[5]]]],[[14,14],[[11,[5]]]],[[-1,-2,[17,[16]]],[[10,[2]]],[],[]],[[-1,-2,[17,[15]]],[[10,[2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[-1,-2,[17,[16]]],[[10,[2]]],[],[]],[[-1,-2,[17,[16]],[17,[16]]],[[10,[2]]],[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[[18,18],5],[[18,18],6],[[18,7],8],[[18,7],8],[-1,-1,[]],[-1,19,[]],[[18,-1],2,9],[-1,-2,[],[]],[-1,18,[]],[18,18],[[18,18],[[11,[5]]]],[[-1,19],[[10,[2]]],[]],[[-1,19,19],[[10,[2]]],[]],[-1,[[10,[2]]],[]],[-1,[[10,[2]]],[]],[[-1,16],[[10,[2]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[21,21],[22,22],[23,23],[[23,23],5],[[20,20],6],[[21,21],6],[[22,22],6],[[23,23],6],[[[24,[-1]],[24,[-1]]],6,25],[-1,[[10,[2]]],[]],[[20,7],8],[[21,7],8],[[22,7],8],[[23,7],8],[[23,7],8],[[[24,[-1]],7],8,26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[23,-1],2,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[23,23],[[23,23],[[11,[5]]]],0,0,[[-1,[17,[-2]]],[[10,[2]]],[],[]],[[-1,[17,[-2]]],[[10,[2]]],[],[]],[[-1,[17,[[24,[-2]]]]],[[10,[2]]],[],[]],[[-1,[17,[-2]],[17,[-2]]],[[10,[2]]],[],[]],[[-1,[17,[-2]],[17,[-2]]],[[10,[2]]],[],[]],[[-1,[17,[-2]]],[[10,[2]]],[],[]],[[-1,[17,[-2]]],[[10,[2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[-1,[17,[-2]]],[[10,[2]]],[],[]],[[-1,[17,[-2]]],[[10,[2]]],[],[]]],"c":[],"p":[[15,"u32"],[15,"tuple"],[4,"ErrorKind",8],[4,"PinState",8],[4,"Ordering",242],[15,"bool"],[3,"Formatter",243],[6,"Result",243],[8,"Hasher",244],[4,"Result",245],[4,"Option",246],[3,"TypeId",247],[4,"ErrorKind",56],[4,"NoAcknowledgeSource",56],[4,"Operation",56],[15,"u8"],[15,"slice"],[4,"ErrorKind",119],[15,"u16"],[4,"Polarity",147],[4,"Phase",147],[3,"Mode",147],[4,"ErrorKind",147],[4,"Operation",147],[8,"PartialEq",242],[8,"Debug",243],[8,"DelayUs",5],[8,"ErrorType",8],[8,"InputPin",8],[8,"StatefulOutputPin",8],[8,"Error",8],[8,"OutputPin",8],[8,"ToggleableOutputPin",8],[8,"ErrorType",56],[8,"Error",56],[8,"I2c",56],[8,"ErrorType",119],[8,"SetDutyCycle",119],[8,"Error",119],[8,"ErrorType",147],[8,"SpiBus",147],[8,"Error",147],[8,"SpiDevice",147]],"b":[[29,"impl-Display-for-ErrorKind"],[30,"impl-Debug-for-ErrorKind"],[89,"impl-Display-for-ErrorKind"],[90,"impl-Debug-for-ErrorKind"],[91,"impl-Debug-for-NoAcknowledgeSource"],[92,"impl-Display-for-NoAcknowledgeSource"],[130,"impl-Display-for-ErrorKind"],[131,"impl-Debug-for-ErrorKind"],[199,"impl-Debug-for-ErrorKind"],[200,"impl-Display-for-ErrorKind"]]},\
"embedded_hal_async":{"doc":"crates.io crates.io Documentation","t":"AAAAIKKIKKKKKNINNNIQEIINEENNNGGNNLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLNNNNIQEINNNRRRRDNENNEENIINNNLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLMMKLKKLKLLLLLLLLLLLLLLLLKL","n":["delay","digital","i2c","spi","DelayUs","delay_ms","delay_us","Wait","wait_for_any_edge","wait_for_falling_edge","wait_for_high","wait_for_low","wait_for_rising_edge","Address","AddressMode","ArbitrationLoss","Bus","Data","Error","Error","ErrorKind","ErrorType","I2c","NoAcknowledge","NoAcknowledgeSource","Operation","Other","Overrun","Read","SevenBitAddress","TenBitAddress","Unknown","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","kind","kind","partial_cmp","partial_cmp","read","transaction","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_read","CaptureOnFirstTransition","CaptureOnSecondTransition","ChipSelectFault","DelayUs","Error","Error","ErrorKind","ErrorType","FrameFormat","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","ModeFault","Operation","Other","Overrun","Phase","Polarity","Read","SpiBus","SpiDevice","Transfer","TransferInPlace","Write","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","eq","eq","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","kind","kind","partial_cmp","phase","polarity","read","read","transaction","transfer","transfer","transfer_in_place","transfer_in_place","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write"],"q":[[0,"embedded_hal_async"],[4,"embedded_hal_async::delay"],[7,"embedded_hal_async::digital"],[13,"embedded_hal_async::i2c"],[76,"embedded_hal_async::spi"],[171,"core::result"],[172,"core::cmp"],[173,"core::fmt"],[174,"core::fmt"],[175,"core::option"],[176,"core::any"],[177,"core::cmp"]],"d":["Delays","Asynchronous digital I/O","Async I2C API","SPI master mode traits.","Microsecond delay","Pauses execution for at minimum <code>ms</code> milliseconds. Pause can …","Pauses execution for at minimum <code>us</code> microseconds. Pause can …","Asynchronously wait for GPIO pin state.","Wait for the pin to undergo any transition, i.e low to …","Wait for the pin to undergo a transition from high to low.","Wait until the pin is high. If it is already high, return …","Wait until the pin is low. If it is already low, return …","Wait for the pin to undergo a transition from low to high.","The device did not acknowledge its address. The device may …","Address mode (7-bit / 10-bit)","The arbitration was lost, e.g. electrical problems with …","Bus error occurred. e.g. A START or a STOP condition is …","The device did not acknowledge the data. It may not be …","I2C error","Error type","I2C error kind","I2C error type trait","Async i2c","A bus operation was not acknowledged, e.g. due to the …","I2C no acknowledge error source","I2C operation.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Either the device did not acknowledge its address or the …","Write data from the provided buffer","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert error to a generic I2C error kind","","","","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","Execute the provided operations on the I2C bus as a single …","","","","","","","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An error occurred while asserting or deasserting the Chip …","Delay for at least the specified number of microseconds","SPI error","Error type","SPI error kind","SPI error type trait","Received data does not conform to the peripheral …","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Multiple devices on the SPI bus are trying to drive the …","SPI transaction operation.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun","Clock phase","Clock polarity","Read data into the provided buffer.","SPI bus","SPI device trait","Read data into the first buffer, while writing data from …","Write data out while reading data into the provided buffer","Write data from the provided buffer, discarding read data","","","","","","","","","","","","","","","","","","","","","Wait until all operations have completed and the bus is …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert error to a generic SPI error kind","","","Clock phase","Clock polarity","Read <code>words</code> from the slave.","Do a read within a transaction.","Perform a transaction against the device.","Write and read simultaneously. <code>write</code> is written to the …","Do a transfer within a transaction.","Write and read simultaneously. The contents of <code>words</code> are …","Do an in-place transfer within a transaction.","","","","","","","","","","","","","","","","Write <code>words</code> to the slave, ignoring all the incoming words","Do a write within a transaction."],"i":[0,0,0,0,0,23,23,0,24,24,24,24,24,5,0,4,4,5,0,25,0,0,0,4,0,0,4,4,8,0,0,5,8,4,5,8,4,5,8,4,5,4,5,4,5,8,4,4,5,5,8,4,5,8,4,5,4,5,8,26,4,4,5,27,27,4,5,8,4,5,8,4,5,8,27,27,17,17,19,20,0,28,0,0,19,16,16,0,0,0,0,0,19,0,19,19,0,0,20,0,0,20,20,20,16,17,18,19,20,16,17,18,19,20,16,17,18,19,19,16,17,18,19,20,29,16,17,18,19,19,20,16,17,18,19,20,19,16,17,18,19,20,30,19,19,18,18,29,31,31,29,31,29,31,16,17,18,19,20,16,17,18,19,20,16,17,18,19,20,29,31],"f":[0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],0,[-1,[[3,[2]]],[]],[-1,[[3,[2]]],[]],[-1,[[3,[2]]],[]],[-1,[[3,[2]]],[]],[-1,[[3,[2]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[[4,4],6],[[5,5],6],[[4,4],7],[[5,5],7],[[8,8],7],[[4,9],[[3,[2,10]]]],[[4,9],[[3,[2,10]]]],[[5,9],[[3,[2,10]]]],[[5,9],[[3,[2,10]]]],[[8,9],[[3,[2,10]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[4,-1],2,11],[[5,-1],2,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,4,[]],[4,4],[[4,4],[[12,[6]]]],[[5,5],[[12,[6]]]],[[-1,-2,[14,[13]]],[[3,[2]]],[],[]],[[-1,-2,[14,[8]]],[[3,[2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[-1,-2,[14,[13]]],[[3,[2]]],[],[]],[[-1,-2,[14,[13]],[14,[13]]],[[3,[2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[17,17],[18,18],[19,19],[[19,19],6],[[16,16],7],[[17,17],7],[[18,18],7],[[19,19],7],[[[20,[-1]],[20,[-1]]],7,21],[-1,[[3,[2]]],[]],[[16,9],[[3,[2,10]]]],[[17,9],[[3,[2,10]]]],[[18,9],[[3,[2,10]]]],[[19,9],[[3,[2,10]]]],[[19,9],[[3,[2,10]]]],[[[20,[-1]],9],[[3,[2,10]]],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[19,-1],2,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,19,[]],[19,19],[[19,19],[[12,[6]]]],0,0,[[-1,[14,[-2]]],[[3,[2]]],[],[]],[[-1,[14,[-2]]],[[3,[2]]],[],[]],[[-1,[14,[[20,[-2]]]]],[[3,[2]]],[],[]],[[-1,[14,[-2]],[14,[-2]]],[[3,[2]]],[],[]],[[-1,[14,[-2]],[14,[-2]]],[[3,[2]]],[],[]],[[-1,[14,[-2]]],[[3,[2]]],[],[]],[[-1,[14,[-2]]],[[3,[2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[-1,[14,[-2]]],[[3,[2]]],[],[]],[[-1,[14,[-2]]],[[3,[2]]],[],[]]],"c":[],"p":[[15,"u32"],[15,"tuple"],[4,"Result",171],[4,"ErrorKind",13],[4,"NoAcknowledgeSource",13],[4,"Ordering",172],[15,"bool"],[4,"Operation",13],[3,"Formatter",173],[3,"Error",173],[8,"Hasher",174],[4,"Option",175],[15,"u8"],[15,"slice"],[3,"TypeId",176],[4,"Polarity",76],[4,"Phase",76],[3,"Mode",76],[4,"ErrorKind",76],[4,"Operation",76],[8,"PartialEq",172],[8,"Debug",173],[8,"DelayUs",4],[8,"Wait",7],[8,"ErrorType",13],[8,"Error",13],[8,"I2c",13],[8,"ErrorType",76],[8,"SpiBus",76],[8,"Error",76],[8,"SpiDevice",76]],"b":[[46,"impl-Debug-for-ErrorKind"],[47,"impl-Display-for-ErrorKind"],[48,"impl-Debug-for-NoAcknowledgeSource"],[49,"impl-Display-for-NoAcknowledgeSource"],[128,"impl-Debug-for-ErrorKind"],[129,"impl-Display-for-ErrorKind"]]},\
"embedded_io":{"doc":"crates.io crates.io Documentation","t":"NNNNINNNNNIQEINNNNNNNNNNNNIEIIEENNNNIEINLLLLLLLLLLLLLLLKLLLLLKKLLLLLLLLLLLLLLLLLLLLLLKLLKLKLKLLLLLLLLLLLLLLLLKLLK","n":["AddrInUse","AddrNotAvailable","AlreadyExists","BrokenPipe","BufRead","ConnectionAborted","ConnectionRefused","ConnectionReset","Current","End","Error","Error","ErrorKind","ErrorType","FmtError","Full","Interrupted","InvalidData","InvalidInput","NotConnected","NotFound","Other","Other","Other","OutOfMemory","PermissionDenied","Read","ReadExactError","ReadReady","Seek","SeekFrom","SliceWriteError","Start","TimedOut","UnexpectedEof","Unsupported","Write","WriteFmtError","WriteReady","WriteZero","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","consume","eq","eq","eq","eq","eq","fill_buf","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","kind","kind","kind","read","read_exact","read_ready","rewind","seek","stream_position","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write_all","write_fmt","write_ready"],"q":[[0,"embedded_io"],[113,"core::clone"],[114,"core::cmp"],[115,"core::result"],[116,"core::fmt"],[117,"core::fmt"],[118,"core::fmt"]],"d":["A socket address could not be bound because the address is …","A nonexistent interface was requested or the requested …","An entity already exists, often a file.","The operation failed because a pipe was closed.","Blocking buffered reader.","The connection was aborted (terminated) by the remote …","The connection was refused by the remote server.","The connection was reset by the remote server.","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","Error trait.","Error type of all the IO operations on this type.","Possible kinds of errors.","Base trait for all IO traits, defining the error type.","An error was encountered while formatting.","The target slice was full and so could not receive any new …","This operation was interrupted.","Data not valid for the operation were encountered.","A parameter was incorrect.","The network operation failed because it was not connected …","An entity was not found, often a file.","Unspecified error kind.","Error returned by the inner Read.","Error returned by the inner Write.","An operation could not be completed, because it failed to …","The operation lacked the necessary privileges to complete.","Blocking reader.","Error returned by <code>Read::read_exact</code>","Get whether a reader is ready.","Blocking seek within streams.","Enumeration of possible methods to seek within an I/O …","Errors that could be returned by <code>Write</code> on <code>&amp;mut [u8]</code>.","Sets the offset to the provided number of bytes.","The I/O operation’s timeout expired, causing it to be …","An EOF error was encountered before reading the exact …","This operation is unsupported on this platform.","Blocking writer.","Error returned by <code>Write::write_fmt</code>","Get whether a writer is ready.","An attempted write could not write any data.","","","","","","","","","","","","","","","","Tell this buffer that <code>amt</code> bytes have been consumed from …","","","","","","Return the contents of the internal buffer, filling it …","Flush this output stream, blocking until all …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the kind of this error.","","","Read some bytes from this source into the specified …","Read the exact number of bytes required to fill <code>buf</code>.","Get whether the reader is ready for immediately reading.","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns the current seek position from the start of the …","","","","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Write an entire buffer into this writer.","Write a formatted string into this writer, returning any …","Get whether the writer is ready for immediately writing."],"i":[2,2,2,2,0,2,2,2,1,1,0,21,0,0,6,5,2,2,2,2,2,2,3,6,2,2,0,0,0,0,0,0,1,2,3,2,0,0,0,2,1,2,3,5,6,1,2,3,5,6,1,2,3,5,6,22,1,2,3,5,6,22,23,1,2,3,3,5,5,6,6,1,2,3,3,3,5,6,6,6,1,2,3,5,6,24,2,5,25,25,26,27,27,27,1,2,3,5,6,1,2,3,5,6,1,2,3,5,6,23,23,23,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[5,5],[[[6,[-1]]],[[6,[-1]]],4],[[-1,7],8,[]],[[1,1],9],[[2,2],9],[[[3,[-1]],[3,[-1]]],9,10],[[5,5],9],[[[6,[-1]],[6,[-1]]],9,10],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[8]]],[]],[[1,14],15],[[2,14],15],[[[3,[-1]],14],15,16],[[[3,[-1]],14],15,16],[[5,14],15],[[5,14],15],[[[6,[-1]],14],15,16],[[[6,[-1]],14],15,16],[-1,-1,[]],[-1,-1,[]],[17,-1,[]],[-1,[[3,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-1]]],[]],[17,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[2,2],[5,2],[[-1,[12,[11]]],[[13,[7]]],[]],[[-1,[12,[11]]],[[13,[8,3]]],[]],[-1,[[13,[9]]],[]],[-1,[[13,[8]]],[]],[[-1,1],[[13,[18]]],[]],[-1,[[13,[18]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[-1,[12,[11]]],[[13,[7]]],[]],[[-1,[12,[11]]],[[13,[8]]],[]],[[-1,20],[[13,[8,6]]],[]],[-1,[[13,[9]]],[]]],"c":[],"p":[[4,"SeekFrom",0],[4,"ErrorKind",0],[4,"ReadExactError",0],[8,"Clone",113],[4,"SliceWriteError",0],[4,"WriteFmtError",0],[15,"usize"],[15,"tuple"],[15,"bool"],[8,"PartialEq",114],[15,"u8"],[15,"slice"],[4,"Result",115],[3,"Formatter",116],[6,"Result",116],[8,"Debug",116],[15,"never"],[15,"u64"],[3,"TypeId",117],[3,"Arguments",116],[8,"ErrorType",0],[8,"BufRead",0],[8,"Write",0],[8,"Error",0],[8,"Read",0],[8,"ReadReady",0],[8,"Seek",0],[8,"WriteReady",0]],"b":[[65,"impl-Debug-for-ReadExactError%3CE%3E"],[66,"impl-Display-for-ReadExactError%3CE%3E"],[67,"impl-Debug-for-SliceWriteError"],[68,"impl-Display-for-SliceWriteError"],[69,"impl-Debug-for-WriteFmtError%3CE%3E"],[70,"impl-Display-for-WriteFmtError%3CE%3E"]]},\
"embedded_io_async":{"doc":"crates.io crates.io Documentation","t":"NNNNINNNNNIQEINNNNNNNNNIEIIENNNNIINLLLLLLLLLKLLLKLLLLLLLLLLLLLKLKLKLKLLLLLLLLLLKLK","n":["AddrInUse","AddrNotAvailable","AlreadyExists","BrokenPipe","BufRead","ConnectionAborted","ConnectionRefused","ConnectionReset","Current","End","Error","Error","ErrorKind","ErrorType","Interrupted","InvalidData","InvalidInput","NotConnected","NotFound","Other","Other","OutOfMemory","PermissionDenied","Read","ReadExactError","ReadReady","Seek","SeekFrom","Start","TimedOut","UnexpectedEof","Unsupported","Write","WriteReady","WriteZero","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","consume","eq","eq","eq","fill_buf","flush","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","kind","kind","read","read_exact","read_ready","rewind","seek","stream_position","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_ready"],"q":[[0,"embedded_io_async"],[82,"core::clone"],[83,"core::cmp"],[84,"core::result"],[85,"core::fmt"],[86,"core::fmt"]],"d":["A socket address could not be bound because the address is …","A nonexistent interface was requested or the requested …","An entity already exists, often a file.","The operation failed because a pipe was closed.","Async buffered reader.","The connection was aborted (terminated) by the remote …","The connection was refused by the remote server.","The connection was reset by the remote server.","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","Error trait.","Error type of all the IO operations on this type.","Possible kinds of errors.","Base trait for all IO traits, defining the error type.","This operation was interrupted.","Data not valid for the operation were encountered.","A parameter was incorrect.","The network operation failed because it was not connected …","An entity was not found, often a file.","Unspecified error kind.","Error returned by the inner Read.","An operation could not be completed, because it failed to …","The operation lacked the necessary privileges to complete.","Async reader.","Error returned by <code>Read::read_exact</code>","Get whether a reader is ready.","Async seek within streams.","Enumeration of possible methods to seek within an I/O …","Sets the offset to the provided number of bytes.","The I/O operation’s timeout expired, causing it to be …","An EOF error was encountered before reading the exact …","This operation is unsupported on this platform.","Async writer.","Get whether a writer is ready.","An attempted write could not write any data.","","","","","","","","","","Tell this buffer that <code>amt</code> bytes have been consumed from …","","","","Return the contents of the internal buffer, filling it …","Flush this output stream, ensuring that all intermediately …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the kind of this error.","","Read some bytes from this source into the specified …","Read the exact number of bytes required to fill <code>buf</code>.","Get whether the reader is ready for immediately reading.","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns the current seek position from the start of the …","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Write an entire buffer into this writer.","Get whether the writer is ready for immediately writing."],"i":[2,2,2,2,0,2,2,2,1,1,0,18,0,0,2,2,2,2,2,2,3,2,2,0,0,0,0,0,1,2,3,2,0,0,2,1,2,3,1,2,3,1,2,3,19,1,2,3,19,20,1,2,3,3,1,2,3,3,3,1,2,3,21,2,22,22,23,24,24,24,1,2,3,1,2,3,1,2,3,20,20,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[[-1,5],6,[]],[[1,1],7],[[2,2],7],[[[3,[-1]],[3,[-1]]],7,8],[-1,[[11,[[10,[9]]]]],[]],[-1,[[11,[6]]],[]],[[1,12],[[11,[6,13]]]],[[2,12],[[11,[6,13]]]],[[[3,[-1]],12],[[11,[6,13]]],14],[[[3,[-1]],12],[[11,[6,13]]],14],[-1,-1,[]],[-1,-1,[]],[-1,[[3,[-1]]],[]],[15,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[2,2],[[-1,[10,[9]]],[[11,[5]]],[]],[[-1,[10,[9]]],[[11,[6,3]]],[]],[-1,[[11,[7]]],[]],[-1,[[11,[6]]],[]],[[-1,1],[[11,[16]]],[]],[-1,[[11,[16]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[-1,[10,[9]]],[[11,[5]]],[]],[[-1,[10,[9]]],[[11,[6]]],[]],[-1,[[11,[7]]],[]]],"c":[],"p":[[4,"SeekFrom",0],[4,"ErrorKind",0],[4,"ReadExactError",0],[8,"Clone",82],[15,"usize"],[15,"tuple"],[15,"bool"],[8,"PartialEq",83],[15,"u8"],[15,"slice"],[4,"Result",84],[3,"Formatter",85],[3,"Error",85],[8,"Debug",85],[15,"never"],[15,"u64"],[3,"TypeId",86],[8,"ErrorType",0],[8,"BufRead",0],[8,"Write",0],[8,"Error",0],[8,"Read",0],[8,"ReadReady",0],[8,"Seek",0],[8,"WriteReady",0]],"b":[[52,"impl-Debug-for-ReadExactError%3CE%3E"],[53,"impl-Display-for-ReadExactError%3CE%3E"]]},\
"fnv":{"doc":"An implementation of the Fowler–Noll–Vo hash function.","t":"GGGDLLLLLLLLLLL","n":["FnvBuildHasher","FnvHashMap","FnvHashSet","FnvHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","with_key","write"],"q":[[0,"fnv"],[15,"core::result"],[16,"core::any"]],"d":["A builder for default FNV hashers.","A <code>HashMap</code> using a default FNV hasher.","A <code>HashSet</code> using a default FNV hasher.","An implementation of the Fowler–Noll–Vo hash function.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Create an FNV hasher starting with a state corresponding …",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,2],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[2,1],[[1,[6,[5]]],7]],"c":[],"p":[[3,"FnvHasher",0],[15,"u64"],[4,"Result",15],[3,"TypeId",16],[15,"u8"],[15,"slice"],[15,"tuple"]],"b":[]},\
"futures_core":{"doc":"Core traits and types for asynchronous operations in Rust.","t":"CCCCCCAOAAQICQIKKQIQQIIKKLKCCCCC","n":["FusedFuture","FusedStream","Future","Stream","TryFuture","TryStream","future","ready","stream","task","Error","FusedFuture","Future","Ok","TryFuture","is_terminated","try_poll","Error","FusedStream","Item","Ok","Stream","TryStream","is_terminated","poll_next","size_hint","try_poll_next","Context","Poll","RawWaker","RawWakerVTable","Waker"],"q":[[0,"futures_core"],[10,"futures_core::future"],[17,"futures_core::stream"],[27,"futures_core::task"],[32,"core::pin"],[33,"core::task::wake"],[34,"core::result"],[35,"core::task::poll"],[36,"core::option"]],"d":["","","","","","","Futures.","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","Asynchronous streams.","Task notification.","The type of failures yielded by this future","A future which tracks whether or not the underlying future …","","The type of successful values yielded by this future","A convenience for futures that return <code>Result</code> values that …","Returns <code>true</code> if the underlying future should no longer be …","Poll this <code>TryFuture</code> as if it were a <code>Future</code>.","The type of failures yielded by this future","A stream which tracks whether or not the underlying stream …","Values yielded by the stream.","The type of successful values yielded by this future","A stream of values produced asynchronously.","A convenience for streams that return <code>Result</code> values that …","Returns <code>true</code> if the stream should no longer be polled.","Attempt to pull out the next value of this stream, …","Returns the bounds on the remaining length of the stream.","Poll this <code>TryStream</code> as if it were a <code>Stream</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,9,0,0,9,0,10,9,11,0,12,11,0,0,13,12,12,11,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[[[2,[-1]],3],[[5,[4]]],[]],0,0,0,0,0,0,[-1,1,[]],[[[2,[-1]],3],[[5,[6]]],[]],[-1,[[8,[7,[6,[7]]]]],[]],[[[2,[-1]],3],[[5,[[6,[4]]]]],[]],0,0,0,0,0],"c":[],"p":[[15,"bool"],[3,"Pin",32],[3,"Context",33],[4,"Result",34],[4,"Poll",35],[4,"Option",36],[15,"usize"],[15,"tuple"],[8,"TryFuture",10],[8,"FusedFuture",10],[8,"TryStream",17],[8,"Stream",17],[8,"FusedStream",17]],"b":[]},\
"futures_task":{"doc":"Tools for working with tasks.","t":"CDDICCCIDICLLLLLLKLLLLLLLLLLLLLLLKLLLFFLLLKKLLLLLLLLLLLLL","n":["Context","FutureObj","LocalFutureObj","LocalSpawn","Poll","RawWaker","RawWakerVTable","Spawn","SpawnError","UnsafeFutureObj","Waker","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into_future","into_future","into_future_obj","into_raw","is_shutdown","new","new","noop_waker","noop_waker_ref","poll","poll","shutdown","spawn_local_obj","spawn_obj","status","status","status_local","status_local","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"futures_task"],[57,"core::future::future"],[58,"core::fmt"],[59,"core::fmt"],[60,"core::task::wake"],[61,"core::pin"],[62,"core::task::wake"],[63,"core::result"],[64,"core::any"]],"d":["","A custom trait object for polling futures, roughly akin to …","A custom trait object for polling futures, roughly akin to …","The <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …","","","","The <code>Spawn</code> trait allows for pushing futures onto an …","An error that occurred during spawning.","A custom implementation of a future trait object for …","","","","","","","","Drops the future represented by the given fat pointer.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.","Convert an owned instance into a (conceptually owned) fat …","Check whether spawning failed to the executor being shut …","Create a <code>LocalFutureObj</code> from a custom trait object …","Create a <code>FutureObj</code> from a custom trait object …","Create a new <code>Waker</code> which does nothing when <code>wake()</code> is …","Get a static reference to a <code>Waker</code> which does nothing when …","","","Spawning failed because the executor has been shut down.","Spawns a future that will be run to completion.","Spawns a future that will be run to completion.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,4,3,7,4,3,7,9,3,4,4,3,7,4,3,3,7,4,3,7,3,7,3,9,4,3,7,0,0,3,7,4,17,18,18,18,17,17,4,3,7,4,3,7,4,3,7],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[[3,[-1]]],2,[]],[[4,5],6],[[4,5],6],[[[3,[-1]],5],6,[]],[[[7,[-1]],5],6,[]],[-1,-1,[]],[-1,-1,[]],[[[7,[-1]]],[[3,[-1]]],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[3,[-1]]],[[7,[-1]]],[]],[-1,1,[]],[4,8],[-2,[[3,[-1]]],[],[[9,[-1]]]],[-2,[[7,[-1]]],[],[[9,[-1]],10]],[[],11],[[],11],[[[12,[[3,[-1]]]],13],[[14,[-1]]],[]],[[[12,[[7,[-1]]]],13],[[14,[-1]]],[]],[[],4],[[-1,[3,[2]]],[[15,[2,4]]],[]],[[-1,[7,[2]]],[[15,[2,4]]],[]],[-1,[[15,[2,4]]],[]],[-1,[[15,[2,4]]],[]],[-1,[[15,[2,4]]],[]],[-1,[[15,[2,4]]],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]]],"c":[],"p":[[8,"Future",57],[15,"tuple"],[3,"LocalFutureObj",0],[3,"SpawnError",0],[3,"Formatter",58],[6,"Result",58],[3,"FutureObj",0],[15,"bool"],[8,"UnsafeFutureObj",0],[8,"Send",59],[3,"Waker",60],[3,"Pin",61],[3,"Context",60],[4,"Poll",62],[4,"Result",63],[3,"TypeId",64],[8,"LocalSpawn",0],[8,"Spawn",0]],"b":[[19,"impl-Debug-for-SpawnError"],[20,"impl-Display-for-SpawnError"]]},\
"futures_util":{"doc":"Combinators and utilities for working with <code>Future</code>s, <code>Stream</code>…","t":"CCCCCCCCAAOOAADNNEDQDDDICNNIDNNDDDDDDDDDDNDDDDDDEDQDDDDDDDNDDDDIIDDDDEDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLFLLLLFLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDDDDDDDDDDDQDDDDDDDIDDDDQDNDDDDDDQDDDDDDDDEDDNDDDDDDIIDDDDDDDDDDDDDDIIDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLFLLLLLLFLLLLLLLLLLLLLLLLLLLLFFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLDCDDIICCCIDIICLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLFFLLLLKKLLLLLLLLLLLLLLLLLL","n":["Future","FutureExt","Stream","StreamExt","TryFuture","TryFutureExt","TryStream","TryStreamExt","future","never","pin_mut","ready","stream","task","AndThen","Done","Done","Either","ErrInto","Error","Flatten","FlattenStream","Fuse","FusedFuture","Future","Future","Future","FutureExt","FutureObj","Gone","Gone","Inspect","InspectErr","InspectOk","IntoFuture","IntoStream","Join","Join3","Join4","Join5","Lazy","Left","LocalFutureObj","Map","MapErr","MapInto","MapOk","MapOkOrElse","MaybeDone","NeverError","Ok","OkInto","OptionFuture","OrElse","Pending","PollFn","PollImmediate","Ready","Right","Select","Then","TryFlatten","TryFlattenStream","TryFuture","TryFutureExt","TryJoin","TryJoin3","TryJoin4","TryJoin5","TryMaybeDone","TrySelect","UnitError","UnsafeFutureObj","UnwrapOrElse","and_then","and_then","as_pin_mut","as_pin_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","default","drop","err","err_into","err_into","factor_first","factor_second","flatten","flatten","flatten_stream","flatten_stream","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fuse","fuse","inspect","inspect","inspect_err","inspect_err","inspect_ok","inspect_ok","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_raw","into_stream","into_stream","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","join","join3","join4","join5","lazy","left_future","left_future","map","map","map_err","map_err","map_into","map_into","map_ok","map_ok","map_ok_or_else","map_ok_or_else","maybe_done","never_error","never_error","now_or_never","now_or_never","ok","ok_into","ok_into","or_else","or_else","output_mut","output_mut","pending","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_fn","poll_immediate","poll_next","poll_next","poll_next","poll_next","poll_next","poll_unpin","poll_unpin","ready","right_future","right_future","select","size_hint","size_hint","size_hint","size_hint","take_output","take_output","terminated","then","then","try_flatten","try_flatten","try_flatten_stream","try_flatten_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_join","try_join3","try_join4","try_join5","try_maybe_done","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_unpin","try_poll_unpin","try_select","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit_error","unit_error","unwrap_or_else","unwrap_or_else","Never","All","AndThen","Any","Chain","Collect","Concat","Count","Cycle","Empty","Enumerate","ErrInto","Error","Filter","FilterMap","FlatMap","Flatten","Fold","ForEach","Fuse","FusedStream","Inspect","InspectErr","InspectOk","IntoStream","Item","Iter","Left","Map","MapErr","MapOk","Next","NextIf","NextIfEq","Ok","Once","OrElse","Peek","PeekMut","Peekable","Pending","PollFn","PollImmediate","PollNext","Repeat","RepeatWith","Right","Scan","Select","SelectNextSome","SelectWithStrategy","Skip","SkipWhile","Stream","StreamExt","StreamFuture","Take","TakeUntil","TakeWhile","Then","TryCollect","TryConcat","TryFilter","TryFilterMap","TryFlatten","TryFold","TryForEach","TryNext","TrySkipWhile","TryStream","TryStreamExt","TryTakeWhile","TryUnfold","Unfold","Unzip","Zip","all","all","and_then","and_then","any","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","chain","chain","clone","clone","clone","clone","clone","clone","clone","collect","collect","concat","concat","count","count","cycle","cycle","default","empty","enumerate","enumerate","eq","err_into","err_into","filter","filter","filter_map","filter_map","flat_map","flat_map","flatten","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fuse","fuse","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","hash","inspect","inspect","inspect_err","inspect_err","inspect_ok","inspect_ok","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_stream","into_stream","is_done","is_stopped","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","is_terminated","iter","left_stream","left_stream","map","map","map_err","map_err","map_ok","map_ok","next","next","next_if","next_if_eq","once","or_else","or_else","peek","peek_mut","peekable","peekable","pending","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_fn","poll_immediate","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next","poll_next_unpin","poll_next_unpin","poll_peek","poll_peek_mut","repeat","repeat_with","right_stream","right_stream","scan","scan","select","select_next_some","select_next_some","select_with_strategy","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip","skip_while","skip_while","take","take","take_future","take_result","take_until","take_until","take_while","take_while","then","then","toggle","try_all","try_all","try_any","try_any","try_collect","try_collect","try_concat","try_concat","try_filter","try_filter","try_filter_map","try_filter_map","try_flatten","try_flatten","try_fold","try_fold","try_for_each","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_next","try_next","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next","try_poll_next_unpin","try_poll_next_unpin","try_skip_while","try_skip_while","try_take_while","try_take_while","try_unfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unzip","unzip","zip","zip","AtomicWaker","Context","FutureObj","LocalFutureObj","LocalSpawn","LocalSpawnExt","Poll","RawWaker","RawWakerVTable","Spawn","SpawnError","SpawnExt","UnsafeFutureObj","Waker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into_future","into_future","into_future_obj","into_raw","is_shutdown","new","new","new","noop_waker","noop_waker_ref","poll","poll","register","shutdown","spawn_local_obj","spawn_obj","status","status_local","take","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll","try_poll","type_id","type_id","type_id","type_id","wake"],"q":[[0,"futures_util"],[14,"futures_util::future"],[666,"futures_util::never"],[667,"futures_util::stream"],[1771,"futures_util::task"],[1844,"core::marker"],[1845,"core::ops::function"],[1846,"core::pin"],[1847,"core::clone"],[1848,"core::future::future"],[1849,"core::result"],[1850,"core::fmt"],[1851,"core::fmt"],[1852,"core::marker"],[1853,"core::task::poll"],[1854,"core::ops::function"],[1855,"core::default"],[1856,"core::iter::traits::collect"],[1857,"core::hash"],[1858,"core::iter::traits::collect"],[1859,"core::fmt"]],"d":["","","","","","","","","Asynchronous values.","This module contains the <code>Never</code> type.","Pins a value on the stack.","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","Asynchronous streams.","Tools for working with tasks.","Future for the <code>and_then</code> method.","The output of the completed future","The output of the completed future","Combines two different futures, streams, or sinks having …","Future for the <code>err_into</code> method.","The type of failures yielded by this future","Future for the <code>flatten</code> method.","Stream for the <code>flatten_stream</code> method.","Future for the <code>fuse</code> method.","A future which tracks whether or not the underlying future …","","A not-yet-completed future","A not-yet-completed future","An extension trait for <code>Future</code>s that provides a variety of …","A custom trait object for polling futures, roughly akin to …","The empty variant after the result of a <code>MaybeDone</code> has been …","The empty variant after the result of a <code>TryMaybeDone</code> has …","Future for the <code>inspect</code> method.","Future for the <code>inspect_err</code> method.","Future for the <code>inspect_ok</code> method.","Future for the <code>into_future</code> method.","Stream for the <code>into_stream</code> method.","Future for the <code>join</code> function.","Future for the <code>join3</code> function.","Future for the <code>join4</code> function.","Future for the <code>join5</code> function.","Future for the <code>lazy</code> function.","First branch of the type","A custom trait object for polling futures, roughly akin to …","Future for the <code>map</code> method.","Future for the <code>map_err</code> method.","Future for the <code>map_into</code> combinator.","Future for the <code>map_ok</code> method.","Future for the <code>map_ok_or_else</code> method.","A future that may have completed.","Future for the <code>never_error</code> combinator.","The type of successful values yielded by this future","Future for the <code>ok_into</code> method.","A future representing a value which may or may not be …","Future for the <code>or_else</code> method.","Future for the <code>pending()</code> function.","Future for the <code>poll_fn</code> function.","Future for the <code>poll_immediate</code> function.","Future for the <code>ready</code> function.","Second branch of the type","Future for the <code>select()</code> function.","Future for the <code>then</code> method.","Future for the <code>try_flatten</code> method.","Future for the <code>try_flatten_stream</code> method.","A convenience for futures that return <code>Result</code> values that …","Adapters specific to <code>Result</code>-returning futures","Future for the <code>try_join</code> function.","Future for the <code>try_join3</code> function.","Future for the <code>try_join4</code> function.","Future for the <code>try_join5</code> function.","A future that may have completed with an error.","Future for the <code>try_select()</code> function.","Future for the <code>unit_error</code> combinator.","A custom implementation of a future trait object for …","Future for the <code>unwrap_or_else</code> method.","Executes another future after this one resolves …","Executes another future after this one resolves …","Convert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drops the future represented by the given fat pointer.","Create a future that is immediately ready with an error …","Maps this future’s <code>Error</code> to a new error type using the …","Maps this future’s <code>Error</code> to a new error type using the …","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Flatten the execution of this future when the output of …","Flatten the execution of this future when the output of …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fuse a future such that <code>poll</code> will never again be called …","Fuse a future such that <code>poll</code> will never again be called …","Do something with the output of a future before passing it …","Do something with the output of a future before passing it …","Do something with the error value of a future before …","Do something with the error value of a future before …","Do something with the success value of a future before …","Do something with the success value of a future before …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wraps a <code>TryFuture</code> into a type that implements <code>Future</code>.","Wraps a <code>TryFuture</code> into a type that implements <code>Future</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps the value from this immediately ready future.","Extract the value of an either over two equivalent types.","Convert an owned instance into a (conceptually owned) fat …","Convert this future into a single element stream.","Convert this future into a single element stream.","Returns <code>true</code> if the underlying future should no longer be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Joins the result of two futures, waiting for them both to …","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Creates a new future that allows delayed execution of a …","Wrap this future in an <code>Either</code> future, making it the …","Wrap this future in an <code>Either</code> future, making it the …","Map this future’s output to a different type, returning …","Map this future’s output to a different type, returning …","Maps this future’s error value to a different value.","Maps this future’s error value to a different value.","Map this future’s output to a different type, returning …","Map this future’s output to a different type, returning …","Maps this future’s success value to a different value.","Maps this future’s success value to a different value.","Maps this future’s success value to a different value, …","Maps this future’s success value to a different value, …","Wraps a future into a <code>MaybeDone</code>","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Evaluates and consumes the future, returning the resulting …","Evaluates and consumes the future, returning the resulting …","Create a future that is immediately ready with a success …","Maps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.","Maps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.","Executes another future if this one resolves to an error. …","Executes another future if this one resolves to an error. …","Returns an <code>Option</code> containing a mutable reference to the …","Returns an <code>Option</code> containing a mutable reference to the …","Creates a future which never resolves, representing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new future wrapping around a function returning …","Creates a future that is immediately ready with an Option …","","","","","","A convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …","A convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …","Creates a future that is immediately ready with a value.","Wrap this future in an <code>Either</code> future, making it the …","Wrap this future in an <code>Either</code> future, making it the …","Waits for either one of two differently-typed futures to …","","","","","Attempt to take the output of a <code>MaybeDone</code> without driving …","Attempt to take the output of a <code>TryMaybeDone</code> without …","Creates a new <code>Fuse</code>-wrapped future which is already …","Chain on a computation for when a future finished, passing …","Chain on a computation for when a future finished, passing …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Joins the result of two futures, waiting for them both to …","Same as <code>try_join</code>, but with more futures.","Same as <code>try_join</code>, but with more futures.","Same as <code>try_join</code>, but with more futures.","Wraps a future into a <code>TryMaybeDone</code>","Poll this <code>TryFuture</code> as if it were a <code>Future</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A convenience method for calling <code>TryFuture::try_poll</code> on …","A convenience method for calling <code>TryFuture::try_poll</code> on …","Waits for either one of two differently-typed futures to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Turns a <code>Future&lt;Output = T&gt;</code> into a …","Unwraps this future’s output, producing a future with …","Unwraps this future’s output, producing a future with …","A type with no possible values.","Future for the <code>all</code> method.","Stream for the <code>and_then</code> method.","Future for the <code>any</code> method.","Stream for the <code>chain</code> method.","Future for the <code>collect</code> method.","Future for the <code>concat</code> method.","Future for the <code>count</code> method.","Stream for the <code>cycle</code> method.","Stream for the <code>empty</code> function.","Stream for the <code>enumerate</code> method.","Stream for the <code>err_into</code> method.","The type of failures yielded by this future","Stream for the <code>filter</code> method.","Stream for the <code>filter_map</code> method.","Stream for the <code>flat_map</code> method.","Stream for the <code>flatten</code> method.","Future for the <code>fold</code> method.","Future for the <code>for_each</code> method.","Stream for the <code>fuse</code> method.","A stream which tracks whether or not the underlying stream …","Stream for the <code>inspect</code> method.","Stream for the <code>inspect_err</code> method.","Stream for the <code>inspect_ok</code> method.","Stream for the <code>into_stream</code> method.","Values yielded by the stream.","Stream for the <code>iter</code> function.","Poll the first stream.","Stream for the <code>map</code> method.","Stream for the <code>map_err</code> method.","Stream for the <code>map_ok</code> method.","Future for the <code>next</code> method.","Future for the <code>Peekable::next_if</code> method.","Future for the <code>Peekable::next_if_eq</code> method.","The type of successful values yielded by this future","A stream which emits single element and then EOF.","Stream for the <code>or_else</code> method.","Future for the <code>Peekable::peek</code> method.","Future for the <code>Peekable::peek_mut</code> method.","A <code>Stream</code> that implements a <code>peek</code> method.","Stream for the <code>pending()</code> function.","Stream for the <code>poll_fn</code> function.","Stream for the poll_immediate function.","Type to tell <code>SelectWithStrategy</code> which stream to poll next.","Stream for the <code>repeat</code> function.","An stream that repeats elements of type <code>A</code> endlessly by …","Poll the second stream.","Stream for the <code>scan</code> method.","Stream for the <code>select()</code> function.","Future for the <code>select_next_some</code> method.","Stream for the <code>select_with_strategy()</code> function. See …","Stream for the <code>skip</code> method.","Stream for the <code>skip_while</code> method.","A stream of values produced asynchronously.","An extension trait for <code>Stream</code>s that provides a variety of …","Future for the <code>into_future</code> method.","Stream for the <code>take</code> method.","Stream for the <code>take_until</code> method.","Stream for the <code>take_while</code> method.","Stream for the <code>then</code> method.","Future for the <code>try_collect</code> method.","Future for the <code>try_concat</code> method.","Stream for the <code>try_filter</code> method.","Stream for the <code>try_filter_map</code> method.","Stream for the <code>try_flatten</code> method.","Future for the <code>try_fold</code> method.","Future for the <code>try_for_each</code> method.","Future for the <code>try_next</code> method.","Stream for the <code>try_skip_while</code> method.","A convenience for streams that return <code>Result</code> values that …","Adapters specific to <code>Result</code>-returning streams","Stream for the <code>try_take_while</code> method.","Stream for the <code>try_unfold</code> function.","Stream for the <code>unfold</code> function.","Future for the <code>unzip</code> method.","Stream for the <code>zip</code> method.","Execute predicate over asynchronous stream, and return <code>true</code>…","Execute predicate over asynchronous stream, and return <code>true</code>…","Chain on a computation for when a value is ready, passing …","Chain on a computation for when a value is ready, passing …","Execute predicate over asynchronous stream, and return <code>true</code>…","Execute predicate over asynchronous stream, and return <code>true</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows a stream, rather than consuming it.","Borrows a stream, rather than consuming it.","Adapter for chaining two streams.","Adapter for chaining two streams.","","","","","","","","Transforms a stream into a collection, returning a future …","Transforms a stream into a collection, returning a future …","Concatenate all items of a stream into a single extendable …","Concatenate all items of a stream into a single extendable …","Drives the stream to completion, counting the number of …","Drives the stream to completion, counting the number of …","Repeats a stream endlessly.","Repeats a stream endlessly.","","Creates a stream which contains no elements.","Creates a stream which gives the current iteration count …","Creates a stream which gives the current iteration count …","","Wraps the current stream in a new stream which converts …","Wraps the current stream in a new stream which converts …","Filters the values produced by this stream according to …","Filters the values produced by this stream according to …","Filters the values produced by this stream while …","Filters the values produced by this stream while …","Maps a stream like <code>StreamExt::map</code> but flattens nested …","Maps a stream like <code>StreamExt::map</code> but flattens nested …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute an accumulating asynchronous computation over a …","Execute an accumulating asynchronous computation over a …","Runs this stream to completion, executing the provided …","Runs this stream to completion, executing the provided …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fuse a stream such that <code>poll_next</code> will never again be …","Fuse a stream such that <code>poll_next</code> will never again be …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying streams …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying sink or …","Acquires a mutable reference to the underlying streams …","Acquires a mutable reference to the underlying streams …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying sink …","Acquires a pinned mutable reference to the underlying …","Acquires a pinned mutable reference to the underlying …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying streams that this …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying sink or stream that …","Acquires a reference to the underlying streams that this …","Acquires a reference to the underlying streams that this …","","Do something with each item of this stream, afterwards …","Do something with each item of this stream, afterwards …","Do something with the error value of this stream, …","Do something with the error value of this stream, …","Do something with the success value of this stream, …","Do something with the success value of this stream, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this stream into a future of …","Converts this stream into a future of …","","","","","","","","","","","","","","","","","","","","","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying streams.","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying sink or …","Consumes this combinator, returning the underlying streams.","Consumes this combinator, returning the underlying streams.","Wraps a <code>TryStream</code> into a type that implements <code>Stream</code>","Wraps a <code>TryStream</code> into a type that implements <code>Stream</code>","Returns whether the underlying stream has finished or not.","Whether the stream was stopped yet by the stopping future …","Returns <code>true</code> if the stream should no longer be polled.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an <code>Iterator</code> into a <code>Stream</code> which is always ready …","Wrap this stream in an <code>Either</code> stream, making it the …","Wrap this stream in an <code>Either</code> stream, making it the …","Maps this stream’s items to a different type, returning …","Maps this stream’s items to a different type, returning …","Wraps the current stream in a new stream which maps the …","Wraps the current stream in a new stream which maps the …","Wraps the current stream in a new stream which maps the …","Wraps the current stream in a new stream which maps the …","Creates a future that resolves to the next item in the …","Creates a future that resolves to the next item in the …","Creates a future which will consume and return the next …","Creates a future which will consume and return the next …","Creates a stream of a single element.","Chain on a computation for when an error happens, passing …","Chain on a computation for when an error happens, passing …","Produces a future which retrieves a reference to the next …","Produces a future which retrieves a mutable reference to …","Creates a new stream which exposes a <code>peek</code> method.","Creates a new stream which exposes a <code>peek</code> method.","Creates a stream which never returns any elements.","","","","","","","","","","","","","","","","","","","","","Creates a new stream wrapping a function returning …","Creates a new stream that always immediately returns …","Attempt to pull out the next value of this stream, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>","A convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>","Peek retrieves a reference to the next item in the stream.","Peek retrieves a mutable reference to the next item in the …","Create a stream which produces the same item repeatedly.","Creates a new stream that repeats elements of type <code>A</code> …","Wrap this stream in an <code>Either</code> stream, making it the …","Wrap this stream in an <code>Either</code> stream, making it the …","Combinator similar to <code>StreamExt::fold</code> that holds internal …","Combinator similar to <code>StreamExt::fold</code> that holds internal …","This function will attempt to pull items from both …","Returns a <code>Future</code> that resolves when the next item in this …","Returns a <code>Future</code> that resolves when the next item in this …","This function will attempt to pull items from both …","Returns the bounds on the remaining length of the stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new stream which skips <code>n</code> items of the underlying …","Creates a new stream which skips <code>n</code> items of the underlying …","Skip elements on this stream while the provided …","Skip elements on this stream while the provided …","Creates a new stream of at most <code>n</code> items of the underlying …","Creates a new stream of at most <code>n</code> items of the underlying …","Extract the stopping future out of the combinator. The …","Once the stopping future is resolved, this method can be …","Take elements from this stream until the provided future …","Take elements from this stream until the provided future …","Take elements from this stream while the provided …","Take elements from this stream while the provided …","Computes from this stream’s items new items of a …","Computes from this stream’s items new items of a …","Toggle the value and return the old one.","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute a predicate over an asynchronous stream …","Attempt to execute a predicate over an asynchronous stream …","Attempt to transform a stream into a collection, returning …","Attempt to transform a stream into a collection, returning …","Attempt to concatenate all items of a stream into a single …","Attempt to concatenate all items of a stream into a single …","Attempt to filter the values produced by this stream …","Attempt to filter the values produced by this stream …","Attempt to filter the values produced by this stream while …","Attempt to filter the values produced by this stream while …","Flattens a stream of streams into just one continuous …","Flattens a stream of streams into just one continuous …","Attempt to execute an accumulating asynchronous …","Attempt to execute an accumulating asynchronous …","Attempts to run this stream to completion, executing the …","Attempts to run this stream to completion, executing the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a future that attempts to resolve the next item in …","Creates a future that attempts to resolve the next item in …","","","","","","","","","Poll this <code>TryStream</code> as if it were a <code>Stream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A convenience method for calling <code>TryStream::try_poll_next</code> …","A convenience method for calling <code>TryStream::try_poll_next</code> …","Skip elements on this stream while the provided …","Skip elements on this stream while the provided …","Take elements on this stream while the provided …","Take elements on this stream while the provided …","Creates a <code>TryStream</code> from a seed and a closure returning a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Stream</code> from a seed and a closure returning a …","Converts a stream of pairs into a future, which resolves …","Converts a stream of pairs into a future, which resolves …","An adapter for zipping two streams together.","An adapter for zipping two streams together.","A synchronization primitive for task wakeup.","","A custom trait object for polling futures, roughly akin to …","A custom trait object for polling futures, roughly akin to …","The <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …","Extension trait for <code>LocalSpawn</code>.","","","","The <code>Spawn</code> trait allows for pushing futures onto an …","An error that occurred during spawning.","Extension trait for <code>Spawn</code>.","A custom implementation of a future trait object for …","","","","","","","","","","","Drops the future represented by the given fat pointer.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.","Convert an owned instance into a (conceptually owned) fat …","Check whether spawning failed to the executor being shut …","Create a <code>LocalFutureObj</code> from a custom trait object …","Create a <code>FutureObj</code> from a custom trait object …","Create an <code>AtomicWaker</code>.","Create a new <code>Waker</code> which does nothing when <code>wake()</code> is …","Get a static reference to a <code>Waker</code> which does nothing when …","","","Registers the waker to be notified on calls to <code>wake</code>.","Spawning failed because the executor has been shut down.","Spawns a future that will be run to completion.","Spawns a future that will be run to completion.","Determines whether the executor is able to spawn new tasks.","Determines whether the executor is able to spawn new tasks.","Returns the last <code>Waker</code> passed to <code>register</code>, so that the …","","","","","","","","","","","","","","","Calls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,43,0,0,4,0,0,0,0,0,42,43,0,0,42,43,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,144,5,5,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,7,8,10,11,5,8,141,0,144,144,5,5,145,145,145,145,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,8,10,11,44,45,46,47,48,49,50,51,52,53,5,145,145,145,145,144,144,144,144,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,144,144,18,21,16,23,25,26,27,28,29,30,31,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,11,5,141,145,145,56,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,5,5,0,0,0,0,0,145,145,145,145,144,144,145,145,144,144,144,144,0,145,145,145,145,0,144,144,144,144,42,43,0,18,21,16,23,25,26,27,28,29,30,31,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,0,0,17,24,32,10,5,145,145,0,145,145,0,17,24,32,5,42,43,21,145,145,144,144,144,144,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,0,0,0,0,0,4,18,21,16,23,25,26,27,28,29,30,31,1,33,15,34,35,36,37,38,39,40,41,7,43,11,49,50,51,52,53,5,17,24,32,5,144,144,0,18,21,16,17,23,24,25,26,27,28,29,30,31,32,1,33,15,34,35,36,37,38,39,40,41,7,42,43,8,10,11,44,45,46,47,48,49,50,51,52,53,5,145,145,144,144,0,0,0,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,62,0,75,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,146,147,147,146,146,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,146,146,146,146,69,70,71,72,73,74,75,146,146,146,146,146,146,146,146,75,0,146,146,75,147,147,146,146,146,146,146,146,146,146,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,146,146,146,146,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,146,146,82,84,85,87,92,93,94,95,86,98,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,119,121,122,127,128,130,131,82,84,85,87,92,93,94,95,86,98,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,119,121,122,127,128,130,131,82,84,85,87,92,93,94,95,86,98,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,119,121,122,127,128,130,131,75,146,146,147,147,147,147,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,146,146,76,89,79,80,90,67,65,91,93,96,97,99,100,101,102,117,118,123,124,125,82,84,85,87,92,93,94,95,86,98,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,119,121,122,127,128,130,131,147,147,92,107,58,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,119,121,122,123,125,127,128,70,71,72,129,73,74,130,131,132,0,146,146,146,146,147,147,147,147,146,146,98,98,0,147,147,98,98,146,146,0,76,89,79,80,90,67,65,91,93,96,97,99,100,101,102,117,118,123,124,125,0,0,62,88,68,81,82,84,85,87,92,94,95,86,98,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,119,121,122,126,127,128,69,70,71,72,129,73,74,130,131,132,146,146,98,98,0,0,146,146,146,146,0,146,146,0,62,68,81,82,84,85,87,92,94,95,86,98,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,119,121,127,128,69,70,71,72,129,73,74,146,146,146,146,146,146,107,107,146,146,146,146,146,146,75,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,147,147,79,90,97,117,118,123,124,125,120,88,68,81,84,85,87,92,94,95,86,98,103,104,105,106,107,108,110,66,83,111,112,113,114,115,116,119,121,122,126,127,128,69,70,71,72,129,73,130,131,132,147,147,147,147,147,147,0,88,68,76,89,79,80,81,82,84,85,87,90,67,65,91,92,93,94,95,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,66,83,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,69,70,71,72,129,73,74,130,75,131,132,0,146,146,146,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,137,140,136,138,137,140,136,136,141,137,138,138,137,140,136,138,137,137,140,136,138,137,140,136,137,140,137,141,138,137,140,136,0,0,137,140,136,138,148,149,149,148,136,138,137,140,136,138,137,140,136,137,140,138,137,140,136,136],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[1,[-1,-3,-2]]],2,3,4],[[-1,-2],[[1,[-1,-3,-2]]],2,3,4],[[[6,[[5,[-1,-2]]]]],[[5,[[6,[-1]],[6,[-2]]]]],[],[]],[[[6,[[5,[-1,-2]]]]],[[5,[[6,[-1]],[6,[-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1]]],[[7,[-1]]],[]],[[[8,[-1]]],[[8,[-1]]],9],[[[10,[-1]]],[[10,[-1]]],9],[[[11,[-1]]],[[11,[-1]]],9],[[[5,[-1,-2]]],[[5,[-1,-2]]],9,9],[[],[[8,[-1]]],[]],[12,13],[-1,[[11,[[14,[-2,-1]]]]],[],[]],[-1,[[15,[-1,-2]]],2,[]],[-1,[[15,[-1,-2]]],2,[]],[[[5,[[13,[-1,-2]],[13,[-1,-3]]]]],[[13,[-1,[5,[-2,-3]]]]],[],[],[]],[[[5,[[13,[-1,-2]],[13,[-3,-2]]]]],[[13,[[5,[-1,-3]],-2]]],[],[],[]],[-1,[[16,[-1]]],2],[-1,[[16,[-1]]],2],[-1,[[17,[-1]]],2],[-1,[[17,[-1]]],2],[[[18,[-1]],19],20,[]],[[[21,[-1]],19],20,22],[[[16,[-1]],19],20,12],[[[17,[-1]],19],20,12],[[[23,[-1,-2]],19],20,[],[]],[[[24,[-1]],19],20,[]],[[[25,[-1,-2]],19],20,[],[]],[[[26,[-1,-2,-3]],19],20,[],[],[]],[[[27,[-1,-2]],19],20,[],[]],[[[28,[-1]],19],20,[]],[[[29,[-1]],19],20,[]],[[[30,[-1]],19],20,22],[[[31,[-1,-2]],19],20,[],[]],[[[32,[-1]],19],20,4],[[[1,[-1,-2,-3]],19],20,[],[],[]],[[[33,[-1,-2,-3]],19],20,[],[],[]],[[[15,[-1,-2]],19],20,[],[]],[[[34,[-1,-2]],19],20,[],[]],[[[35,[-1,-2]],19],20,[],[]],[[[36,[-1,-2]],19],20,[],[]],[[[37,[-1,-2]],19],20,[],[]],[[[38,[-1,-2]],19],20,[],[]],[[[39,[-1,-2,-3]],19],20,[],[],[]],[[[40,[-1,-2]],19],20,[],[]],[[[41,[-1]],19],20,22],[[[7,[-1]],19],20,22],[[[42,[-1]],19],20,[22,12]],[[[43,[-1]],19],20,[22,4]],[[[8,[-1]],19],20,22],[[[10,[-1]],19],20,22],[[[11,[-1]],19],20,22],[[[44,[-1,-2]],19],20,[12,22],[12,22]],[[[45,[-1,-2,-3]],19],20,[12,22],[12,22],[12,22]],[[[46,[-1,-2,-3,-4]],19],20,[12,22],[12,22],[12,22],[12,22]],[[[47,[-1,-2,-3,-4,-5]],19],20,[12,22],[12,22],[12,22],[12,22],[12,22]],[[[48,[-1,-2]],19],20,22,22],[[[49,[-1,-2]],19],20,[4,22],[4,22]],[[[50,[-1,-2,-3]],19],20,[4,22],[4,22],[4,22]],[[[51,[-1,-2,-3,-4]],19],20,[4,22],[4,22],[4,22],[4,22]],[[[52,[-1,-2,-3,-4,-5]],19],20,[4,22],[4,22],[4,22],[4,22],[4,22]],[[[53,[-1,-2]],19],20,22,22],[[[5,[-1,-2]],19],20,22,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[54,[-1]]],[[8,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[21,[-1]]],2],[-1,[[21,[-1]]],2],[[-1,-2],[[27,[-1,-2]]],2,3],[[-1,-2],[[27,[-1,-2]]],2,3],[[-1,-2],[[36,[-1,-2]]],2,3],[[-1,-2],[[36,[-1,-2]]],2,3],[[-1,-2],[[35,[-1,-2]]],2,3],[[-1,-2],[[35,[-1,-2]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-1]]],2],[-1,[[30,[-1]]],2],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[11,[-1]]],-1,[]],[[[5,[-1,-1]]],-1,[]],[-1,12,[]],[-1,[[24,[-1]]],2],[-1,[[24,[-1]]],2],[-1,55,[]],[[[21,[-1]]],55,12],[[[16,[-1]]],55,12],[[[17,[-1]]],55,12],[[[23,[-1,-2]]],55,[],[]],[[[24,[-1]]],55,[]],[[[25,[-1,-2]]],55,[],[]],[[[26,[-1,-2,-3]]],55,[],[],[]],[[[27,[-1,-2]]],55,[],[]],[[[28,[-1]]],55,[]],[[[29,[-1]]],55,[]],[[[30,[-1]]],55,[4,56]],[[[31,[-1,-2]]],55,[],[]],[[[32,[-1]]],55,4],[[[1,[-1,-2,-3]]],55,[],[],[]],[[[33,[-1,-2,-3]]],55,[],[],[]],[[[15,[-1,-2]]],55,[],[]],[[[34,[-1,-2]]],55,[],[]],[[[35,[-1,-2]]],55,[],[]],[[[36,[-1,-2]]],55,[],[]],[[[37,[-1,-2]]],55,[],[]],[[[38,[-1,-2]]],55,[],[]],[[[39,[-1,-2,-3]]],55,[],[],[]],[[[40,[-1,-2]]],55,[],[]],[[[41,[-1]]],55,3],[[[7,[-1]]],55,[]],[[[42,[-1]]],55,12],[[[43,[-1]]],55,4],[[[8,[-1]]],55,56],[[[10,[-1]]],55,12],[[[11,[-1]]],55,[]],[[[44,[-1,-2]]],55,56,56],[[[45,[-1,-2,-3]]],55,56,56,56],[[[46,[-1,-2,-3,-4]]],55,56,56,56,56],[[[47,[-1,-2,-3,-4,-5]]],55,56,56,56,56,56],[[[48,[-1,-2]]],55,[12,57],[12,57]],[[[5,[-1,-2]]],55,56,56],[[[5,[-1,-2]]],55,58,58],[[-1,-2],[[44,[-1,-2]]],12,12],[[-1,-2,-3],[[45,[-1,-2,-3]]],12,12,12],[[-1,-2,-3,-4],[[46,[-1,-2,-3,-4]]],12,12,12,12],[[-1,-2,-3,-4,-5],[[47,[-1,-2,-3,-4,-5]]],12,12,12,12,12],[-1,[[41,[-1]]],3],[-1,[[5,[-1,-2]]],2,12],[-1,[[5,[-1,-2]]],2,12],[[-1,-2],[[23,[-1,-2]]],2,3],[[-1,-2],[[23,[-1,-2]]],2,3],[[-1,-2],[[38,[-1,-2]]],2,3],[[-1,-2],[[38,[-1,-2]]],2,3],[-1,[[25,[-1,-2]]],2,[]],[-1,[[25,[-1,-2]]],2,[]],[[-1,-2],[[37,[-1,-2]]],2,3],[[-1,-2],[[37,[-1,-2]]],2,3],[[-1,-2,-3],[[39,[-1,-3,-2]]],2,3,3],[[-1,-2,-3],[[39,[-1,-3,-2]]],2,3,3],[-1,[[42,[-1]]],12],[-1,[[28,[-1]]],2],[-1,[[28,[-1]]],2],[-1,54,2],[-1,54,2],[-1,[[11,[[14,[-1,-2]]]]],[],[]],[-1,[[34,[-1,-2]]],2,[]],[-1,[[34,[-1,-2]]],2,[]],[[-1,-2],[[33,[-1,-3,-2]]],2,3,4],[[-1,-2],[[33,[-1,-3,-2]]],2,3,4],[[[6,[[42,[-1]]]]],54,12],[[[6,[[43,[-1]]]]],54,4],[[],[[7,[-1]]],[]],[[[6,[[18,[-1]]]],59],[[60,[-2]]],61,[]],[[[6,[[21,[-1]]]],59],60,12],[[[6,[[16,[-1]]]],59],60,12],[[[6,[[23,[-1,-2]]]],59],60,[],[]],[[[6,[[25,[-1,-2]]]],59],60,[],[]],[[[6,[[26,[-1,-2,-3]]]],59],60,[],[],[]],[[[6,[[27,[-1,-2]]]],59],60,[],[]],[[[6,[[28,[-1]]]],59],60,[]],[[[6,[[29,[-1]]]],59],60,[]],[[[6,[[30,[-1]]]],59],60,4],[[[6,[[31,[-1,-2]]]],59],60,[],[]],[[[6,[[1,[-1,-2,-3]]]],59],60,[],[],[]],[[[6,[[33,[-1,-2,-3]]]],59],60,[],[],[]],[[[6,[[15,[-1,-2]]]],59],60,[],[]],[[[6,[[34,[-1,-2]]]],59],60,[],[]],[[[6,[[35,[-1,-2]]]],59],60,[],[]],[[[6,[[36,[-1,-2]]]],59],60,[],[]],[[[6,[[37,[-1,-2]]]],59],60,[],[]],[[[6,[[38,[-1,-2]]]],59],60,[],[]],[[[6,[[39,[-1,-2,-3]]]],59],60,[],[],[]],[[[6,[[40,[-1,-2]]]],59],60,[],[]],[[[6,[[41,[-1]]]],59],[[60,[-2]]],3,[]],[[[6,[[7,[-1]]]],59],[[60,[-1]]],[]],[[[6,[[42,[-1]]]],59],60,12],[[[6,[[43,[-1]]]],59],60,4],[[[6,[[8,[-1]]]],59],60,12],[[[6,[[10,[-1]]]],59],[[60,[[54,[-2]]]]],12,[]],[[[6,[[11,[-1]]]],59],[[60,[-1]]],[]],[[[6,[[44,[-1,-2]]]],59],60,12,12],[[[6,[[45,[-1,-2,-3]]]],59],60,12,12,12],[[[6,[[46,[-1,-2,-3,-4]]]],59],60,12,12,12,12],[[[6,[[47,[-1,-2,-3,-4,-5]]]],59],60,12,12,12,12,12],[[[6,[[48,[-1,-2]]]],59],60,[12,57],[12,57]],[[[6,[[49,[-1,-2]]]],59],60,4,4],[[[6,[[50,[-1,-2,-3]]]],59],60,4,4,4],[[[6,[[51,[-1,-2,-3,-4]]]],59],60,4,4,4,4],[[[6,[[52,[-1,-2,-3,-4,-5]]]],59],60,4,4,4,4,4],[[[6,[[53,[-1,-2]]]],59],60,[4,57],[4,57]],[[[6,[[5,[-1,-2]]]],59],60,12,12],[-1,[[18,[-1]]],61],[-1,[[10,[-1]]],12],[[[6,[[17,[-1]]]],59],[[60,[54]]],12],[[[6,[[24,[-1]]]],59],[[60,[54]]],[]],[[[6,[[32,[-1]]]],59],[[60,[54]]],4],[[[6,[[10,[-1]]]],59],[[60,[54]]],12],[[[6,[[5,[-1,-2]]]],59],[[60,[54]]],62,62],[[-1,59],60,57],[[-1,59],60,57],[-1,[[11,[-1]]],[]],[-1,[[5,[-2,-1]]],2,12],[-1,[[5,[-2,-1]]],2,12],[[-1,-2],[[48,[-1,-2]]],[12,57],[12,57]],[[[17,[-1]]],[[13,[63,[54,[63]]]]],12],[[[24,[-1]]],[[13,[63,[54,[63]]]]],[]],[[[32,[-1]]],[[13,[63,[54,[63]]]]],4],[[[5,[-1,-2]]],[[13,[63,[54,[63]]]]],62,62],[[[6,[[42,[-1]]]]],54,12],[[[6,[[43,[-1]]]]],54,4],[[],[[21,[-1]]],12],[[-1,-2],[[26,[-1,-3,-2]]],2,3,12],[[-1,-2],[[26,[-1,-3,-2]]],2,3,12],[-1,[[31,[-1]]],2],[-1,[[31,[-1]]],2],[-1,[[32,[-1]]],2],[-1,[[32,[-1]]],2],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[-1,-2],[[49,[-1,-2]]],4,4],[[-1,-2,-3],[[50,[-1,-2,-3]]],4,4,4],[[-1,-2,-3,-4],[[51,[-1,-2,-3,-4]]],4,4,4,4],[[-1,-2,-3,-4,-5],[[52,[-1,-2,-3,-4,-5]]],4,4,4,4,4],[-1,[[43,[-1]]],4],[[[6,[-1]],59],[[60,[14]]],[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[-1,59],[[60,[14]]],57],[[-1,59],[[60,[14]]],57],[[-1,-2],[[53,[-1,-2]]],[4,57],[4,57]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,[[29,[-1]]],2],[-1,[[29,[-1]]],2],[[-1,-2],[[40,[-1,-2]]],2,3],[[-1,-2],[[40,[-1,-2]]],2,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[65,[-1,-3,-2]]],2,61,12],[[-1,-2],[[65,[-1,-3,-2]]],2,61,12],[[-1,-2],[[66,[-1,-3,-2]]],2,61,4],[[-1,-2],[[66,[-1,-3,-2]]],2,61,4],[[-1,-2],[[67,[-1,-3,-2]]],2,61,12],[[-1,-2],[[67,[-1,-3,-2]]],2,61,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[68,[-1,-2]]],2,62],[[-1,-2],[[68,[-1,-2]]],2,62],[[[69,[-1]]],[[69,[-1]]],9],[[[70,[-1]]],[[70,[-1]]],9],[[[71,[-1]]],[[71,[-1]]],9],[[[72,[-1]]],[[72,[-1]]],[]],[[[73,[-1]]],[[73,[-1]]],[]],[[[74,[-1]]],[[74,[-1]]],9],[75,75],[-1,[[76,[-1,-2]]],2,[77,78]],[-1,[[76,[-1,-2]]],2,[77,78]],[-1,[[79,[-1]]],2],[-1,[[79,[-1]]],2],[-1,[[80,[-1]]],2],[-1,[[80,[-1]]],2],[-1,[[81,[-1]]],[2,9]],[-1,[[81,[-1]]],[2,9]],[[],75],[[],[[72,[-1]]],[]],[-1,[[82,[-1]]],2],[-1,[[82,[-1]]],2],[[75,75],55],[-1,[[83,[-1,-2]]],2,[]],[-1,[[83,[-1,-2]]],2,[]],[[-1,-2],[[84,[-1,-3,-2]]],2,61,12],[[-1,-2],[[84,[-1,-3,-2]]],2,61,12],[[-1,-2],[[85,[-1,-3,-2]]],2,61,12],[[-1,-2],[[85,[-1,-3,-2]]],2,61,12],[[-1,-2],[[86,[-1,-3,-2]]],2,61,62],[[-1,-2],[[86,[-1,-3,-2]]],2,61,62],[-1,[[87,[-1]]],2],[-1,[[87,[-1]]],2],[[[88,[-1]],19],20,[]],[[[68,[-1,-2]],19],20,22,22],[[[76,[-1,-2]],19],20,22,22],[[[89,[-1,-2,-3]],19],20,22,22,22],[[[79,[-1]],19],20,[22,62]],[[[80,[-1]],19],20,22],[[[81,[-1]],19],20,22],[[[82,[-1]],19],20,22],[[[84,[-1,-2,-3]],19],20,[62,22],22,[]],[[[85,[-1,-2,-3]],19],20,22,22,[]],[[[87,[-1]],19],20,62],[[[90,[-1,-2,-3,-4]],19],20,22,22,22,[]],[[[67,[-1,-2,-3]],19],20,22,22,[]],[[[65,[-1,-2,-3]],19],20,22,22,[]],[[[91,[-1,-2,-3]],19],20,22,22,[]],[[[92,[-1]],19],20,22],[[[93,[-1]],19],20,22],[[[94,[-1,-2]],19],20,[],[]],[[[95,[-1,-2]],19],20,22,[]],[[[86,[-1,-2,-3]],19],20,[],[],[]],[[[96,[-1]],19],20,[22,2]],[[[97,[-1]],19],20,[22,2]],[[[98,[-1]],19],20,[22,62]],[[[99,[-1]],19],20,[62,22]],[[[100,[-1]],19],20,[62,22]],[[[101,[-1,-2]],19],20,[62,22],[]],[[[102,[-1,-2]],19],20,[62,22],2],[[[103,[-1]],19],20,22],[[[104,[-1,-2,-3]],19],20,[62,22],22,[]],[[[105,[-1]],19],20,22],[[[106,[-1,-2,-3]],19],20,[62,22],22,[]],[[[107,[-1,-2]],19],20,[62,22],[12,22]],[[[108,[-1,-2,-3]],19],20,22,22,[]],[[[109,[-1,-2]],19],20,[22,62],[22,62]],[[[110,[-1,-2,-3,-4]],19],20,[62,22],22,22,[]],[[[66,[-1,-2,-3]],19],20,22,22,[]],[[[83,[-1,-2]],19],20,[],[]],[[[111,[-1,-2]],19],20,[],[]],[[[112,[-1,-2]],19],20,[],[]],[[[113,[-1]],19],20,22],[[[114,[-1,-2]],19],20,[],[]],[[[115,[-1,-2]],19],20,[],[]],[[[116,[-1,-2,-3]],19],20,22,22,[]],[[[117,[-1]],19],20,[22,2]],[[[118,[-1,-2,-3]],19],20,22,22,[]],[[[119,[-1,-2,-3]],19],20,[120,22],22,[]],[[[121,[-1,-2,-3]],19],20,22,22,[]],[[[122,[-1]],19],20,[120,22]],[[[123,[-1,-2]],19],20,22,22],[[[124,[-1]],19],20,[22,120]],[[[125,[-1,-2,-3,-4]],19],20,22,22,22,[]],[[[126,[-1,-2,-3]],19],20,22,[],22],[[[127,[-1,-2,-3]],19],20,[120,22],22,[]],[[[128,[-1,-2,-3]],19],20,[120,22],22,[]],[[[69,[-1]],19],20,22],[[[70,[-1]],19],20,22],[[[71,[-1]],19],20,22],[[[72,[-1]],19],20,22],[[[129,[-1]],19],20,22],[[[73,[-1]],19],20,22],[[[74,[-1]],19],20,22],[[[130,[-1,-2]],19],20,22,22],[[75,19],20],[[[131,[-1,-2,-3,-4]],19],20,22,22,[],22],[[[132,[-1,-2,-3]],19],20,22,[],22],[[-1,-2,-3],[[90,[-1,-4,-2,-3]]],2,[],61,12],[[-1,-2,-3],[[90,[-1,-4,-2,-3]]],2,[],61,12],[[-1,-2],[[91,[-1,-3,-2]]],2,61,12],[[-1,-2],[[91,[-1,-3,-2]]],2,61,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[92,[-1]]],2],[-1,[[92,[-1]]],2],[[[82,[-1]]],-1,62],[[[84,[-1,-2,-3]]],-1,62,12,0],[[[85,[-1,-2,-3]]],-1,62,12,61],[[[87,[-1]]],-1,62],[[[92,[-1]]],-1,[]],[[[93,[-1]]],[[54,[-1]]],[62,57]],[[[94,[-1,-2]]],-1,[],[]],[[[95,[-1,-2]]],-1,[],[]],[[[86,[-1,-2,-3]]],-1,[],[],[]],[[[98,[-1]]],-1,62],[[[103,[-1]]],-1,62],[[[104,[-1,-2,-3]]],-1,62,12,61],[[[105,[-1]]],-1,62],[[[106,[-1,-2,-3]]],-1,62,12,61],[[[107,[-1,-2]]],-1,62,12],[[[108,[-1,-2,-3]]],-1,62,[],61],[[[109,[-1,-2]]],[[13,[-1,-2]]],62,62],[[[110,[-1,-2,-3,-4]]],-1,62,[],12,61],[[[66,[-1,-2,-3]]],-1,120,4,61],[[[83,[-1,-2]]],-1,[],[]],[[[111,[-1,-2]]],-1,[],[]],[[[112,[-1,-2]]],-1,[],[]],[[[113,[-1]]],-1,[]],[[[114,[-1,-2]]],-1,[],[]],[[[115,[-1,-2]]],-1,[],[]],[[[116,[-1,-2,-3]]],-1,120,4,61],[[[119,[-1,-2,-3]]],-1,120,[],[]],[[[121,[-1,-2,-3]]],-1,[],[],[]],[[[122,[-1]]],-1,120],[[[127,[-1,-2,-3]]],-1,120,4,61],[[[128,[-1,-2,-3]]],-1,120,4,61],[[[130,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[131,[-1,-2,-3,-4]]],[[13,[-1,-2]]],[],[],[],[]],[[[6,[[82,[-1]]]]],[[6,[-1]]],62],[[[6,[[84,[-1,-2,-3]]]]],[[6,[-1]]],62,12,0],[[[6,[[85,[-1,-2,-3]]]]],[[6,[-1]]],62,12,61],[[[6,[[87,[-1]]]]],[[6,[-1]]],62],[[[6,[[92,[-1]]]]],[[6,[-1]]],[]],[[[6,[[93,[-1]]]]],[[54,[[6,[-1]]]]],[62,57]],[[[6,[[94,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[95,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[86,[-1,-2,-3]]]]],[[6,[-1]]],[],[],[]],[[[6,[[98,[-1]]]]],[[6,[-1]]],62],[[[6,[[103,[-1]]]]],[[6,[-1]]],62],[[[6,[[104,[-1,-2,-3]]]]],[[6,[-1]]],62,12,61],[[[6,[[105,[-1]]]]],[[6,[-1]]],62],[[[6,[[106,[-1,-2,-3]]]]],[[6,[-1]]],62,12,61],[[[6,[[107,[-1,-2]]]]],[[6,[-1]]],62,12],[[[6,[[108,[-1,-2,-3]]]]],[[6,[-1]]],62,[],61],[[[6,[[109,[-1,-2]]]]],[[13,[[6,[-1]],[6,[-2]]]]],62,62],[[[6,[[110,[-1,-2,-3,-4]]]]],[[6,[-1]]],62,[],12,61],[[[6,[[66,[-1,-2,-3]]]]],[[6,[-1]]],120,4,61],[[[6,[[83,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[111,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[112,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[113,[-1]]]]],[[6,[-1]]],[]],[[[6,[[114,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[115,[-1,-2]]]]],[[6,[-1]]],[],[]],[[[6,[[116,[-1,-2,-3]]]]],[[6,[-1]]],120,4,61],[[[6,[[119,[-1,-2,-3]]]]],[[6,[-1]]],120,[],[]],[[[6,[[121,[-1,-2,-3]]]]],[[6,[-1]]],[],[],[]],[[[6,[[122,[-1]]]]],[[6,[-1]]],120],[[[6,[[127,[-1,-2,-3]]]]],[[6,[-1]]],120,4,61],[[[6,[[128,[-1,-2,-3]]]]],[[6,[-1]]],120,4,61],[[[6,[[130,[-1,-2]]]]],[[13,[[6,[-1]],[6,[-2]]]]],[],[]],[[[6,[[131,[-1,-2,-3,-4]]]]],[[13,[[6,[-1]],[6,[-2]]]]],[],[],[],[]],[[[82,[-1]]],-1,62],[[[84,[-1,-2,-3]]],-1,62,12,0],[[[85,[-1,-2,-3]]],-1,62,12,61],[[[87,[-1]]],-1,62],[[[92,[-1]]],-1,[]],[[[93,[-1]]],[[54,[-1]]],[62,57]],[[[94,[-1,-2]]],-1,[],[]],[[[95,[-1,-2]]],-1,[],[]],[[[86,[-1,-2,-3]]],-1,[],[],[]],[[[98,[-1]]],-1,62],[[[103,[-1]]],-1,62],[[[104,[-1,-2,-3]]],-1,62,12,61],[[[105,[-1]]],-1,62],[[[106,[-1,-2,-3]]],-1,62,12,61],[[[107,[-1,-2]]],-1,62,12],[[[108,[-1,-2,-3]]],-1,62,[],61],[[[109,[-1,-2]]],[[13,[-1,-2]]],62,62],[[[110,[-1,-2,-3,-4]]],-1,62,[],12,61],[[[66,[-1,-2,-3]]],-1,120,4,61],[[[83,[-1,-2]]],-1,[],[]],[[[111,[-1,-2]]],-1,[],[]],[[[112,[-1,-2]]],-1,[],[]],[[[113,[-1]]],-1,[]],[[[114,[-1,-2]]],-1,[],[]],[[[115,[-1,-2]]],-1,[],[]],[[[116,[-1,-2,-3]]],-1,120,4,61],[[[119,[-1,-2,-3]]],-1,120,[],[]],[[[121,[-1,-2,-3]]],-1,[],[],[]],[[[122,[-1]]],-1,120],[[[127,[-1,-2,-3]]],-1,120,4,61],[[[128,[-1,-2,-3]]],-1,120,4,61],[[[130,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[131,[-1,-2,-3,-4]]],[[13,[-1,-2]]],[],[],[],[]],[[75,-1],13,133],[[-1,-2],[[94,[-1,-2]]],2,61],[[-1,-2],[[94,[-1,-2]]],2,61],[[-1,-2],[[112,[-1,-2]]],2,61],[[-1,-2],[[112,[-1,-2]]],2,61],[[-1,-2],[[111,[-1,-2]]],2,61],[[-1,-2],[[111,[-1,-2]]],2,61],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[93,[-1]]],[2,57]],[-1,[[93,[-1]]],[2,57]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[82,[-1]]],-1,62],[[[84,[-1,-2,-3]]],-1,62,12,0],[[[85,[-1,-2,-3]]],-1,62,12,61],[[[87,[-1]]],-1,62],[[[92,[-1]]],-1,[]],[[[93,[-1]]],[[54,[-1]]],[62,57]],[[[94,[-1,-2]]],-1,[],[]],[[[95,[-1,-2]]],-1,[],[]],[[[86,[-1,-2,-3]]],-1,[],[],[]],[[[98,[-1]]],-1,62],[[[103,[-1]]],-1,62],[[[104,[-1,-2,-3]]],-1,62,12,61],[[[105,[-1]]],-1,62],[[[106,[-1,-2,-3]]],-1,62,12,61],[[[107,[-1,-2]]],-1,62,12],[[[108,[-1,-2,-3]]],-1,62,[],61],[[[109,[-1,-2]]],[[13,[-1,-2]]],62,62],[[[110,[-1,-2,-3,-4]]],-1,62,[],12,61],[[[66,[-1,-2,-3]]],-1,120,4,61],[[[83,[-1,-2]]],-1,[],[]],[[[111,[-1,-2]]],-1,[],[]],[[[112,[-1,-2]]],-1,[],[]],[[[113,[-1]]],-1,[]],[[[114,[-1,-2]]],-1,[],[]],[[[115,[-1,-2]]],-1,[],[]],[[[116,[-1,-2,-3]]],-1,120,4,61],[[[119,[-1,-2,-3]]],-1,120,[],[]],[[[121,[-1,-2,-3]]],-1,[],[],[]],[[[122,[-1]]],-1,120],[[[127,[-1,-2,-3]]],-1,120,4,61],[[[128,[-1,-2,-3]]],-1,120,4,61],[[[130,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[131,[-1,-2,-3,-4]]],[[13,[-1,-2]]],[],[],[],[]],[-1,[[113,[-1]]],2],[-1,[[113,[-1]]],2],[[[92,[-1]]],55,[]],[[[107,[-1,-2]]],55,62,12],[-1,55,[]],[[[68,[-1,-2]]],55,62,58],[[[76,[-1,-2]]],55,58,[77,78]],[[[89,[-1,-3,-5]]],55,58,[],[77,[78,[-2]]],[],[77,[78,[-4]]]],[[[79,[-1]]],55,58],[[[80,[-1]]],55,58],[[[81,[-1]]],55,[9,62]],[[[82,[-1]]],55,[62,58]],[[[84,[-1,-2,-3]]],55,[62,58],12,61],[[[85,[-1,-2,-3]]],55,[62,58],12,0],[[[87,[-1]]],55,62],[[[90,[-1,-2,-3,-4]]],55,62,12,[],61],[[[67,[-1,-2,-3]]],55,62,12,61],[[[65,[-1,-2,-3]]],55,62,12,61],[[[91,[-1,-2,-3]]],55,58,12,61],[[[92,[-1]]],55,62],[[[93,[-1]]],55,[62,57]],[[[94,[-1,-2]]],55,[],[]],[[[95,[-1,-2]]],55,58,0],[[[86,[-1,-2,-3]]],55,[],[],[]],[[[96,[-1]]],55,[2,58,57]],[[[97,[-1]]],55,[2,58,57]],[[[98,[-1]]],55,62],[[[99,[-1]]],55,62],[[[100,[-1]]],55,62],[[[101,[-1,-2]]],55,62,0],[[[102,[-1,-2]]],55,62,2],[[[103,[-1]]],55,58],[[[104,[-1,-2,-3]]],55,58,12,61],[[[105,[-1]]],55,58],[[[106,[-1,-2,-3]]],55,58,12,61],[[[107,[-1,-2]]],55,62,12],[[[108,[-1,-2,-3]]],55,58,12,61],[[[109,[-1,-2]]],55,62,62],[[[110,[-1,-2,-3,-4]]],55,58,[],12,61],[[[66,[-1,-2,-3]]],55,[120,58],4,61],[[[83,[-1,-2]]],55,[],[]],[[[111,[-1,-2]]],55,[],[]],[[[112,[-1,-2]]],55,[],[]],[[[113,[-1]]],55,[120,58]],[[[114,[-1,-2]]],55,[],[]],[[[115,[-1,-2]]],55,[],[]],[[[116,[-1,-2,-3]]],55,[120,58],4,61],[[[117,[-1]]],55,[2,120,57,58]],[[[119,[-1,-2,-3]]],55,[120,58],12,61],[[[121,[-1,-2,-3]]],55,[120,58],4,61],[[[122,[-1]]],55,[120,58]],[[[123,[-1,-2]]],55,[120,58],[77,78]],[[[125,[-1,-2,-3,-4]]],55,120,4,[],61],[[[127,[-1,-2,-3]]],55,[120,58],4,61],[[[128,[-1,-2,-3]]],55,[120,58],4,61],[[[70,[-1]]],55,9],[[[71,[-1]]],55,61],[[[72,[-1]]],55,[]],[[[129,[-1]]],55,12],[[[73,[-1]]],55,[]],[[[74,[-1]]],55,62],[[[130,[-1,-2]]],55,62,62],[[[131,[-1,-2,-3,-4]]],55,62,62,61,[]],[[[132,[-1,-2,-3]]],55,[],61,12],[-1,69,134],[-1,[[5,[-1,-2]]],2,62],[-1,[[5,[-1,-2]]],2,62],[[-1,-2],[[95,[-1,-2]]],2,61],[[-1,-2],[[95,[-1,-2]]],2,61],[[-1,-2],[[115,[-1,-2]]],2,61],[[-1,-2],[[115,[-1,-2]]],2,61],[[-1,-2],[[114,[-1,-2]]],2,61],[[-1,-2],[[114,[-1,-2]]],2,61],[-1,[[96,[-1]]],57],[-1,[[96,[-1]]],57],[[[6,[[98,[-1]]]],-2],[[101,[-1,-2]]],62,3],[[[6,[[98,[-1]]]],-2],[[102,[-1,-2]]],62,2],[-1,[[129,[-1]]],12],[[-1,-2],[[116,[-1,-3,-2]]],2,61,4],[[-1,-2],[[116,[-1,-3,-2]]],2,61,4],[[[6,[[98,[-1]]]]],[[99,[-1]]],62],[[[6,[[98,[-1]]]]],[[100,[-1]]],62],[-1,[[98,[-1]]],2],[-1,[[98,[-1]]],2],[[],[[73,[-1]]],[]],[[[6,[[76,[-1,-2]]]],59],[[60,[-2]]],62,[77,78]],[[[6,[[89,[-1,-3,-5]]]],59],[[60,[[13,[-3,-5]]]]],62,[],[77,[78,[-2]]],[],[77,[78,[-4]]]],[[[6,[[79,[-1]]]],59],60,62],[[[6,[[80,[-1]]]],59],60,62],[[[6,[[90,[-1,-2,-3,-4]]]],59],[[60,[-3]]],62,12,[],61],[[[6,[[67,[-1,-2,-3]]]],59],[[60,[55]]],62,12,61],[[[6,[[65,[-1,-2,-3]]]],59],[[60,[55]]],62,12,61],[[[6,[[91,[-1,-2,-3]]]],59],[[60,[13]]],62,12,61],[[[6,[[93,[-1]]]],59],60,[62,57]],[[[6,[[96,[-1]]]],59],60,[2,62,57]],[[[6,[[97,[-1]]]],59],60,[2,58,57]],[[[6,[[99,[-1]]]],59],60,62],[[[6,[[100,[-1]]]],59],60,62],[[[6,[[101,[-1,-2]]]],59],60,62,0],[[[6,[[102,[-1,-2]]]],59],60,62,2],[[[6,[[117,[-1]]]],59],60,[2,120,57]],[[[6,[[118,[-1,-2,-3]]]],59],60,120,4,61],[[[6,[[123,[-1,-2]]]],59],60,120,[77,78]],[[[6,[[124,[-1]]]],59],60,120],[[[6,[[125,[-1,-2,-3,-4]]]],59],60,120,4,[],61],[-1,[[88,[-1]]],61],[-1,[[74,[-1]]],62],[[[6,[-1]],59],[[60,[54]]],[]],[[[6,[[88,[-1]]]],59],[[60,[[54,[-2]]]]],61,[]],[[[6,[[68,[-1,-2]]]],59],[[60,[54]]],62,62],[[[6,[[81,[-1]]]],59],[[60,[54]]],[9,62]],[[[6,[[82,[-1]]]],59],[[60,[54]]],62],[[[6,[[84,[-1,-2,-3]]]],59],[[60,[54]]],62,12,0],[[[6,[[85,[-1,-2,-3]]]],59],[[60,[[54,[-4]]]]],62,12,0,[]],[[[6,[[87,[-1]]]],59],[[60,[54]]],62],[[[6,[[92,[-1]]]],59],[[60,[54]]],62],[[[6,[[94,[-1,-2]]]],59],[[60,[54]]],[],[]],[[[6,[[95,[-1,-2]]]],59],[[60,[54]]],62,0],[[[6,[[86,[-1,-2,-3]]]],59],[[60,[54]]],[],[],[]],[[[6,[[98,[-1]]]],59],[[60,[54]]],62],[[[6,[[103,[-1]]]],59],[[60,[54]]],62],[[[6,[[104,[-1,-2,-3]]]],59],[[60,[54]]],62,12,61],[[[6,[[105,[-1]]]],59],[[60,[54]]],62],[[[6,[[106,[-1,-2,-3]]]],59],[[60,[54]]],62,12,61],[[[6,[[107,[-1,-2]]]],59],[[60,[54]]],62,12],[[[6,[[108,[-1,-2,-3]]]],59],[[60,[54]]],62,12,61],[[[6,[[109,[-1,-2]]]],59],[[60,[54]]],62,62],[[[6,[[110,[-1,-2,-3,-4]]]],59],[[60,[[54,[-5]]]]],62,[],12,61,[]],[[[6,[[66,[-1,-2,-3]]]],59],[[60,[54]]],120,4,61],[[[6,[[83,[-1,-2]]]],59],[[60,[54]]],[],[]],[[[6,[[111,[-1,-2]]]],59],[[60,[54]]],[],[]],[[[6,[[112,[-1,-2]]]],59],[[60,[54]]],[],[]],[[[6,[[113,[-1]]]],59],[[60,[54]]],120],[[[6,[[114,[-1,-2]]]],59],[[60,[54]]],[],[]],[[[6,[[115,[-1,-2]]]],59],[[60,[54]]],[],[]],[[[6,[[116,[-1,-2,-3]]]],59],[[60,[54]]],120,4,61],[[[6,[[119,[-1,-2,-3]]]],59],[[60,[54]]],120,12,61],[[[6,[[121,[-1,-2,-3]]]],59],[[60,[54]]],120,4,61],[[[6,[[122,[-1]]]],59],[[60,[54]]],120],[[[6,[[126,[-1,-2,-3]]]],59],[[60,[54]]],[],61,4],[[[6,[[127,[-1,-2,-3]]]],59],[[60,[54]]],120,4,61],[[[6,[[128,[-1,-2,-3]]]],59],[[60,[54]]],120,4,61],[[[6,[[69,[-1]]]],59],[[60,[54]]],135],[[[6,[[70,[-1]]]],59],[[60,[54]]],9],[[[6,[[71,[-1]]]],59],[[60,[54]]],61],[[[6,[[72,[-1]]]],59],[[60,[54]]],[]],[[[6,[[129,[-1]]]],59],[[60,[54]]],12],[[[6,[[73,[-1]]]],59],[[60,[54]]],[]],[[[6,[[74,[-1]]]],59],[[60,[54]]],62],[[[6,[[130,[-1,-2]]]],59],[[60,[54]]],62,62],[[[6,[[131,[-1,-2,-3,-4]]]],59],[[60,[54]]],62,62,61,[]],[[[6,[[132,[-1,-2,-3]]]],59],[[60,[54]]],[],61,12],[[-1,59],[[60,[54]]],57],[[-1,59],[[60,[54]]],57],[[[6,[[98,[-1]]]],59],[[60,[54]]],62],[[[6,[[98,[-1]]]],59],[[60,[54]]],62],[-1,[[70,[-1]]],9],[-1,[[71,[-1]]],61],[-1,[[5,[-2,-1]]],2,62],[-1,[[5,[-2,-1]]],2,62],[[-1,-2,-3],[[110,[-1,-2,-4,-3]]],2,[],61,12],[[-1,-2,-3],[[110,[-1,-2,-4,-3]]],2,[],61,12],[[-1,-2],[[130,[-1,-2]]],62,62],[-1,[[97,[-1]]],[57,58]],[-1,[[97,[-1]]],[57,58]],[[-1,-2,-3],[[131,[-1,-2,-3,-4]]],62,62,61,77],[-1,[[13,[63,[54,[63]]]]],[]],[[[68,[-1,-2]]],[[13,[63,[54,[63]]]]],62,62],[[[81,[-1]]],[[13,[63,[54,[63]]]]],[9,62]],[[[82,[-1]]],[[13,[63,[54,[63]]]]],62],[[[84,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],62,12,0],[[[85,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],62,12,0],[[[87,[-1]]],[[13,[63,[54,[63]]]]],62],[[[92,[-1]]],[[13,[63,[54,[63]]]]],62],[[[94,[-1,-2]]],[[13,[63,[54,[63]]]]],[],[]],[[[95,[-1,-2]]],[[13,[63,[54,[63]]]]],62,0],[[[86,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],[],[],[]],[[[98,[-1]]],[[13,[63,[54,[63]]]]],62],[[[103,[-1]]],[[13,[63,[54,[63]]]]],62],[[[104,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],62,12,61],[[[105,[-1]]],[[13,[63,[54,[63]]]]],62],[[[106,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],62,12,61],[[[107,[-1,-2]]],[[13,[63,[54,[63]]]]],62,12],[[[108,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],62,12,61],[[[109,[-1,-2]]],[[13,[63,[54,[63]]]]],62,62],[[[110,[-1,-2,-3,-4]]],[[13,[63,[54,[63]]]]],62,[],12,61],[[[66,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],120,4,61],[[[83,[-1,-2]]],[[13,[63,[54,[63]]]]],[],[]],[[[111,[-1,-2]]],[[13,[63,[54,[63]]]]],[],[]],[[[112,[-1,-2]]],[[13,[63,[54,[63]]]]],[],[]],[[[113,[-1]]],[[13,[63,[54,[63]]]]],120],[[[114,[-1,-2]]],[[13,[63,[54,[63]]]]],[],[]],[[[115,[-1,-2]]],[[13,[63,[54,[63]]]]],[],[]],[[[116,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],120,4,61],[[[119,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],120,12,61],[[[121,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],120,4,61],[[[127,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],120,4,61],[[[128,[-1,-2,-3]]],[[13,[63,[54,[63]]]]],120,4,61],[[[69,[-1]]],[[13,[63,[54,[63]]]]],135],[[[70,[-1]]],[[13,[63,[54,[63]]]]],9],[[[71,[-1]]],[[13,[63,[54,[63]]]]],61],[[[72,[-1]]],[[13,[63,[54,[63]]]]],[]],[[[129,[-1]]],[[13,[63,[54,[63]]]]],12],[[[73,[-1]]],[[13,[63,[54,[63]]]]],[]],[[[74,[-1]]],[[13,[63,[54,[63]]]]],62],[[-1,63],[[103,[-1]]],2],[[-1,63],[[103,[-1]]],2],[[-1,-2],[[104,[-1,-3,-2]]],2,61,12],[[-1,-2],[[104,[-1,-3,-2]]],2,61,12],[[-1,63],[[105,[-1]]],2],[[-1,63],[[105,[-1]]],2],[[[107,[-1,-2]]],[[54,[-2]]],62,12],[[[107,[-1,-2]]],54,62,12],[[-1,-2],[[107,[-1,-2]]],2,12],[[-1,-2],[[107,[-1,-2]]],2,12],[[-1,-2],[[106,[-1,-3,-2]]],2,61,12],[[-1,-2],[[106,[-1,-3,-2]]],2,61,12],[[-1,-2],[[108,[-1,-3,-2]]],2,61,12],[[-1,-2],[[108,[-1,-3,-2]]],2,61,12],[75,75],[[-1,-2],[[0,[-1,-3,-2]]],2,61,12],[[-1,-2],[[0,[-1,-3,-2]]],2,61,12],[[-1,-2],[[0,[-1,-3,-2]]],2,61,12],[[-1,-2],[[0,[-1,-3,-2]]],2,61,12],[-1,[[123,[-1,-2]]],2,[77,78]],[-1,[[123,[-1,-2]]],2,[77,78]],[-1,[[124,[-1]]],2],[-1,[[124,[-1]]],2],[[-1,-2],[[119,[-1,-3,-2]]],2,61,12],[[-1,-2],[[119,[-1,-3,-2]]],2,61,12],[[-1,-2],[[121,[-1,-3,-2]]],2,61,4],[[-1,-2],[[121,[-1,-3,-2]]],2,61,4],[-1,[[122,[-1]]],2],[-1,[[122,[-1]]],2],[[-1,-2,-3],[[125,[-1,-4,-2,-3]]],2,[],61,4],[[-1,-2,-3],[[125,[-1,-4,-2,-3]]],2,[],61,4],[[-1,-2],[[118,[-1,-3,-2]]],2,61,4],[[-1,-2],[[118,[-1,-3,-2]]],2,61,4],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[117,[-1]]],57],[-1,[[117,[-1]]],57],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[[6,[-1]],59],[[60,[[54,[14]]]]],[]],[[-1,59],[[60,[[54,[14]]]]],57],[[-1,59],[[60,[[54,[14]]]]],57],[[-1,-2],[[127,[-1,-3,-2]]],2,61,4],[[-1,-2],[[127,[-1,-3,-2]]],2,61,4],[[-1,-2],[[128,[-1,-3,-2]]],2,61,4],[[-1,-2],[[128,[-1,-3,-2]]],2,61,4],[[-1,-2],[[126,[-1,-2,-3]]],[],61,4],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[-1,-2],[[132,[-1,-2,-3]]],[],61,12],[-1,[[89,[-1,-3,-5]]],[2,62],[],[77,[78,[-2]]],[],[77,[78,[-4]]]],[-1,[[89,[-1,-3,-5]]],[2,62],[],[77,[78,[-2]]],[],[77,[78,[-4]]]],[[-1,-2],[[109,[-1,-2]]],2,62],[[-1,-2],[[109,[-1,-2]]],2,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],136],[12,13],[[[137,[-1]]],13,[]],[[138,19],[[14,[13,139]]]],[[138,19],[[14,[13,139]]]],[[[137,[-1]],19],[[14,[13,139]]],[]],[[[140,[-1]],19],[[14,[13,139]]],[]],[[136,19],[[14,[13,139]]]],[-1,-1,[]],[-1,-1,[]],[[[140,[-1]]],[[137,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[137,[-1]]],[[140,[-1]]],[]],[-1,12,[]],[138,55],[-2,[[137,[-1]]],[],[[141,[-1]]]],[-2,[[140,[-1]]],[],[[141,[-1]],142]],[[],136],[[],143],[[],143],[[[6,[[137,[-1]]]],59],[[60,[-1]]],[]],[[[6,[[140,[-1]]]],59],[[60,[-1]]],[]],[[136,143],13],[[],138],[[-1,[137,[13]]],[[14,[13,138]]],[]],[[-1,[140,[13]]],[[14,[13,138]]],[]],[-1,[[14,[13,138]]],[]],[-1,[[14,[13,138]]],[]],[136,[[54,[143]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[6,[-1]],59],60,[]],[[[6,[-1]],59],60,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[136,13]],"c":[],"p":[[3,"AndThen",14],[8,"Sized",1844],[8,"FnOnce",1845],[8,"TryFuture",14],[4,"Either",14],[3,"Pin",1846],[3,"Pending",14],[3,"OptionFuture",14],[8,"Clone",1847],[3,"PollImmediate",14],[3,"Ready",14],[8,"Future",1848],[15,"tuple"],[4,"Result",1849],[3,"ErrInto",14],[3,"Flatten",14],[3,"FlattenStream",14],[3,"PollFn",14],[3,"Formatter",1850],[6,"Result",1850],[3,"Fuse",14],[8,"Debug",1850],[3,"Map",14],[3,"IntoStream",14],[3,"MapInto",14],[3,"Then",14],[3,"Inspect",14],[3,"NeverError",14],[3,"UnitError",14],[3,"IntoFuture",14],[3,"TryFlatten",14],[3,"TryFlattenStream",14],[3,"OrElse",14],[3,"OkInto",14],[3,"InspectOk",14],[3,"InspectErr",14],[3,"MapOk",14],[3,"MapErr",14],[3,"MapOkOrElse",14],[3,"UnwrapOrElse",14],[3,"Lazy",14],[4,"MaybeDone",14],[4,"TryMaybeDone",14],[3,"Join",14],[3,"Join3",14],[3,"Join4",14],[3,"Join5",14],[3,"Select",14],[3,"TryJoin",14],[3,"TryJoin3",14],[3,"TryJoin4",14],[3,"TryJoin5",14],[3,"TrySelect",14],[4,"Option",1851],[15,"bool"],[8,"FusedFuture",14],[8,"Unpin",1844],[8,"FusedStream",667],[3,"Context",1852],[4,"Poll",1853],[8,"FnMut",1845],[8,"Stream",667],[15,"usize"],[3,"TypeId",1854],[3,"All",667],[3,"AndThen",667],[3,"Any",667],[3,"Chain",667],[3,"Iter",667],[3,"Repeat",667],[3,"RepeatWith",667],[3,"Empty",667],[3,"Pending",667],[3,"PollImmediate",667],[4,"PollNext",667],[3,"Collect",667],[8,"Default",1855],[8,"Extend",1856],[3,"Concat",667],[3,"Count",667],[3,"Cycle",667],[3,"Enumerate",667],[3,"ErrInto",667],[3,"Filter",667],[3,"FilterMap",667],[3,"FlatMap",667],[3,"Flatten",667],[3,"PollFn",667],[3,"Unzip",667],[3,"Fold",667],[3,"ForEach",667],[3,"Fuse",667],[3,"StreamFuture",667],[3,"Inspect",667],[3,"Map",667],[3,"Next",667],[3,"SelectNextSome",667],[3,"Peekable",667],[3,"Peek",667],[3,"PeekMut",667],[3,"NextIf",667],[3,"NextIfEq",667],[3,"Skip",667],[3,"SkipWhile",667],[3,"Take",667],[3,"TakeWhile",667],[3,"TakeUntil",667],[3,"Then",667],[3,"Zip",667],[3,"Scan",667],[3,"InspectOk",667],[3,"InspectErr",667],[3,"IntoStream",667],[3,"MapOk",667],[3,"MapErr",667],[3,"OrElse",667],[3,"TryNext",667],[3,"TryForEach",667],[3,"TryFilter",667],[8,"TryStream",667],[3,"TryFilterMap",667],[3,"TryFlatten",667],[3,"TryCollect",667],[3,"TryConcat",667],[3,"TryFold",667],[3,"TryUnfold",667],[3,"TrySkipWhile",667],[3,"TryTakeWhile",667],[3,"Once",667],[3,"Select",667],[3,"SelectWithStrategy",667],[3,"Unfold",667],[8,"Hasher",1857],[8,"IntoIterator",1856],[8,"Iterator",1858],[3,"AtomicWaker",1771],[3,"LocalFutureObj",1771],[3,"SpawnError",1771],[3,"Error",1850],[3,"FutureObj",1771],[8,"UnsafeFutureObj",1771],[8,"Send",1844],[3,"Waker",1852],[8,"TryFutureExt",14],[8,"FutureExt",14],[8,"StreamExt",667],[8,"TryStreamExt",667],[8,"LocalSpawn",1771],[8,"Spawn",1771]],"b":[[395,"impl-FusedFuture-for-Either%3CA,+B%3E"],[396,"impl-FusedStream-for-Either%3CA,+B%3E"],[1796,"impl-Display-for-SpawnError"],[1797,"impl-Debug-for-SpawnError"]]},\
"hash32":{"doc":"32-bit hashing algorithms","t":"DDIDLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLL","n":["BuildHasherDefault","FnvHasher","Hasher","Murmur3Hasher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_hasher","clone","default","default","default","eq","finish","finish","finish32","finish32","finish32","fmt","from","from","from","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write"],"q":[[0,"hash32"],[40,"core::default"],[41,"core::hash"],[42,"core::fmt"],[43,"core::fmt"],[44,"core::any"]],"d":["A copy of <code>core::hash::BuildHasherDefault</code>, but with a const …","32-bit Fowler-Noll-Vo hasher","An extension of core::hash::Hasher for hashers which use …","32-bit MurmurHash3 hasher","","","","","","","","","","","","","","","The equivalent of <code>core::hash::Hasher.finish</code> for 32-bit …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>const</code> constructor","","","","","","","","","","",""],"i":[0,0,0,0,4,5,1,4,5,1,1,1,4,5,1,1,4,5,16,4,5,1,4,5,1,4,5,1,1,4,5,1,4,5,1,4,5,1,4,5],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[],[2,3]],[[[1,[-1]]],[[1,[-1]]],[]],[[],4],[[],5],[[],[[1,[-1]]],[]],[[[1,[-1]],[1,[-1]]],6,[]],[4,7],[5,7],[-1,8,[]],[4,8],[5,8],[[[1,[-1]],9],10,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[4,[14,[13]]],15],[[5,[14,[13]]],15]],"c":[],"p":[[3,"BuildHasherDefault",0],[8,"Default",40],[8,"Hasher",41],[3,"FnvHasher",0],[3,"Murmur3Hasher",0],[15,"bool"],[15,"u64"],[15,"u32"],[3,"Formatter",42],[6,"Result",42],[4,"Result",43],[3,"TypeId",44],[15,"u8"],[15,"slice"],[15,"tuple"],[8,"Hasher",0]],"b":[]},\
"heapless":{"doc":"<code>static</code> friendly data structures that don’t require …","t":"CCDEGGDDDDDDDDDDNDDCDNDDLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGGGGGLLLLLLLLLLLDDIDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BinaryHeap","Bucket","Deque","Entry","FnvIndexMap","FnvIndexSet","HistoryBuffer","IndexMap","IndexMapIter","IndexMapIterMut","IndexMapKeys","IndexMapValues","IndexMapValuesMut","IndexSet","IndexSetIter","LinearMap","Occupied","OccupiedEntry","OldestOrdered","Pos","String","Vacant","VacantEntry","Vec","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slices","as_slices","as_str","back","back_mut","binary_heap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clear_with","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains_key","contains_key","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","difference","drop","drop","drop","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_slice","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_str","from_utf8","from_utf8_unchecked","front","front_mut","get","get","get","get_mut","get_mut","get_mut","hash","hash","index","index","index_mut","index_mut","insert","insert","insert","insert","insert","insert","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_array","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_full","is_full","is_subset","is_superset","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","key","key","keys","keys","last","last","last_mut","len","len","len","len","len","mpmc","ne","ne","ne","new","new","new","new","new","new","new","new_with","next","next","next","next","next","next","next","oldest_ordered","partial_cmp","partial_cmp","pop","pop","pop_back","pop_back_unchecked","pop_front","pop_front_unchecked","pop_unchecked","push","push","push_back","push_back_unchecked","push_front","push_front_unchecked","push_str","push_unchecked","recent","remove","remove","remove","remove","remove","remove","remove_entry","resize","resize_default","retain","retain","retain","retain_mut","set_len","sorted_linked_list","spsc","starts_with","swap_remove","swap_remove","swap_remove_unchecked","symmetric_difference","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values","values_mut","values_mut","write","write_char","write_str","write_str","BinaryHeap","Kind","Max","Min","PeekMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","default","deref","deref_mut","drop","fmt","from","from","from","from","into","into","into","into","into_iter","into_vec","is_empty","iter","iter_mut","len","new","peek","peek_mut","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","MpMcQueue","Q16","Q2","Q32","Q4","Q64","Q8","borrow","borrow_mut","default","dequeue","enqueue","from","into","new","try_from","try_into","type_id","FindMut","Iter","Kind","LinkedIndexU16","LinkedIndexU8","LinkedIndexUsize","Max","Min","Node","SortedLinkedList","SortedLinkedListIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","deref","deref_mut","drop","drop","eq","eq","eq","find_mut","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_full","iter","new_u16","new_u8","new_usize","next","partial_cmp","partial_cmp","partial_cmp","peek","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Consumer","Iter","IterMut","Producer","Queue","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clone","clone","default","dequeue","dequeue","dequeue_unchecked","dequeue_unchecked","drop","enqueue","enqueue","enqueue_unchecked","enqueue_unchecked","eq","fmt","from","from","from","from","from","hash","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_full","iter","iter_mut","len","len","len","new","next","next","next_back","next_back","peek","peek","ready","ready","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"heapless"],[410,"heapless::binary_heap"],[465,"heapless::mpmc"],[483,"heapless::sorted_linked_list"],[593,"heapless::spsc"],[672,"core::option"],[673,"core::cmp"],[674,"core::marker"],[675,"core::clone"],[676,"core::cmp"],[677,"core::borrow"],[678,"core::hash"],[679,"core::cmp"],[680,"core::result"],[681,"core::fmt"],[682,"core::fmt"],[683,"core::hash"],[684,"hash32"],[685,"core::cmp"],[686,"core::any"],[687,"core::fmt"],[688,"core::slice::iter"]],"d":["","","A fixed capacity double-ended queue.","A view into an entry in the map","A <code>IndexMap</code> using the default FNV hasher","A <code>IndexSet</code> using the default FNV hasher. A list of all …","A “history buffer”, similar to a write-only ring …","Fixed capacity <code>IndexMap</code>","An iterator over the items of a <code>IndexMap</code>.","A mutable iterator over the items of a <code>IndexMap</code>.","An iterator over the keys of a <code>IndexMap</code>.","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","Fixed capacity <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","The entry corresponding to the key <code>K</code> exists in the map","An occupied entry which can be manipulated","An iterator on the underlying buffer ordered from oldest …","","A fixed capacity <code>String</code>","The entry corresponding to the key <code>K</code> does not exist in the …","A view into an empty slot in the underlying map","A fixed capacity <code>Vec</code>","","","Returns a raw pointer to the vector’s buffer, which may …","Extracts a mutable slice containing the entire vector.","Returns a pair of mutable slices which contain, in order, …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Returns a raw pointer to the vector’s buffer.","","","","","","Returns the array slice backing the buffer, without …","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire string.","Provides a reference to the back element, or None if the …","Provides a mutable reference to the back element, or None …","A priority queue implemented with a binary heap.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the maximum number of elements the deque can hold.","Returns the capacity of the buffer, which is the length of …","Returns the number of elements the map can hold","Returns the number of elements the set can hold","Returns the number of elements that the map can hold","Returns the maximum number of elements the String can hold","Returns the maximum number of elements the vector can hold.","Clears the deque, removing all values.","Clears the buffer, replacing every element with the …","Remove all key-value pairs in the map, while preserving …","Clears the set, removing all values.","Clears the map, removing all key-value pairs","Truncates this <code>String</code>, removing all contents.","Clears the vector, removing all values.","Clears the buffer, replacing every element with the given …","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns true if the map contains a value for the specified …","Returns true if the map contains a value for the specified …","","","","","","","","","","","","","Visits the values representing the difference, i.e. the …","","","","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","Returns an entry for the corresponding key","","","","","","","","","","","","","","","","","","","","","","Extends the vec from an iterator.","Clones and writes all elements in a slice to the buffer.","Clones and appends all elements in a slice to the <code>Vec</code>.","Get the first key-value pair","Get the first value","Get the first key-value pair, with mutable access to the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Constructs a new vector with a fixed capacity of <code>N</code> and …","","Convert UTF-8 bytes into a <code>String</code>.","Convert UTF-8 bytes into a <code>String</code>, without checking that …","Provides a reference to the front element, or None if the …","Provides a mutable reference to the front element, or None …","Gets a reference to the value associated with this entry","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key","Gets a mutable reference to the value associated with this …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","","","","","","","Overwrites the underlying map’s value with this entry’…","Inserts this entry into to underlying map, yields a …","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts a key-value pair into the map.","Inserts an element at position <code>index</code> within the vector, …","Visits the values representing the intersection, i.e. the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contents of the vector as an array of length <code>M</code> …","Converts a <code>String</code> into a byte vector.","","","","","","","","","","","","","","","","","","","Consumes this entry to yield to key associated with it","Consumes this entry and yields a reference to the …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns whether the deque is empty.","Returns true if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns true if the map contains no elements","Returns true if the vec is empty","Returns whether the deque is full (i.e. if …","Returns true if the vec is full","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …","Examples","Returns an iterator over the deque.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the values of the set, in …","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator that allows modifying each value.","Return an iterator over the key-value pairs of the map, in …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key that this entity corresponds to","Get the key associated with this entry","Return an iterator over the keys of the map, in insertion …","An iterator visiting all keys in arbitrary order","Get the last key-value pair","Get the last value","Get the last key-value pair, with mutable access to the …","Returns the number of elements currently in the deque.","Returns the current fill level of the buffer.","Return the number of key-value pairs in the map.","Returns the number of elements in the set.","Returns the number of elements in this map","A fixed capacity Multiple-Producer Multiple-Consumer …","","","","Constructs a new, empty deque with a fixed capacity of <code>N</code>","Constructs a new history buffer.","Creates an empty <code>IndexMap</code>.","Creates an empty <code>IndexSet</code>","Creates an empty <code>LinearMap</code>","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new history buffer, where every element is …","","","","","","","","Returns an iterator for iterating over the buffer from …","","","Removes the last character from the string buffer and …","Removes the last element from a vector and returns it, or …","Removes the item from the back of the deque and returns …","Removes an item from the back of the deque and returns it, …","Removes the item from the front of the deque and returns …","Removes an item from the front of the deque and returns …","Removes the last element from a vector and returns it","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the front of the deque","Appends an <code>item</code> to the front of the deque","Appends a given string slice onto the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Returns a reference to the most recently written value.","Removes this entry from the map and yields its value","Same as <code>swap_remove</code>","Removes a value from the set. Returns <code>true</code> if the value …","Removes a key from the map, returning the value at the key …","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Removes and returns the element at position <code>index</code> within …","Removes this entry from the map and yields its …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","A fixed sorted priority linked list, similar to <code>BinaryHeap</code> …","Fixed capacity Single Producer Single Consumer (SPSC) queue","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Remove the key-value pair equivalent to <code>key</code> and return its …","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Visits the values representing the symmetric difference, …","Shortens this <code>String</code> to the specified length.","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e. all the …","Return an iterator over the values of the map, in …","An iterator visiting all values in arbitrary order","Return an iterator over mutable references to the the …","An iterator visiting all values mutably in arbitrary order","Writes an element to the buffer, overwriting the oldest …","","","","A priority queue implemented with a binary heap.","The binary heap kind: min-heap or max-heap","Max-heap","Min-heap","Structure wrapping a mutable reference to the greatest …","","","","","","","","","Returns the capacity of the binary heap.","Drops all items from the binary heap.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …","Checks if the binary heap is empty.","Returns an iterator visiting all values in the underlying …","Returns a mutable iterator visiting all values in the …","Returns the length of the binary heap.","Creates an empty BinaryHeap as a $K-heap.","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the peeked value from the heap and returns it.","Removes the <em>top</em> (greatest if max-heap, smallest if …","Pushes an item onto the binary heap.","Pushes an item onto the binary heap without first checking …","","","","","","","","","","","","","MPMC queue with a capacity for N elements N must be a …","MPMC queue with a capability for 16 elements.","MPMC queue with a capability for 2 elements.","MPMC queue with a capability for 32 elements.","MPMC queue with a capability for 4 elements.","MPMC queue with a capability for 64 elements.","MPMC queue with a capability for 8 elements.","","","","Returns the item in the front of the queue, or <code>None</code> if the …","Adds an <code>item</code> to the end of the queue","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates an empty queue","","","","Comes from <code>SortedLinkedList::find_mut</code>.","Iterator for the linked list.","The linked list kind: min-list or max-list","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Marker for Max sorted <code>SortedLinkedList</code>.","Marker for Min sorted <code>SortedLinkedList</code>.","A node in the <code>SortedLinkedList</code>.","The linked list.","Trait for defining an index for the linked list, never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find an element in the list that can be changed and …","This will resort the element into the correct position in …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the linked list is empty.","Checks if the linked list is full.","Get an iterator over the sorted list.","Create a new linked list.","Create a new linked list.","Create a new linked list.","","","","","Peek at the first element.","Pops the first element in the list.","This will pop the element from the list.","Pop an element from the list without checking so the list …","Pushes an element to the linked list and sorts it into …","Pushes a value onto the list without checking if the list …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A queue “consumer”; it can dequeue items from the queue","An iterator over the items of a queue","A mutable iterator over the items of a queue","A queue “producer”; it can enqueue items into the queue","A statically allocated single producer single consumer …","","","","","","","","","","","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","Returns the maximum number of elements the queue can hold","","","","Returns the item in the front of the queue, or <code>None</code> if the …","Returns the item in the front of the queue, or <code>None</code> if the …","Returns the item in the front of the queue, without …","Returns the item in the front of the queue, without …","","Adds an <code>item</code> to the end of the queue","Adds an <code>item</code> to the end of the queue, returns back the <code>item</code>…","Adds an <code>item</code> to the end of the queue, without checking if …","Adds an <code>item</code> to the end of the queue, without checking if …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if the queue is empty","Returns <code>true</code> if the queue is full","Iterates from the front of the queue to the back","Returns an iterator that allows modifying each value","Returns the number of elements in the queue","Returns the number of elements in the queue","Returns the number of elements in the queue","Creates an empty queue with a fixed capacity of <code>N - 1</code>","","","","","Returns a reference to the item in the front of the queue …","Returns the item in the front of the queue without …","Returns if there are any items to dequeue. When this …","Returns if there is any space to enqueue a new item. When …","Splits a queue into producer and consumer endpoints","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,29,0,0,1,1,1,1,3,5,5,1,8,5,5,1,1,8,1,3,8,5,3,3,0,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,1,19,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,1,19,3,8,11,12,13,5,1,3,8,11,12,13,5,1,8,3,8,11,17,12,18,13,5,1,19,5,1,12,11,13,3,8,11,12,13,5,1,8,5,1,5,1,12,3,8,1,1,11,8,11,12,13,5,5,5,1,1,1,1,1,1,8,8,11,11,12,12,1,1,1,8,1,11,12,11,3,8,11,12,13,5,5,1,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,1,19,11,12,13,5,5,5,1,1,5,5,5,3,3,37,11,13,37,11,13,5,1,11,13,11,13,37,39,11,12,13,1,12,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,1,19,1,5,3,3,3,11,11,11,17,40,41,44,45,12,18,13,1,1,1,19,39,37,12,3,11,12,13,1,3,1,12,12,3,11,12,13,3,11,13,37,39,11,13,11,12,11,3,8,11,12,13,0,5,5,5,3,8,11,12,13,5,1,8,17,40,41,44,45,18,19,8,5,1,5,1,3,3,3,3,1,5,1,3,3,3,3,5,1,8,37,11,12,13,5,1,37,1,1,11,12,1,1,1,0,0,1,11,1,1,12,5,1,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,5,5,5,5,5,5,5,5,5,1,1,19,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,1,19,3,8,29,37,39,11,17,40,41,44,45,12,18,13,5,1,19,12,11,13,11,13,8,5,5,1,0,0,0,0,0,77,78,58,60,77,78,58,60,58,58,58,58,60,60,60,58,77,78,58,60,77,78,58,60,58,58,58,58,58,58,58,58,58,58,60,58,58,58,77,78,58,60,77,78,58,60,77,78,58,60,0,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,79,80,81,70,71,67,64,65,66,79,80,81,70,71,67,64,65,66,64,65,66,64,65,66,67,67,70,67,64,65,66,70,67,70,64,65,66,79,80,81,70,71,67,64,65,66,79,80,81,70,71,67,64,65,66,71,70,70,70,70,70,70,71,64,65,66,70,70,67,70,70,70,79,80,81,70,71,67,64,65,66,79,80,81,70,71,67,64,65,66,79,80,81,70,71,67,64,65,66,0,0,0,0,0,72,75,76,73,74,72,75,76,73,74,72,73,74,72,75,72,72,73,72,73,72,72,74,72,74,72,72,72,75,76,73,74,72,72,75,76,73,74,72,72,75,76,72,72,72,72,72,73,74,72,75,76,75,76,72,73,73,74,72,72,75,76,73,74,72,75,76,73,74,72,75,76,73,74],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[[1,[-1]]],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[3,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[5,6],[5,[[1,[7]]]],[[[1,[-1]]],[],[]],[[[8,[-1]]],[[2,[-1]]],[]],[5,6],[5,[[2,[7]]]],[[[1,[-1]]],[[1,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[8,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[3,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[[[8,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[5,6],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],10,[]],[[[8,[-1]]],10,[]],[[[11,[-1,-2,-3]]],10,[],[],[]],[[[12,[-1,-2]]],10,[],[]],[[[13,[-1,-2]]],10,14,[]],[5,10],[[[1,[-1]]],10,[]],[[[3,[-1]]],4,[]],[[[8,[-1]]],4,[]],[[[11,[-1,-2,-3]]],4,[],[],[]],[[[12,[-1,-2]]],4,[],[]],[[[13,[-1,-2]]],4,14,[]],[5,4],[[[1,[-1]]],4,[]],[[[8,[-1]],-1],4,[15,16]],[[[3,[-1]]],[[3,[-1]]],16],[[[8,[-1]]],[[8,[-1]]],16],[[[11,[-1,-2,-3]]],[[11,[-1,-2,-3]]],16,16,16],[[[17,[-1,-2]]],[[17,[-1,-2]]],[],[]],[[[12,[-1,-2]]],[[12,[-1,-2]]],16,16],[[[18,[-1]]],[[18,[-1]]],[]],[[[13,[-1,-2]]],[[13,[-1,-2]]],[14,16],16],[5,5],[[[1,[-1]]],[[1,[-1]]],16],[[[19,[-1]]],[[19,[-1]]],16],[[5,5],20],[[[1,[-1]],[1,[-1]]],20,21],[[[12,[-2,-3]],-1],22,[23,14,24],[[25,[-1]],14,24],26],[[[11,[-2,-3,-4]],-1],22,[23,14,24],[[25,[-1]],14,24],[],26],[[[13,[-1,-2]],-1],22,14,[]],[[],[[3,[-1]]],[]],[[],[[8,[-1]]],[]],[[],[[11,[-1,-2,-3]]],[],[],27],[[],[[12,[-1,-2]]],[],27],[[],[[13,[-1,-2]]],14,[]],[[],5],[[],[[1,[-1]]],[]],[[[8,[-1]]],[[2,[-1]]],[]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[[[12,[-1,-2]],[12,[-1,-3]]],[[0,[-1,-3]]],[14,24],26,26],[[[3,[-1]]],4,[]],[[[8,[-1]]],4,[]],[[[1,[-1]]],4,[]],[[[1,[-1]],[2,[-1]]],22,28],[[[11,[-1,-2,-3]],-1],[[29,[-1,-2]]],[14,24],[],26],[[[8,[-1]],[8,[-1]]],22,28],[[[11,[-1,-2,-3]],[11,[-1,-2,-4]]],22,[14,24],14,26,26],[[[12,[-1,-2]],[12,[-1,-3]]],22,[14,24],26,26],[[[13,[-1,-2]],[13,[-1,-2]]],22,14,28],[[5,6],22],[[5,5],22],[[5,6],22],[[[1,[-2]],[30,[-1]]],22,[],[[28,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[28,[-1]]]],[[[1,[-2]],[1,[-1]]],22,[],[[28,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[28,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[28,[-1]]]],[[[1,[-2]],[30,[-1]]],22,[],[[28,[-1]]]],[[[8,[-1]],-2],4,[],31],[[[8,[-1]],-2],4,16,31],[[[11,[-1,-2,-3]],-4],4,[14,24],[],26,31],[[[11,[-1,-2,-3]],-4],4,[14,24,15],15,26,31],[[[12,[-1,-2]],-3],4,[14,24,15],26,31],[[[12,[-1,-2]],-3],4,[14,24],26,31],[[[1,[-1]],-2],4,15,31],[[[1,[-1]],-2],4,[],31],[[[1,[-1]],-2],4,[],31],[[[8,[-1]],[2,[-1]]],4,16],[[[1,[-1]],[2,[-1]]],[[32,[4,4]]],16],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]]],[[9,[-1]]],[],[]],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[],[],[]],[[[3,[-1]],33],34,35],[[[8,[-1]],33],34,35],[[[11,[-1,-2,-3]],33],34,35,35,[]],[[[12,[-1,-2]],33],34,35,[]],[[[13,[-1,-2]],33],34,[14,35],35],[[5,33],34],[[5,33],34],[[[1,[-1]],33],34,35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[11,[-2,-3,-4]]],31,[14,24],[],[26,27]],[-1,[[12,[-2,-3]]],31,[14,24],[26,27]],[-1,[[13,[-2,-3]]],31,14,[]],[-1,5,31],[-1,5,31],[-1,5,31],[-1,[[1,[-2]]],31,[]],[[[2,[-1]]],[[32,[[1,[-1]],4]]],16],[6,[[32,[5]]]],[[[1,[7]]],[[32,[5,36]]]],[[[1,[7]]],5],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[37,[-1,-2]]],-2,[14,24],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,24,14],[[25,[-1]],14,24],[],26],[[[13,[-2,-3]],-1],[[9,[-3]]],[14,23],[[25,[-1]],14],[]],[[[37,[-1,-2]]],-2,[14,24],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,24,14],[[25,[-1]],14,24],[],26],[[[13,[-2,-3]],-1],[[9,[-3]]],[14,23],[[25,[-1]],14],[]],[[5,-1],4,38],[[[1,[-1]],-2],4,24,38],[[[11,[-2,-3,-4]],-1],-3,[23,14,24],[14,24,[25,[-1]]],[],26],[[[13,[-2,-3]],-1],-3,[14,23],[[25,[-1]],14],[]],[[[11,[-2,-3,-4]],-1],-3,[23,14,24],[14,24,[25,[-1]]],[],26],[[[13,[-2,-3]],-1],-3,[14,23],[[25,[-1]],14],[]],[[[37,[-1,-2]],-2],-2,[14,24],[]],[[[39,[-1,-2]],-2],[[32,[-2,-2]]],[14,24],[]],[[[11,[-1,-2,-3]],-1,-2],[[32,[[9,[-2]],[4,[-1,-2]]]]],[14,24],[],26],[[[12,[-1,-2]],-1],[[32,[22,-1]]],[14,24],26],[[[13,[-1,-2]],-1,-2],[[32,[[9,[-2]],[4,[-1,-2]]]]],14,[]],[[[1,[-1]],10,-1],[[32,[4,-1]]],[]],[[[12,[-1,-2]],[12,[-1,-3]]],[[0,[-1,-3]]],[14,24],26,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[32,[[30,[-1]],[1,[-1]]]]],[]],[5,[[1,[7]]]],[[[3,[-1]]],[],[]],[[[3,[-1]]],[],[]],[[[3,[-1]]],[],[]],[[[11,[-1,-2,-3]]],[],[],[],[]],[[[11,[-1,-2,-3]]],[],[],[],[]],[[[11,[-1,-2,-3]]],[],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1,-2]]],[],[14,24],26],[-1,-2,[],[]],[[[13,[-1,-2]]],[],14,[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[-1,-2,[],[]],[[[39,[-1,-2]]],-1,[14,24],[]],[[[37,[-1,-2]]],-2,[14,24],[]],[[[12,[-1,-2]],[12,[-1,-3]]],22,[14,24],26,26],[[[3,[-1]]],22,[]],[[[11,[-1,-2,-3]]],22,[],[],[]],[[[12,[-1,-2]]],22,[],[]],[[[13,[-1,-2]]],22,14,[]],[[[1,[-1]]],22,[]],[[[3,[-1]]],22,[]],[[[1,[-1]]],22,[]],[[[12,[-1,-2]],[12,[-1,-3]]],22,[14,24],26,26],[[[12,[-1,-2]],[12,[-1,-3]]],22,[14,24],26,26],[[[3,[-1]]],[[0,[-1]]],[]],[[[11,[-1,-2,-3]]],[[17,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[[18,[-1]]],[],[]],[[[13,[-1,-2]]],[[0,[-1,-2]]],14,[]],[[[3,[-1]]],[[0,[-1]]],[]],[[[11,[-1,-2,-3]]],[[40,[-1,-2]]],[],[],[]],[[[13,[-1,-2]]],[[0,[-1,-2]]],14,[]],[[[37,[-1,-2]]],-1,[14,24],[]],[[[39,[-1,-2]]],-1,[14,24],[]],[[[11,[-1,-2,-3]]],[[41,[-1,-2]]],[],[],[]],[[[13,[-1,-2]]],[[0,[42]]],14,[]],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]]],[[9,[-1]]],[],[]],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[],[],[]],[[[3,[-1]]],10,[]],[[[8,[-1]]],10,[]],[[[11,[-1,-2,-3]]],10,[],[],[]],[[[12,[-1,-2]]],10,[],[]],[[[13,[-1,-2]]],10,14,[]],0,[[5,5],22],[[5,6],22],[[5,6],22],[[],[[3,[-1]]],[]],[[],[[8,[-1]]],[]],[[],[[11,[-1,-2,[43,[-3]]]]],[],[],[]],[[],[[12,[-1,[43,[-2]]]]],[],[]],[[],[[13,[-1,-2]]],[],[]],[[],5],[[],[[1,[-1]]],[]],[-1,[[8,[-1]]],[15,16]],[[[17,[-1,-2]]],9,[],[]],[[[40,[-1,-2]]],9,[],[]],[[[41,[-1,-2]]],9,[],[]],[[[44,[-1,-2]]],9,[],[]],[[[45,[-1,-2]]],9,[],[]],[[[18,[-1]]],9,[]],[[[19,[-1]]],[[9,[-1]]],[]],[[[8,[-1]]],[[19,[-1]]],[]],[[5,5],[[9,[20]]]],[[[1,[-1]],[1,[-1]]],[[9,[20]]],46],[5,[[9,[47]]]],[[[1,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],-1,[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],-1,[]],[[[1,[-1]]],-1,[]],[[5,47],[[32,[4,4]]]],[[[1,[-1]],-1],[[32,[4,-1]]],[]],[[[3,[-1]],-1],[[32,[4,-1]]],[]],[[[3,[-1]],-1],4,[]],[[[3,[-1]],-1],[[32,[4,-1]]],[]],[[[3,[-1]],-1],4,[]],[[5,6],[[32,[4,4]]]],[[[1,[-1]],-1],4,[]],[[[8,[-1]]],[[9,[-1]]],[]],[[[37,[-1,-2]]],-2,[14,24],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,24,14],[[25,[-1]],14,24],[],26],[[[12,[-2,-3]],-1],22,[23,14,24],[[25,[-1]],14,24],26],[[[13,[-2,-3]],-1],[[9,[-3]]],[14,23],[[25,[-1]],14],[]],[[5,10],47],[[[1,[-1]],10],-1,[]],[[[37,[-1,-2]]],[[4,[-1,-2]]],[14,24],[]],[[[1,[-1]],10,-1],[[32,[4,4]]],16],[[[1,[-1]],10],[[32,[4,4]]],[16,27]],[[[11,[-1,-2,-3]],-4],4,[14,24],[],26,48],[[[12,[-1,-2]],-3],4,[14,24],26,48],[[[1,[-1]],-2],4,[],48],[[[1,[-1]],-2],4,[],48],[[[1,[-1]],10],4,[]],0,0,[[[1,[-1]],[2,[-1]]],22,28],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,24,14],[[25,[-1]],14,24],[],26],[[[1,[-1]],10],-1,[]],[[[1,[-1]],10],-1,[]],[[[12,[-1,-2]],[12,[-1,-3]]],[[0,[42]]],[14,24],26,26],[[5,10],4],[[[1,[-1]],10],4,[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[49,[[32,[5]]]],[50,[[32,[5]]]],[51,[[32,[5]]]],[52,[[32,[5]]]],[53,[[32,[5]]]],[6,[[32,[5]]]],[54,[[32,[5]]]],[55,[[32,[5]]]],[7,[[32,[5]]]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[[[2,[-1]]],[[32,[[1,[-1]]]]],16],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[[[12,[-1,-2]],[12,[-1,-3]]],[[0,[42]]],[14,24],26,26],[[[11,[-1,-2,-3]]],[[44,[-1,-2]]],[],[],[]],[[[13,[-1,-2]]],[[0,[42]]],14,[]],[[[11,[-1,-2,-3]]],[[45,[-1,-2]]],[],[],[]],[[[13,[-1,-2]]],[[0,[42]]],14,[]],[[[8,[-1]],-1],4,[]],[[5,47],[[32,[4,57]]]],[[5,6],[[32,[4,57]]]],[[[1,[7]],6],34],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],10,21,59],[[[58,[-1,-2]]],4,21,59],[[[58,[-1,-2]]],[[58,[-1,-2]]],[21,16],59],[[],[[58,[-1,-2]]],21,59],[[[60,[-1,-2]]],-1,21,59],[[[60,[-1,-2]]],-1,21,59],[[[60,[-1,-2]]],4,21,59],[[[58,[-1,-2]],33],34,[21,35],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],[],21,59],[[[58,[-1,-2]]],[[1,[-1]]],21,59],[[[58,[-1,-2]]],22,21,59],[[[58,[-1,-2]]],[[61,[-1]]],21,59],[[[58,[-1,-2]]],[[62,[-1]]],21,59],[[[58,[-1,-2]]],10,21,59],[[],[[58,[-1,-2]]],[],[]],[[[58,[-1,-2]]],[[9,[-1]]],21,59],[[[58,[-1,-2]]],[[9,[[60,[-1,-2]]]]],21,59],[[[58,[-1,-2]]],[[9,[-1]]],21,59],[[[60,[-1,-2]]],-1,21,59],[[[58,[-1,-2]]],-1,21,59],[[[58,[-1,-2]],-1],[[32,[4,-1]]],21,59],[[[58,[-1,-2]],-1],4,21,59],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[63,[-1]]],[]],[[[63,[-1]]],[[9,[-1]]],[]],[[[63,[-1]],-1],[[32,[4,-1]]],[]],[-1,-1,[]],[-1,-2,[],[]],[[],[[63,[-1]]],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,56,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,64],[65,65],[66,66],[[64,64],20],[[65,65],20],[[66,66],20],[[[67,[-1,-2,-3]]],[],21,68,69],[[[67,[-1,-2,-3]]],[],21,68,69],[[[70,[-1,-2,-3]]],4,[],68,[]],[[[67,[-1,-2,-3]]],4,21,68,69],[[64,64],22],[[65,65],22],[[66,66],22],[[[70,[-1,-2,-3]],-4],[[9,[[67,[-1,-2,-3]]]]],21,68,69,48],[[[67,[-1,-2,-3]]],4,21,68,69],[[[70,[-1,-2,-3]],33],34,[21,35],68,69],[[64,33],34],[[65,33],34],[[66,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1,-2,-3]]],22,21,68,69],[[[70,[-1,-2,-3]]],22,21,68,69],[[[70,[-1,-2,-3]]],[[71,[-1,-2,-3]]],21,68,69],[[],[[70,[-1,65,-2]]],[],[]],[[],[[70,[-1,64,-2]]],[],[]],[[],[[70,[-1,66,-2]]],[],[]],[[[71,[-1,-2,-3]]],9,21,68,69],[[64,64],[[9,[20]]]],[[65,65],[[9,[20]]]],[[66,66],[[9,[20]]]],[[[70,[-1,-2,-3]]],[[9,[-1]]],21,68,69],[[[70,[-1,-2,-3]]],[[32,[-1,4]]],21,68,69],[[[67,[-1,-2,-3]]],-1,21,68,69],[[[70,[-1,-2,-3]]],-1,21,68,69],[[[70,[-1,-2,-3]],-1],[[32,[4,-1]]],21,68,69],[[[70,[-1,-2,-3]],-1],4,21,68,69],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-1]]],10,[]],[[[73,[-1]]],10,[]],[[[74,[-1]]],10,[]],[[[72,[-1]]],[[72,[-1]]],16],[[[75,[-1]]],[[75,[-1]]],[]],[[],[[72,[-1]]],[]],[[[72,[-1]]],[[9,[-1]]],[]],[[[73,[-1]]],[[9,[-1]]],[]],[[[72,[-1]]],-1,[]],[[[73,[-1]]],-1,[]],[[[72,[-1]]],4,[]],[[[72,[-1]],-1],[[32,[4,-1]]],[]],[[[74,[-1]],-1],[[32,[4,-1]]],[]],[[[72,[-1]],-1],4,[]],[[[74,[-1]],-1],4,[]],[[[72,[-1]],[72,[-1]]],22,28],[[[72,[-1]],33],34,35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[72,[-1]],-2],4,24,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-1]]],[],[]],[[[72,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-1]]],22,[]],[[[72,[-1]]],22,[]],[[[72,[-1]]],[[75,[-1]]],[]],[[[72,[-1]]],[[76,[-1]]],[]],[[[72,[-1]]],10,[]],[[[73,[-1]]],10,[]],[[[74,[-1]]],10,[]],[[],[[72,[-1]]],[]],[[[75,[-1]]],9,[]],[[[76,[-1]]],9,[]],[[[75,[-1]]],9,[]],[[[76,[-1]]],9,[]],[[[72,[-1]]],[[9,[-1]]],[]],[[[73,[-1]]],[[9,[-1]]],[]],[[[73,[-1]]],22,[]],[[[74,[-1]]],22,[]],[[[72,[-1]]],[[4,[[74,[-1]],[73,[-1]]]]],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,[[32,[-2]]],[],[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]],[-1,56,[]]],"c":[],"p":[[3,"Vec",0],[15,"slice"],[3,"Deque",0],[15,"tuple"],[3,"String",0],[15,"str"],[15,"u8"],[3,"HistoryBuffer",0],[4,"Option",672],[15,"usize"],[3,"IndexMap",0],[3,"IndexSet",0],[3,"LinearMap",0],[8,"Eq",673],[8,"Copy",674],[8,"Clone",675],[3,"IndexMapIter",0],[3,"IndexSetIter",0],[3,"OldestOrdered",0],[4,"Ordering",673],[8,"Ord",673],[15,"bool"],[8,"Sized",674],[8,"Hash",676],[8,"Borrow",677],[8,"BuildHasher",676],[8,"Default",678],[8,"PartialEq",673],[4,"Entry",0],[15,"array"],[8,"IntoIterator",679],[4,"Result",680],[3,"Formatter",681],[6,"Result",681],[8,"Debug",681],[3,"Utf8Error",682],[3,"OccupiedEntry",0],[8,"Hasher",676],[3,"VacantEntry",0],[3,"IndexMapIterMut",0],[3,"IndexMapKeys",0],[8,"Iterator",683],[3,"BuildHasherDefault",684],[3,"IndexMapValues",0],[3,"IndexMapValuesMut",0],[8,"PartialOrd",673],[15,"char"],[8,"FnMut",685],[15,"u64"],[15,"u16"],[15,"i16"],[15,"i8"],[15,"u32"],[15,"i64"],[15,"i32"],[3,"TypeId",686],[3,"Error",681],[3,"BinaryHeap",410],[8,"Kind",410],[3,"PeekMut",410],[3,"Iter",687],[3,"IterMut",687],[3,"MpMcQueue",465],[3,"LinkedIndexU8",483],[3,"LinkedIndexU16",483],[3,"LinkedIndexUsize",483],[3,"FindMut",483],[8,"SortedLinkedListIndex",483],[8,"Kind",483],[3,"SortedLinkedList",483],[3,"Iter",483],[3,"Queue",593],[3,"Consumer",593],[3,"Producer",593],[3,"Iter",593],[3,"IterMut",593],[4,"Min",410],[4,"Max",410],[3,"Min",483],[3,"Max",483],[3,"Node",483]],"b":[[24,"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+N%3E"],[25,"impl-AsMut%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E"],[33,"impl-AsRef%3Cstr%3E-for-String%3CN%3E"],[34,"impl-AsRef%3C%5Bu8%5D%3E-for-String%3CN%3E"],[35,"impl-AsRef%3CVec%3CT,+N%3E%3E-for-Vec%3CT,+N%3E"],[36,"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+N%3E"],[131,"impl-PartialEq%3Cstr%3E-for-String%3CN%3E"],[132,"impl-PartialEq%3CString%3CN2%3E%3E-for-String%3CN1%3E"],[133,"impl-PartialEq%3C%26str%3E-for-String%3CN%3E"],[134,"impl-PartialEq%3C%5BB;+M%5D%3E-for-Vec%3CA,+N%3E"],[135,"impl-PartialEq%3C%5BB%5D%3E-for-Vec%3CA,+N%3E"],[136,"impl-PartialEq%3CVec%3CB,+N2%3E%3E-for-Vec%3CA,+N1%3E"],[137,"impl-PartialEq%3C%26%5BB%5D%3E-for-Vec%3CA,+N%3E"],[138,"impl-PartialEq%3C%26mut+%5BB%5D%3E-for-Vec%3CA,+N%3E"],[139,"impl-PartialEq%3C%26%5BB;+M%5D%3E-for-Vec%3CA,+N%3E"],[140,"impl-Extend%3CT%3E-for-HistoryBuffer%3CT,+N%3E"],[141,"impl-Extend%3C%26T%3E-for-HistoryBuffer%3CT,+N%3E"],[142,"impl-Extend%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S,+N%3E"],[143,"impl-Extend%3C(%26K,+%26V)%3E-for-IndexMap%3CK,+V,+S,+N%3E"],[144,"impl-Extend%3C%26T%3E-for-IndexSet%3CT,+S,+N%3E"],[145,"impl-Extend%3CT%3E-for-IndexSet%3CT,+S,+N%3E"],[146,"impl-Extend%3C%26T%3E-for-Vec%3CT,+N%3E"],[147,"impl-Extend%3CT%3E-for-Vec%3CT,+N%3E"],[148,"impl-Vec%3CT,+N%3E"],[159,"impl-Debug-for-String%3CN%3E"],[160,"impl-Display-for-String%3CN%3E"],[182,"impl-FromIterator%3Cchar%3E-for-String%3CN%3E"],[183,"impl-FromIterator%3C%26char%3E-for-String%3CN%3E"],[184,"impl-FromIterator%3C%26str%3E-for-String%3CN%3E"],[230,"impl-IntoIterator-for-%26mut+Deque%3CT,+N%3E"],[231,"impl-IntoIterator-for-%26Deque%3CT,+N%3E"],[232,"impl-IntoIterator-for-Deque%3CT,+N%3E"],[233,"impl-IntoIterator-for-%26IndexMap%3CK,+V,+S,+N%3E"],[234,"impl-IntoIterator-for-IndexMap%3CK,+V,+S,+N%3E"],[235,"impl-IntoIterator-for-%26mut+IndexMap%3CK,+V,+S,+N%3E"],[244,"impl-IntoIterator-for-Vec%3CT,+N%3E"],[245,"impl-IntoIterator-for-%26mut+Vec%3CT,+N%3E"],[246,"impl-IntoIterator-for-%26Vec%3CT,+N%3E"],[280,"impl-PartialEq%3CString%3CN2%3E%3E-for-String%3CN1%3E"],[281,"impl-PartialEq%3Cstr%3E-for-String%3CN%3E"],[282,"impl-PartialEq%3C%26str%3E-for-String%3CN%3E"],[354,"impl-TryFrom%3Cu64%3E-for-String%3CN%3E"],[355,"impl-TryFrom%3Cu16%3E-for-String%3CN%3E"],[356,"impl-TryFrom%3Ci16%3E-for-String%3CN%3E"],[357,"impl-TryFrom%3Ci8%3E-for-String%3CN%3E"],[358,"impl-TryFrom%3Cu32%3E-for-String%3CN%3E"],[359,"impl-TryFrom%3C%26str%3E-for-String%3CN%3E"],[360,"impl-TryFrom%3Ci64%3E-for-String%3CN%3E"],[361,"impl-TryFrom%3Ci32%3E-for-String%3CN%3E"],[362,"impl-TryFrom%3Cu8%3E-for-String%3CN%3E"],[636,"impl-IntoIterator-for-%26Queue%3CT,+N%3E"],[637,"impl-IntoIterator-for-%26mut+Queue%3CT,+N%3E"]]},\
"ident_case":{"doc":"Crate for changing case of Rust identifiers.","t":"NNNNNENNLLLLLLLLLLLLLLLL","n":["CamelCase","KebabCase","LowerCase","None","PascalCase","RenameRule","ScreamingSnakeCase","SnakeCase","apply_to_field","apply_to_variant","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_str","into","to_owned","try_from","try_into","type_id"],"q":[[0,"ident_case"],[24,"alloc::string"],[25,"core::convert"],[26,"core::fmt"],[27,"core::fmt"],[28,"core::any"]],"d":["Rename direct children to “camelCase” style.","Rename direct children to “kebab-case” style.","Rename direct children to “lowercase” style.","No-op rename rule.","Rename direct children to “PascalCase” style, as …","A casing rule for renaming Rust identifiers.","Rename direct children to “SCREAMING_SNAKE_CASE” …","Rename direct children to “snake_case” style, as …","Change case of a <code>snake_case</code> field.","Change case of a <code>PascalCase</code> variant.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,[[1,-1],2,[[4,[3]]]],[[1,-1],2,[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],5,[],[]],[[],1],[[1,1],6],[[1,7],8],[-1,-1,[]],[3,[[9,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[4,"RenameRule",0],[3,"String",24],[15,"str"],[8,"AsRef",25],[15,"tuple"],[15,"bool"],[3,"Formatter",26],[6,"Result",26],[4,"Result",27],[3,"TypeId",28]],"b":[]},\
"pin_project_lite":{"doc":"A lightweight version of pin-project written with …","t":"O","n":["pin_project"],"q":[[0,"pin_project_lite"]],"d":["A macro that creates a projection type covering all the …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"pin_utils":{"doc":"Utilities for pinning","t":"OOO","n":["pin_mut","unsafe_pinned","unsafe_unpinned"],"q":[[0,"pin_utils"]],"d":["Pins a value on the stack.","A pinned projection of a struct field.","An unpinned projection of a struct field."],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[],"b":[]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,12],16],[[12,-1],16,[17,[19,[18]]]],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[-1,-1,[]],[26,7],[8,7],[-1,-1,[]],[27,6],[12,8],[9,8],[-1,-1,[]],[1,8],[5,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",259],[3,"DelimSpan",228],[15,"bool"],[8,"Sized",260],[15,"str"],[8,"AsRef",261],[8,"IntoIterator",262],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",263],[6,"Result",263],[3,"TokenStream",264],[3,"Span",264],[4,"Result",265],[8,"Hasher",266],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",243],[15,"isize"],[4,"Option",267],[3,"String",268],[15,"usize"],[8,"RangeBounds",269],[3,"TypeId",270],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]],"b":[[68,"impl-PartialEq-for-Ident"],[69,"impl-PartialEq%3CT%3E-for-Ident"],[70,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[71,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[77,"impl-Display-for-LexError"],[78,"impl-Debug-for-LexError"],[79,"impl-Debug-for-TokenStream"],[80,"impl-Display-for-TokenStream"],[82,"impl-Debug-for-TokenTree"],[83,"impl-Display-for-TokenTree"],[84,"impl-Display-for-Group"],[85,"impl-Debug-for-Group"],[87,"impl-Debug-for-Punct"],[88,"impl-Display-for-Punct"],[90,"impl-Display-for-Ident"],[91,"impl-Debug-for-Ident"],[92,"impl-Display-for-Literal"],[93,"impl-Debug-for-Literal"],[96,"impl-From%3CTokenStream%3E-for-TokenStream"],[97,"impl-From%3CTokenTree%3E-for-TokenStream"],[100,"impl-From%3CIdent%3E-for-TokenTree"],[101,"impl-From%3CGroup%3E-for-TokenTree"],[103,"impl-From%3CPunct%3E-for-TokenTree"],[104,"impl-From%3CLiteral%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]],"b":[]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":"II","n":["CloneStableDeref","StableDeref"],"q":[[0,"stable_deref_trait"]],"d":["An unsafe marker trait for types where clones deref to the …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":"NNGNELLFLLLLFFFFFFLFFFFFFFLLLL","n":["DifferentLengthArgs","Err","HammingResult","Ok","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","sorensen_dice","to_string","try_from","try_into","type_id"],"q":[[0,"strsim"],[30,"core::fmt"],[31,"core::fmt"],[32,"core::fmt"],[33,"core::hash"],[34,"core::clone"],[35,"core::iter::traits::collect"],[36,"alloc::string"],[37,"core::any"]],"d":["","Contains the error value","","Contains the success value","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,14,0,14,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,3,3],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[[3,3],4],[[3,5],[[8,[6,7]]]],[[3,5],9],[-1,-1,[]],[[[10,[-1]],[10,[-1]]],2,[11,12,13]],[[-1,-2],14,15,15],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],2,[],[]],[[1,1],14],[-1,-2,[],[]],[[1,1],16],[[1,1],16],[[1,1],2],[[1,1],16],[[1,1],16],[[1,1],2],[[1,1],16],[-1,17,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,18,[]]],"c":[],"p":[[15,"str"],[15,"usize"],[4,"StrSimError",0],[15,"bool"],[3,"Formatter",30],[15,"tuple"],[3,"Error",30],[4,"Result",31],[6,"Result",30],[15,"slice"],[8,"Eq",32],[8,"Hash",33],[8,"Clone",34],[6,"HammingResult",0],[8,"IntoIterator",35],[15,"f64"],[3,"String",36],[3,"TypeId",37]],"b":[[9,"impl-Display-for-StrSimError"],[10,"impl-Debug-for-StrSimError"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDDNNNDNDNNEDNNDDENNNNNNNDNNDNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNNDENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNDNEDDEDDDNNNNNENEDDDDNNEEDNNNNNNDNNNDEDDDDENDNNNNNNENDDDDDDDDDDDDDDDDNNDNNNNDNENNDDDDDDDDNDNNDNNNNNNNNENNEEDDNNNNNNNNNNNNNNNNNNNNNNNNNNDEDDDDDDDDDDDDDDDDDNNNNNEDDDNNDNNENDNNNNNNNNNNGNENNNNDNNNNEEDNENNNNNNONNNDEEDDDDNNNNNNNDENNNNNNNNNDDDDDDDDDEDDDDDDDNENNNNNNNNDDDDDEDDNNNNNNNNNDEDENNNMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMOMMMMMMMOMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMMMOOMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMMMMMMMMMMLMMMMLMMMLMMMMMLMMMMMMMMMMMMMMMMMLMMMMAMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLFLOLLLLLLLOOLFLLLLLLLMMMMMMMMMLLMMMMMMMMMMMMMMMAMMMMMMMLMMMMLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMMMMMMMMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLMMMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLNDDDNQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Enum","Eq","Err","Error","Expr","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldMutability","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemFn","ImplItemMacro","ImplItemType","ImplRestriction","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","LocalInit","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mod","Mul","MulAssign","Mut","Name","NameValue","Named","Named","Ne","Neg","Never","None","None","None","None","Not","Ok","Or","Or","Outer","Paren","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatConst","PatIdent","PatLit","PatMacro","PatOr","PatParen","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemAssign","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Signature","Slice","Slice","Static","Static","StaticMutability","Stmt","StmtMacro","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubAssign","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemFn","TraitItemMacro","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","comma","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","const_token","const_token","constness","constness","content","continue_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","delimiter","discriminant","diverge","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","elems","else_branch","end","end","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","len","len","len","let_token","let_token","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","loop_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","mac","make_where_clause","match_token","member","member","member","meta","meta","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_mod_style","parse_multi","parse_multi_with_leading_vert","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_single","parse_str","parse_turbofish","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","qself","qself","qself","question_token","receiver","receiver","reference","rename","rename","require_ident","require_list","require_name_value","require_path_only","rest","rest","restriction","return_token","right","right","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","start","start","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","eq","error","error","error","extend","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","hash","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[4187,"syn::buffer"],[4221,"syn::ext"],[4225,"syn::meta"],[4239,"syn::parse"],[4338,"syn::parse::discouraged"],[4342,"syn::punctuated"],[4507,"syn::spanned"],[4509,"syn::token"],[6503,"core::str::traits"],[6504,"core::cmp"],[6505,"core::convert"],[6506,"core::marker"],[6507,"core::fmt"],[6508,"core::fmt"],[6509,"core::fmt"],[6510,"core::convert"],[6511,"core::hash"],[6512,"proc_macro2"],[6513,"proc_macro2"],[6514,"core::ops::function"],[6515,"proc_macro2::extra"],[6516,"alloc::string"],[6517,"core::any"],[6518,"proc_macro2"],[6519,"proc_macro2"],[6520,"core::ops::function"],[6521,"core::cmp"],[6522,"core::fmt"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0..=10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const block: <code>const { ... }</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expression, with or without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An associated function within the definition of a trait.","An associated function within an impl block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","An associated function within an impl block.","A macro invocation within an impl block.","An associated type within an impl block.","Unused, but reserved for RFC 3323 restrictions.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","The expression assigned in a local <code>let</code> binding, including …","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in pattern position.","A macro invocation in statement position.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized pattern: <code>(A | B)</code>.","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A const block: <code>const { ... }</code>.","A pattern that binds a new variable: …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A pattern that matches any one of a set of cases.","A parenthesized pattern: <code>(A | B)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method.","The <code>self</code> argument of an associated method.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference pattern: <code>&amp;mut var</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A dynamically sized slice type: <code>[T]</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","The mutability of an <code>Item::Static</code> or <code>ForeignItem::Static</code>.","A statement, usually ending in a semicolon.","A macro invocation in statement position.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","An associated function within the definition of a trait.","A macro invocation within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codextension traits to provide parsing methods on foreign …","","","","Content stored in the varianteturns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","If this path consists of a single ident, returns the identame of the variant.","Name of the field, if any.","","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parse a pattern, possibly involving <code>|</code>, but not a leading <code>|</code>.","Parse a pattern, possibly involving <code>|</code>, possibly including a","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a pattern that does <em>not</em> involve <code>|</code> at the top level.","Parse a string of Rust code into the chosen syntax tree …","Parse <code>::&lt;…&gt;</code> with mandatory leading <code>::</code>.","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementseturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,136,136,136,153,0,0,26,169,26,0,154,0,154,26,0,0,26,169,0,0,0,26,136,136,136,136,136,136,0,26,128,0,135,135,26,128,128,26,26,128,70,26,26,73,85,112,117,138,154,0,0,154,26,350,0,0,0,0,187,137,0,136,136,22,85,136,6,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,26,0,0,0,0,0,0,0,128,85,107,112,117,0,26,0,0,0,0,0,85,136,0,0,0,101,26,101,169,136,70,0,138,26,85,0,0,0,0,0,0,0,169,0,26,26,169,161,12,128,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,26,0,73,78,82,154,0,13,0,26,138,0,0,0,0,0,0,0,0,165,0,26,136,0,26,85,107,112,117,138,165,169,0,26,80,0,0,0,0,26,85,136,136,126,101,13,17,65,136,137,169,80,126,153,163,137,6,136,138,12,26,135,138,169,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,101,138,169,0,0,0,0,169,161,0,26,138,0,350,0,123,26,138,169,136,136,101,26,138,161,0,26,0,136,136,136,136,0,138,169,85,107,0,0,0,128,0,22,26,85,138,136,136,0,78,85,85,0,0,0,0,0,0,0,169,26,26,26,138,169,138,0,0,73,82,85,107,112,117,138,154,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,26,22,85,17,17,65,26,85,0,0,0,0,0,0,0,0,26,78,85,107,112,117,128,138,169,0,0,0,0,26,138,26,90,122,171,54,142,180,10,34,50,155,152,49,35,104,160,1,29,36,122,16,20,21,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,48,49,50,51,52,52,53,53,54,55,56,57,58,59,60,61,62,63,64,67,69,71,74,75,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,109,110,111,113,114,115,116,118,119,120,121,124,125,139,140,141,142,143,144,145,146,147,148,149,150,166,168,185,186,96,30,134,176,30,39,3,5,3,5,29,32,37,37,59,62,89,119,36,40,47,63,69,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,350,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,350,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,84,74,75,83,84,97,115,158,173,182,18,24,49,57,87,90,91,96,106,145,164,0,11,27,43,55,144,170,181,0,33,0,139,29,36,140,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,102,155,20,67,68,74,75,76,83,84,86,94,96,109,113,115,118,124,148,150,158,69,125,186,42,63,72,72,37,37,76,86,113,118,179,36,122,93,38,88,0,0,21,72,77,153,75,76,113,114,115,91,118,119,120,14,134,16,167,57,143,30,39,50,125,186,182,170,172,177,179,180,181,27,60,144,146,147,183,42,53,53,24,87,8,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,15,28,45,75,76,86,94,97,98,118,120,156,157,167,33,35,40,41,43,45,49,51,54,55,56,58,61,64,67,86,94,118,167,0,88,184,69,16,23,25,57,95,99,145,8,8,8,9,1,2,10,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,3,5,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,122,171,40,77,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,73,73,73,74,75,75,76,77,78,78,78,79,80,81,82,82,82,83,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,101,101,101,101,101,102,103,104,105,106,107,107,107,107,107,108,109,110,111,112,112,112,112,112,113,114,115,116,117,117,117,117,117,118,119,120,121,122,123,123,123,124,125,126,127,128,128,128,128,128,128,128,128,129,130,131,132,3,3,5,5,133,350,134,135,136,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,140,141,142,143,144,145,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,34,21,86,87,91,95,96,97,98,99,110,113,115,118,120,122,156,157,158,151,41,172,72,77,155,160,69,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,10,16,20,21,75,76,86,87,88,92,93,94,95,96,97,98,99,102,103,104,109,110,113,115,118,120,122,139,152,156,157,158,42,91,173,40,162,43,66,166,36,122,159,171,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,350,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,17,17,17,17,153,151,153,71,90,91,96,106,17,17,32,33,38,40,47,63,100,151,140,28,31,17,55,170,45,166,124,74,83,180,72,36,77,79,84,171,72,53,53,46,46,47,72,77,155,160,48,48,92,111,116,121,168,175,72,49,39,67,150,0,11,50,93,79,36,20,54,94,109,124,139,142,179,180,68,184,185,186,18,8,10,74,128,129,130,131,132,3,5,133,8,31,61,36,36,36,122,159,171,72,19,34,50,51,60,79,122,141,146,147,159,162,171,177,183,0,0,0,8,10,13,14,15,16,18,19,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,128,129,129,130,131,132,3,5,133,134,136,137,151,152,154,155,159,161,164,165,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,0,8,11,14,11,14,134,134,0,11,0,151,138,138,20,11,14,11,0,0,138,0,155,20,129,164,26,8,10,40,45,69,125,141,142,148,150,166,11,13,14,15,52,52,57,79,134,145,147,162,178,160,11,81,162,0,52,52,57,145,147,178,58,122,50,124,88,104,151,13,13,13,57,145,96,56,28,31,151,124,91,93,23,55,86,88,92,94,95,97,98,100,108,109,110,111,113,114,115,116,118,120,121,166,168,170,8,10,128,129,130,131,132,3,5,133,71,89,108,114,119,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,128,129,129,130,130,131,131,132,132,3,3,5,5,133,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,66,133,0,72,105,179,53,53,94,109,164,23,95,11,139,128,129,130,131,132,3,5,96,42,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,3,5,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,0,129,130,131,132,3,5,133,14,134,91,96,97,100,102,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,350,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,350,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,59,50,20,35,76,86,94,98,109,113,118,120,124,148,156,160,185,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,350,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,72,72,98,110,115,120,44,149,174,25,99,19,8,62,90,91,93,96,122,171,100,129,130,131,132,133,15,133,157,122,171,24,87,20,21,86,87,88,89,93,94,95,96,97,98,99,100,108,109,110,118,119,120,72,81,63,169,173,182,187,64,0,0,224,224,225,224,225,225,225,225,225,225,224,225,225,225,224,225,225,225,224,224,225,225,225,225,225,225,224,225,224,225,224,225,0,351,351,351,0,229,229,229,229,229,229,229,0,229,229,229,229,229,6,0,0,0,6,218,0,0,0,0,0,0,0,232,230,235,232,233,234,230,235,232,233,234,232,230,233,230,233,230,232,233,0,232,234,235,232,233,230,230,230,232,232,234,232,230,230,235,232,233,234,234,230,235,232,233,234,230,230,230,232,232,230,230,215,232,218,234,218,232,218,232,235,232,232,232,230,232,232,230,230,233,230,232,230,235,232,233,234,230,235,232,233,234,230,235,232,233,234,0,0,352,353,246,0,0,0,0,0,0,0,0,246,239,243,251,244,245,208,209,246,239,243,251,244,245,208,209,246,239,239,243,244,245,208,246,239,239,243,244,245,208,246,246,239,239,239,239,239,239,239,239,239,243,251,244,245,208,209,246,239,239,239,239,239,239,239,243,251,244,245,208,209,246,239,239,239,243,251,244,245,208,209,239,246,246,239,239,239,239,239,239,243,251,244,245,208,209,239,246,243,251,244,245,208,209,243,251,244,245,208,209,239,239,239,239,239,239,239,239,246,246,239,239,239,243,251,244,245,208,209,239,246,239,243,244,245,208,246,239,246,239,239,243,251,244,245,208,209,246,239,243,251,244,245,208,209,246,239,243,251,244,245,208,209,246,246,246,0,354,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,199,301,304,305,307,308,309,310,314,318,321,322,325,326,330,332,334,335,337,342,344,346,199,301,304,305,307,308,309,310,314,318,321,322,325,326,330,332,334,335,337,342,344,346,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,253,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,347,348,349,199,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,253,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,253,199,254,255,256,257,258,259,260,261,262,263,202,264,265,266,267,268,198,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,200,201,287,288,197,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349],"fc":[],"p":[[3,"TypeGenerics",0],[3,"Turbofish",0],[3,"LitInt",0],[15,"str"],[3,"LitFloat",0],[6,"Result",4239],[8,"FromStr",6503],[3,"Ident",0],[3,"ImplGenerics",0],[3,"Lifetime",0],[3,"Attribute",0],[4,"AttrStyle",0],[4,"Meta",0],[3,"MetaList",0],[3,"MetaNameValue",0],[3,"Variant",0],[4,"Fields",0],[3,"FieldsNamed",0],[3,"FieldsUnnamed",0],[3,"Field",0],[3,"DeriveInput",0],[4,"Data",0],[3,"DataStruct",0],[3,"DataEnum",0],[3,"DataUnion",0],[4,"Expr",0],[3,"ExprArray",0],[3,"ExprAssign",0],[3,"ExprAsync",0],[3,"ExprAwait",0],[3,"ExprBinary",0],[3,"ExprBlock",0],[3,"ExprBreak",0],[3,"ExprCall",0],[3,"ExprCast",0],[3,"ExprClosure",0],[3,"ExprConst",0],[3,"ExprContinue",0],[3,"ExprField",0],[3,"ExprForLoop",0],[3,"ExprGroup",0],[3,"ExprIf",0],[3,"ExprIndex",0],[3,"ExprInfer",0],[3,"ExprLet",0],[3,"ExprLit",0],[3,"ExprLoop",0],[3,"ExprMacro",0],[3,"ExprMatch",0],[3,"ExprMethodCall",0],[3,"ExprParen",0],[3,"ExprPath",0],[3,"ExprRange",0],[3,"ExprReference",0],[3,"ExprRepeat",0],[3,"ExprReturn",0],[3,"ExprStruct",0],[3,"ExprTry",0],[3,"ExprTryBlock",0],[3,"ExprTuple",0],[3,"ExprUnary",0],[3,"ExprUnsafe",0],[3,"ExprWhile",0],[3,"ExprYield",0],[4,"Member",0],[3,"Index",0],[3,"FieldValue",0],[3,"Label",0],[3,"Arm",0],[4,"RangeLimits",0],[3,"File",0],[3,"Generics",0],[4,"GenericParam",0],[3,"LifetimeParam",0],[3,"TypeParam",0],[3,"ConstParam",0],[3,"BoundLifetimes",0],[4,"TypeParamBound",0],[3,"TraitBound",0],[4,"TraitBoundModifier",0],[3,"WhereClause",0],[4,"WherePredicate",0],[3,"PredicateLifetime",0],[3,"PredicateType",0],[4,"Item",0],[3,"ItemConst",0],[3,"ItemEnum",0],[3,"ItemExternCrate",0],[3,"ItemFn",0],[3,"ItemForeignMod",0],[3,"ItemImpl",0],[3,"ItemMacro",0],[3,"ItemMod",0],[3,"ItemStatic",0],[3,"ItemStruct",0],[3,"ItemTrait",0],[3,"ItemTraitAlias",0],[3,"ItemType",0],[3,"ItemUnion",0],[3,"ItemUse",0],[4,"UseTree",0],[3,"UsePath",0],[3,"UseName",0],[3,"UseRename",0],[3,"UseGlob",0],[3,"UseGroup",0],[4,"ForeignItem",0],[3,"ForeignItemFn",0],[3,"ForeignItemStatic",0],[3,"ForeignItemType",0],[3,"ForeignItemMacro",0],[4,"TraitItem",0],[3,"TraitItemConst",0],[3,"TraitItemFn",0],[3,"TraitItemType",0],[3,"TraitItemMacro",0],[4,"ImplItem",0],[3,"ImplItemConst",0],[3,"ImplItemFn",0],[3,"ImplItemType",0],[3,"ImplItemMacro",0],[3,"Signature",0],[4,"FnArg",0],[3,"Receiver",0],[3,"Variadic",0],[4,"StaticMutability",0],[4,"ImplRestriction",0],[4,"Lit",0],[3,"LitStr",0],[3,"LitByteStr",0],[3,"LitByte",0],[3,"LitChar",0],[3,"LitBool",0],[3,"Macro",0],[4,"MacroDelimiter",0],[4,"BinOp",0],[4,"UnOp",0],[4,"Pat",0],[3,"PatIdent",0],[3,"PatOr",0],[3,"PatParen",0],[3,"PatReference",0],[3,"PatRest",0],[3,"PatSlice",0],[3,"PatStruct",0],[3,"PatTuple",0],[3,"PatTupleStruct",0],[3,"PatType",0],[3,"PatWild",0],[3,"FieldPat",0],[3,"Path",0],[3,"PathSegment",0],[4,"PathArguments",0],[4,"GenericArgument",0],[3,"AngleBracketedGenericArguments",0],[3,"AssocType",0],[3,"AssocConst",0],[3,"Constraint",0],[3,"ParenthesizedGenericArguments",0],[3,"QSelf",0],[4,"Visibility",0],[3,"VisRestricted",0],[4,"FieldMutability",0],[3,"Block",0],[4,"Stmt",0],[3,"Local",0],[3,"LocalInit",0],[3,"StmtMacro",0],[4,"Type",0],[3,"TypeArray",0],[3,"TypeBareFn",0],[3,"TypeGroup",0],[3,"TypeImplTrait",0],[3,"TypeInfer",0],[3,"TypeMacro",0],[3,"TypeNever",0],[3,"TypeParen",0],[3,"TypePath",0],[3,"TypePtr",0],[3,"TypeReference",0],[3,"TypeSlice",0],[3,"TypeTraitObject",0],[3,"TypeTuple",0],[3,"Abi",0],[3,"BareFnArg",0],[3,"BareVariadic",0],[4,"ReturnType",0],[15,"tuple"],[4,"Ordering",6504],[15,"bool"],[8,"AsRef",6505],[8,"Sized",6506],[3,"Formatter",6507],[3,"Error",6507],[4,"Result",6508],[6,"Result",6507],[3,"Super",4509],[3,"Extern",4509],[3,"Underscore",4509],[3,"SelfType",4509],[3,"SelfValue",4509],[3,"Crate",4509],[15,"usize"],[3,"Literal",6509],[8,"Into",6505],[4,"Option",6510],[8,"Hasher",6511],[3,"Iter",4342],[3,"IterMut",4342],[3,"Span",6509],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream",6512],[8,"Parse",4239],[6,"ParseStream",4239],[3,"TokenStream",6509],[8,"Parser",4239],[3,"Vec",6513],[8,"FnMut",6514],[3,"DelimSpan",6515],[3,"String",6516],[3,"TypeId",6517],[3,"TokenBuffer",4187],[3,"Cursor",4187],[4,"Delimiter",6509],[3,"Punct",6509],[4,"TokenTree",6509],[3,"ParseNestedMeta",4225],[3,"Error",4239],[8,"Display",6507],[3,"ParseBuffer",4239],[3,"StepCursor",4239],[3,"Nothing",4239],[3,"Lookahead1",4239],[8,"IntoIterator",6518],[3,"LexError",6509],[8,"ToTokens",6519],[3,"Punctuated",4342],[8,"Peek",4239],[8,"FnOnce",6514],[8,"Clone",6520],[3,"Pairs",4342],[3,"IntoPairs",4342],[3,"IntoIter",4342],[4,"Pair",4342],[8,"PartialEq",6504],[8,"Default",6521],[8,"Debug",6507],[8,"Hash",6511],[3,"PairsMut",4342],[8,"Token",4509],[3,"Group",4509],[3,"Abstract",4509],[3,"As",4509],[3,"Async",4509],[3,"Auto",4509],[3,"Await",4509],[3,"Become",4509],[3,"Box",4509],[3,"Break",4509],[3,"Const",4509],[3,"Continue",4509],[3,"Default",4509],[3,"Do",4509],[3,"Dyn",4509],[3,"Else",4509],[3,"Enum",4509],[3,"Final",4509],[3,"Fn",4509],[3,"For",4509],[3,"If",4509],[3,"Impl",4509],[3,"In",4509],[3,"Let",4509],[3,"Loop",4509],[3,"Macro",4509],[3,"Match",4509],[3,"Mod",4509],[3,"Move",4509],[3,"Mut",4509],[3,"Override",4509],[3,"Priv",4509],[3,"Pub",4509],[3,"Ref",4509],[3,"Return",4509],[3,"Static",4509],[3,"Struct",4509],[3,"Trait",4509],[3,"Try",4509],[3,"Type",4509],[3,"Typeof",4509],[3,"Union",4509],[3,"Unsafe",4509],[3,"Unsized",4509],[3,"Use",4509],[3,"Virtual",4509],[3,"Where",4509],[3,"While",4509],[3,"Yield",4509],[3,"And",4509],[3,"AndAnd",4509],[3,"AndEq",4509],[3,"At",4509],[3,"Caret",4509],[3,"CaretEq",4509],[3,"Colon",4509],[3,"Comma",4509],[3,"Dollar",4509],[3,"Dot",4509],[3,"DotDot",4509],[3,"DotDotDot",4509],[3,"DotDotEq",4509],[3,"Eq",4509],[3,"EqEq",4509],[3,"FatArrow",4509],[3,"Ge",4509],[3,"Gt",4509],[3,"LArrow",4509],[3,"Le",4509],[3,"Lt",4509],[3,"Minus",4509],[3,"MinusEq",4509],[3,"Ne",4509],[3,"Not",4509],[3,"Or",4509],[3,"OrEq",4509],[3,"OrOr",4509],[3,"PathSep",4509],[3,"Percent",4509],[3,"PercentEq",4509],[3,"Plus",4509],[3,"PlusEq",4509],[3,"Pound",4509],[3,"Question",4509],[3,"RArrow",4509],[3,"Semi",4509],[3,"Shl",4509],[3,"ShlEq",4509],[3,"Shr",4509],[3,"ShrEq",4509],[3,"Slash",4509],[3,"SlashEq",4509],[3,"Star",4509],[3,"StarEq",4509],[3,"Tilde",4509],[3,"Brace",4509],[3,"Bracket",4509],[3,"Paren",4509],[4,"StrStyle",0],[8,"IdentExt",4221],[8,"Speculative",4338],[8,"AnyDelimiter",4338],[8,"Spanned",4507]],"b":[[1393,"impl-PartialEq-for-Ident"],[1394,"impl-PartialEq%3CT%3E-for-Ident"],[1622,"impl-IdentFragment-for-Ident"],[1623,"impl-Display-for-Ident"],[1624,"impl-Debug-for-Ident"],[1628,"impl-Display-for-Lifetime"],[1629,"impl-Debug-for-Lifetime"],[1684,"impl-IdentFragment-for-Member"],[1685,"impl-Debug-for-Member"],[1686,"impl-IdentFragment-for-Index"],[1687,"impl-Debug-for-Index"],[1754,"impl-Display-for-LitInt"],[1755,"impl-Debug-for-LitInt"],[1756,"impl-Display-for-LitFloat"],[1757,"impl-Debug-for-LitFloat"],[1817,"impl-From%3CSuper%3E-for-Ident"],[1818,"impl-From%3CExtern%3E-for-Ident"],[1819,"impl-From%3CUnderscore%3E-for-Ident"],[1820,"impl-From%3CSelfType%3E-for-Ident"],[1822,"impl-From%3CSelfValue%3E-for-Ident"],[1823,"impl-From%3CCrate%3E-for-Ident"],[1830,"impl-From%3CPath%3E-for-Meta"],[1831,"impl-From%3CMetaNameValue%3E-for-Meta"],[1833,"impl-From%3CMetaList%3E-for-Meta"],[1838,"impl-From%3CFieldsNamed%3E-for-Fields"],[1839,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[1843,"impl-From%3CItemStruct%3E-for-DeriveInput"],[1844,"impl-From%3CItemUnion%3E-for-DeriveInput"],[1846,"impl-From%3CItemEnum%3E-for-DeriveInput"],[1851,"impl-From%3CExprBlock%3E-for-Expr"],[1852,"impl-From%3CExprRange%3E-for-Expr"],[1853,"impl-From%3CExprBreak%3E-for-Expr"],[1854,"impl-From%3CExprReturn%3E-for-Expr"],[1855,"impl-From%3CExprInfer%3E-for-Expr"],[1856,"impl-From%3CExprLoop%3E-for-Expr"],[1857,"impl-From%3CExprCall%3E-for-Expr"],[1858,"impl-From%3CExprAsync%3E-for-Expr"],[1859,"impl-From%3CExprIndex%3E-for-Expr"],[1860,"impl-From%3CExprForLoop%3E-for-Expr"],[1861,"impl-From%3CExprLit%3E-for-Expr"],[1862,"impl-From%3CExprUnsafe%3E-for-Expr"],[1863,"impl-From%3CExprBinary%3E-for-Expr"],[1864,"impl-From%3CExprField%3E-for-Expr"],[1865,"impl-From%3CExprAssign%3E-for-Expr"],[1866,"impl-From%3CExprIf%3E-for-Expr"],[1867,"impl-From%3CExprArray%3E-for-Expr"],[1868,"impl-From%3CExprRepeat%3E-for-Expr"],[1869,"impl-From%3CExprMethodCall%3E-for-Expr"],[1870,"impl-From%3CExprWhile%3E-for-Expr"],[1871,"impl-From%3CExprMatch%3E-for-Expr"],[1872,"impl-From%3CExprContinue%3E-for-Expr"],[1873,"impl-From%3CExprTuple%3E-for-Expr"],[1874,"impl-From%3CExprPath%3E-for-Expr"],[1875,"impl-From%3CExprConst%3E-for-Expr"],[1876,"impl-From%3CExprGroup%3E-for-Expr"],[1877,"impl-From%3CExprReference%3E-for-Expr"],[1878,"impl-From%3CExprTry%3E-for-Expr"],[1879,"impl-From%3CExprAwait%3E-for-Expr"],[1880,"impl-From%3CExprClosure%3E-for-Expr"],[1881,"impl-From%3CExprParen%3E-for-Expr"],[1882,"impl-From%3CExprYield%3E-for-Expr"],[1883,"impl-From%3CExprCast%3E-for-Expr"],[1884,"impl-From%3CExprTryBlock%3E-for-Expr"],[1886,"impl-From%3CExprStruct%3E-for-Expr"],[1887,"impl-From%3CExprLet%3E-for-Expr"],[1888,"impl-From%3CExprUnary%3E-for-Expr"],[1889,"impl-From%3CExprMacro%3E-for-Expr"],[1929,"impl-From%3Cusize%3E-for-Member"],[1930,"impl-From%3CIdent%3E-for-Member"],[1931,"impl-From%3CIndex%3E-for-Member"],[1940,"impl-From%3CConstParam%3E-for-GenericParam"],[1942,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[1943,"impl-From%3CTypeParam%3E-for-GenericParam"],[1949,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[1951,"impl-From%3CLifetime%3E-for-TypeParamBound"],[1955,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[1956,"impl-From%3CPredicateType%3E-for-WherePredicate"],[1960,"impl-From%3CItemExternCrate%3E-for-Item"],[1961,"impl-From%3CItemUse%3E-for-Item"],[1962,"impl-From%3CItemUnion%3E-for-Item"],[1963,"impl-From%3CItemForeignMod%3E-for-Item"],[1964,"impl-From%3CItemEnum%3E-for-Item"],[1965,"impl-From%3CItemTraitAlias%3E-for-Item"],[1966,"impl-From%3CItemMacro%3E-for-Item"],[1967,"impl-From%3CItemType%3E-for-Item"],[1969,"impl-From%3CItemTrait%3E-for-Item"],[1970,"impl-From%3CItemConst%3E-for-Item"],[1971,"impl-From%3CItemImpl%3E-for-Item"],[1972,"impl-From%3CItemStruct%3E-for-Item"],[1973,"impl-From%3CItemFn%3E-for-Item"],[1974,"impl-From%3CItemStatic%3E-for-Item"],[1975,"impl-From%3CItemMod%3E-for-Item"],[1976,"impl-From%3CDeriveInput%3E-for-Item"],[1992,"impl-From%3CUseRename%3E-for-UseTree"],[1994,"impl-From%3CUseGlob%3E-for-UseTree"],[1995,"impl-From%3CUseName%3E-for-UseTree"],[1996,"impl-From%3CUseGroup%3E-for-UseTree"],[1997,"impl-From%3CUsePath%3E-for-UseTree"],[2003,"impl-From%3CForeignItemStatic%3E-for-ForeignItem"],[2004,"impl-From%3CForeignItemType%3E-for-ForeignItem"],[2006,"impl-From%3CForeignItemFn%3E-for-ForeignItem"],[2007,"impl-From%3CForeignItemMacro%3E-for-ForeignItem"],[2012,"impl-From%3CTraitItemConst%3E-for-TraitItem"],[2014,"impl-From%3CTraitItemType%3E-for-TraitItem"],[2015,"impl-From%3CTraitItemFn%3E-for-TraitItem"],[2016,"impl-From%3CTraitItemMacro%3E-for-TraitItem"],[2021,"impl-From%3CImplItemMacro%3E-for-ImplItem"],[2023,"impl-From%3CImplItemFn%3E-for-ImplItem"],[2024,"impl-From%3CImplItemConst%3E-for-ImplItem"],[2025,"impl-From%3CImplItemType%3E-for-ImplItem"],[2031,"impl-From%3CPatType%3E-for-FnArg"],[2033,"impl-From%3CReceiver%3E-for-FnArg"],[2038,"impl-From%3CLitByte%3E-for-Lit"],[2039,"impl-From%3CLitBool%3E-for-Lit"],[2040,"impl-From%3CLitInt%3E-for-Lit"],[2041,"impl-From%3CLitStr%3E-for-Lit"],[2042,"impl-From%3CLitByteStr%3E-for-Lit"],[2044,"impl-From%3CLitFloat%3E-for-Lit"],[2045,"impl-From%3CLitChar%3E-for-Lit"],[2060,"impl-From%3CExprLit%3E-for-Pat"],[2061,"impl-From%3CPatStruct%3E-for-Pat"],[2062,"impl-From%3CExprConst%3E-for-Pat"],[2063,"impl-From%3CExprPath%3E-for-Pat"],[2065,"impl-From%3CPatRest%3E-for-Pat"],[2066,"impl-From%3CPatSlice%3E-for-Pat"],[2067,"impl-From%3CExprRange%3E-for-Pat"],[2068,"impl-From%3CPatTupleStruct%3E-for-Pat"],[2069,"impl-From%3CPatReference%3E-for-Pat"],[2070,"impl-From%3CPatOr%3E-for-Pat"],[2071,"impl-From%3CPatIdent%3E-for-Pat"],[2072,"impl-From%3CPatWild%3E-for-Pat"],[2073,"impl-From%3CPatParen%3E-for-Pat"],[2074,"impl-From%3CPatTuple%3E-for-Pat"],[2075,"impl-From%3CExprMacro%3E-for-Pat"],[2076,"impl-From%3CPatType%3E-for-Pat"],[2109,"impl-From%3CTypeTraitObject%3E-for-Type"],[2111,"impl-From%3CTypeInfer%3E-for-Type"],[2112,"impl-From%3CTypePath%3E-for-Type"],[2113,"impl-From%3CTypePtr%3E-for-Type"],[2114,"impl-From%3CTypeBareFn%3E-for-Type"],[2115,"impl-From%3CTypeImplTrait%3E-for-Type"],[2116,"impl-From%3CTypeTuple%3E-for-Type"],[2117,"impl-From%3CTypeArray%3E-for-Type"],[2118,"impl-From%3CTypeParen%3E-for-Type"],[2119,"impl-From%3CTypeReference%3E-for-Type"],[2120,"impl-From%3CTypeGroup%3E-for-Type"],[2121,"impl-From%3CTypeSlice%3E-for-Type"],[2122,"impl-From%3CTypeMacro%3E-for-Type"],[2123,"impl-From%3CTypeNever%3E-for-Type"],[2582,"impl-IntoIterator-for-%26Fields"],[2583,"impl-IntoIterator-for-%26mut+Fields"],[2584,"impl-IntoIterator-for-Fields"],[2806,"impl-LitStr"],[2807,"impl-Parse-for-LitStr"],[2964,"impl-Ident"],[2965,"impl-IdentFragment-for-Ident"],[4278,"impl-Debug-for-Error"],[4279,"impl-Display-for-Error"],[4280,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[4281,"impl-Display-for-ParseBuffer%3C\'a%3E"],[4297,"impl-IntoIterator-for-Error"],[4298,"impl-IntoIterator-for-%26Error"],[4386,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[4387,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[4399,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[4400,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[4413,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"],[4414,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"],[4415,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
